<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Railslide - dev</title><link href="https://railslide.io/" rel="alternate"></link><link href="https://railslide.io/feeds/dev.atom.xml" rel="self"></link><id>https://railslide.io/</id><updated>2023-01-07T00:00:00+01:00</updated><entry><title>Learning vim in 2022</title><link href="https://railslide.io/learning-vim-in-2022.html" rel="alternate"></link><published>2023-01-07T00:00:00+01:00</published><updated>2023-01-07T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2023-01-07:/learning-vim-in-2022.html</id><summary type="html">&lt;p&gt;I decided that in 2022 I would learn Vim, here's how it went.&lt;/p&gt;</summary><content type="html">&lt;p&gt;At a certain point I decided that it was time for me to learn how to use Vim. There were mainly two reasons for it. Number one, while playing the Sans Holiday Hack Challenge I have had a taste of how powerful could Vim be, as I discovered that I could open a binary file, pipe it through &lt;code&gt;xxd&lt;/code&gt;, and modify its source code. Second, I recently found myself orphaned of an editor of choice, so I needed to find a new one.&lt;/p&gt;
&lt;h2&gt;Why I needed a new editor&lt;/h2&gt;
&lt;p&gt;For a long time I have used Sublime Text as my go-to editor. I set up a bunch of plugins so that I could have linting and autocompletion, bought a license (at the time the business model of Sublime was an one-off lifelong license) and happily coded with it for a bunch of years. The problem with that setup was that the more languages I started coding in the more plugins I had to add, and those plugins didn't always play along with each other. On top of that Sublime has now switched to a monthly subscription license model, and - while I still use Sublime for occasional note-taking and writing this blog - I don't feel it gives me enough value for committing to a subscription.&lt;/p&gt;
&lt;p&gt;Then came Kotlin and with it came IntelliJ. I loved IntelliJ and for me it's one of the best IDEs out there: fantastic language support, everything can be done through keyboard, fuzzy search for anything you might need (files, actions, etc.), and so on. So why don't I stick to it? Well, mostly because its free version doesn't have multilanguage support. In other words, if you don't use the paid version, you have to use a different editor for each language (i.e. IntelliJ for Kotlin, PyCharm for Python, GoLand for Go, and good luck with JS/Typescript as there's no free version of Webstorm). That is usually not a problem at work, as my employer is happy to cover the cost of the license, but when it comes to the amount of code I do in my free time I found hard to motivate such an expense.&lt;/p&gt;
&lt;p&gt;Last but not least I also gave VSCode a shot, but I found it way too mouse oriented from my liking and its shortcuts didn't feel super intuitive to me.&lt;/p&gt;
&lt;h2&gt;Learning Vim&lt;/h2&gt;
&lt;p&gt;Being Vim a free keyboard-based open source cross-platform editor, it sounded like the perfect answer to all my needs. But of course all that goodness didn't come for free as it involves a steep learning curve. Thankfully there are some amazing resources out there and if you happen to be using Neovim I strongly recommend to go through the tutorial (just launch Neovim and type &lt;code&gt;:Tutor&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;My approach to Vim was to go cold turkey, which in practice meant that I switched to it (or actually to Neovim) as my day-to-day editor. I initially tried to use the Vim Plugin in VSCode, but that didn't really worked for me - maybe it was because I never felt at home with VSCode in the first place, but it mostly felt like a headache without any progress in actually learning Vim. So I went back to Vim and started with a very vanilla configuration with the idea that I would build it up on it whenever I felt the need for extra functionality. Did I get frustrated from lack of functionality from time to time? Absolutely! But shaping my &lt;code&gt;.vimrc&lt;/code&gt; according to my needs and pain points is a great way to reduce the risk of bloating my setup with stuff I don't really need, as well as to make sure that I understand what every single line of my config file does.&lt;/p&gt;
&lt;p&gt;As there's only a certain amount of frustration a person can cope with, I also made some compromises. For example I decided to ignore &lt;code&gt;hjkl&lt;/code&gt; and stick to the arrows - I know this will probably offend Vim purists, but I needed a balance between learning things the Vim way and productivity. I tend to mob and pair programming a lot and I like my colleagues too much for forcing them to watch me trying to navigate around - they still had to put up with me being lost in Vim from time to time, but being unable to move around a file felt like a bit too much to endure. I don't exclude I might try to learn to use &lt;code&gt;jhkl&lt;/code&gt; in the future, but for now it felt like an ok tradeoff to just skip it.&lt;/p&gt;
&lt;p&gt;Copy and pasting is probably the part I struggle the most with at the moment. Vim doesn't use the system clipboard as default, so copy pasting things from and to Vim is anything but straightforward. Also whenever you delete something in Vim it ends in the copy-paste registry, so I often end up overwriting whatever I was meant to copy simply because I removed some stuff before pasting.&lt;/p&gt;
&lt;p&gt;On the bright side there are some motions I really enjoy and see a lot of value in. For example, the ability to delete a whole line by simply typing &lt;code&gt;dd&lt;/code&gt; is a bliss and I often find myself longing for it when using other text-editing programs. I also really like the so called &lt;a href="https://github.com/iggredible/Learn-Vim/blob/master/ch04_vim_grammar.md"&gt;&lt;em&gt;Vim grammar&lt;/em&gt;&lt;/a&gt;, i.e. the ability to combine together motions and operators to create/learn new commands. Or, in more simple terms, how things don't seem to make sense in Vim until you understand the thinking behind them and suddenly everything clicks in place.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So, was it worthy learning Vim in 2022? To me yes. Sure, it might have been frustrating at times and there were definitely occasions where editing some files took me what it felt like an eternity, but all in all it has been growing on me and nowadays I rarely feel the need to resort to other editors. So if you are willing to put the time, I'd say it's worth a shot.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/neovim/neovim/blob/master/runtime/tutor/en/vim-01-beginner.tutor"&gt;Transcript of the builtin Neovim tutorial&lt;/a&gt;. I highly recommend to do the interactive version of it by typing &lt;code&gt;:Tutor&lt;/code&gt; after launching Neovim, but it's good to have a reference for when you just want to quickly review something.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLm323Lc7iSW_wuxqmKx_xxNtJC_hJbQ7R"&gt;Vim as your editor YouTube Playlist by ThePrimeagean&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/iggredible/Learn-Vim"&gt;Learn Vim (the Smart Way)&lt;/a&gt;. Not for complete beginners but still a great read - just make sure to complete the tutorial first.&lt;/li&gt;
&lt;/ul&gt;</content><category term="dev"></category><category term="editor"></category><category term="vim"></category><category term="tools"></category></entry><entry><title>Managing multiple Git identities</title><link href="https://railslide.io/managing-multiple-git-identities.html" rel="alternate"></link><published>2022-08-30T00:00:00+02:00</published><updated>2022-08-30T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2022-08-30:/managing-multiple-git-identities.html</id><summary type="html">&lt;p&gt;How to manage multiple Git identities on the same machine&lt;/p&gt;</summary><content type="html">&lt;p&gt;I code for work and I code for fun. When I do it for fun I use my personal email address as identity in Git, but when I do it for work I am often required to use my work email. For a long time my solution was to simply to set my working email in the &lt;code&gt;.gitconfig&lt;/code&gt; of my working machine. That worked for most cases (I usually tend to only code for work on my work machine) and as the only pain point seemed to be my dotfiles, I simply accepted the pain of copy-pasting things around as a necessary evil and moved on with my life.&lt;/p&gt;
&lt;p&gt;However, it turns out that there's a better way to handle multiple identities in Git: enter conditional configuration! Basically you can tell Git to include a different &lt;code&gt;.gitconfig&lt;/code&gt; depending on a certain condition (e.g. when the &lt;code&gt;.git&lt;/code&gt; directory matches a certain path). So for my specific case I simply changed my &lt;code&gt;.gitconfig&lt;/code&gt; to like something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[user]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;lt;first name&amp;gt; &amp;lt;last name&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;lt;work email address&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;[includeIf &amp;quot;gitdir:~/Projects/personal/&amp;quot;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;.gitconfig-personal&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then in the &lt;code&gt;.gitconfig-personal&lt;/code&gt; I added&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[user]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;lt;first name&amp;gt; &amp;lt;last name&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;lt;personal email address&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and now every time I work on a repo in the &lt;code&gt;personal/&lt;/code&gt; folder the work &lt;code&gt;[user]&lt;/code&gt; block gets automagically overridden by the personal one. No more weird copy pasting around! &lt;/p&gt;
&lt;h3&gt;Gotchas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This requires Git 2.13+ to work.&lt;/li&gt;
&lt;li&gt;The last slash of the &lt;code&gt;gitdir&lt;/code&gt; path matters! If you forget it, it won't work.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;../&lt;/code&gt; gets matched literally, so don't use that if you want to refer to the parent folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-config#_conditional_includes"&gt;Conditional configuration in Git docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="dev"></category><category term="git"></category></entry><entry><title>How to override pytest-django settings discovery order</title><link href="https://railslide.io/how-to-override-pytest-django-settings-discovery-order.html" rel="alternate"></link><published>2016-09-29T00:00:00+02:00</published><updated>2016-09-29T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2016-09-29:/how-to-override-pytest-django-settings-discovery-order.html</id><summary type="html">&lt;p&gt;The order pytest-django uses for determining which settings file should be used for running tests might not be the most optimal when using environment variables. However, it is still possible to override it so that it picks up the correct file without recurring to extra typing.&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you want to use Pytest for running the test suite in your Django project, all you need to do is to install pytest-django, tell it where to look for the Django settings file - usually by placing a &lt;code&gt;pytest.ini&lt;/code&gt; file in the project root folder - and you're ready to go. However, even though the &lt;code&gt;pytest.ini&lt;/code&gt; file is probably the most common way to point pytest-django to the settings file, it also the last place in which pytest-django will look for it. In fact, every time you run &lt;code&gt;pytest&lt;/code&gt;, pytest-django will check for the &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; variable in the following order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;command line option with &lt;code&gt;--ds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;environment variables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pytest.ini&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While this order would work perfectly fine for many projects, if you happen to have an enviroment variable pointing to a different settings file (e.g. if you're running your project in a Docker container), it might reveals itself as a bit of a bummer. So, what are the available options for preventing django-pytest from picking up the wrong variable?&lt;/p&gt;
&lt;h2&gt;Using the &lt;code&gt;--ds&lt;/code&gt; option&lt;/h2&gt;
&lt;p&gt;This is probably a no-brainer, but the most obvious way to make sure pytest-django picks up the right settings file is to pass the &lt;code&gt;--ds&lt;/code&gt; option when invoking &lt;code&gt;pytest&lt;/code&gt; from the command line.&lt;/p&gt;
&lt;p&gt;While it certainly works, it adds quite a lot of typing - especially if you use a &lt;a href="https://www.rdegges.com/2011/the-perfect-django-settings-file/"&gt;settings module instead of a single setting file&lt;/a&gt;, since it could easily translate into&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pytest --ds&lt;span class="o"&gt;=&lt;/span&gt;project_folder.settings_folder.settings_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Certainly not something I'd like to do every time I want to run the test suite.&lt;/p&gt;
&lt;h2&gt;Setting the environment variable&lt;/h2&gt;
&lt;p&gt;Another way around the issue is to set the environment variable to the test settings file before every test run and the setting it back to its original value once you're finished.&lt;/p&gt;
&lt;p&gt;However, besides still requiring quite a lot of typing, this method is also extremely error prone. What if you forget to set the environment variable back after test running? So, unless you're willing to take the risk of frustrating debugging time trying to figure out why your app is not working as it should, this option is pretty much a no-op.&lt;/p&gt;
&lt;h2&gt;Using &lt;code&gt;addopts&lt;/code&gt; in the &lt;code&gt;pytest.ini&lt;/code&gt; file&lt;/h2&gt;
&lt;p&gt;Wouldn't be awesome if you could just use the &lt;code&gt;pytest.ini&lt;/code&gt; file, set all the necessary settings in there, and not have to worry ever again? Actually you can, thanks to &lt;a href="http://doc.pytest.org/en/3.0.2/customize.html#confval-addopts"&gt;&lt;code&gt;addopts&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What &lt;code&gt;addopts&lt;/code&gt; does is to add options (hence the double d!) to your test run as if they were specified via command line. So, for example, if you want to update and export coverage every time you run the suite, you would write this in the &lt;code&gt;pytest.ini&lt;/code&gt; file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[pytest]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;addopts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;--cov&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;--cov-report&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;html&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and every time you run &lt;code&gt;pytest&lt;/code&gt; it will, behind the scene, be interpreted as if you have run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pytest --cov&lt;span class="o"&gt;=&lt;/span&gt;. --cov-report&lt;span class="o"&gt;=&lt;/span&gt;html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thus, by adding &lt;code&gt;--ds=project_folder.settings_folder.settings_file&lt;/code&gt; to &lt;code&gt;addopts&lt;/code&gt; it is possible to override pytest-django discovery order and make sure that the value in the &lt;code&gt;pytest.ini&lt;/code&gt; file gets read instead of environment variable.&lt;/p&gt;
&lt;p&gt;Ok, but what if you want to point pytest to a different settings file for one run only? No problem! One of the perks of this method is that you can esplicitly pass the &lt;code&gt;--ds&lt;/code&gt; option from the command line to override the one in the &lt;code&gt;pytest.ini&lt;/code&gt; file. So running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pytest --ds&lt;span class="o"&gt;=&lt;/span&gt;other_settings_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;will just work as usual. Neat!&lt;/p&gt;</content><category term="dev"></category><category term="django"></category><category term="pytest"></category><category term="pytest-django"></category><category term="environment variables"></category></entry><entry><title>Using pyvenv with virtualenvwrapper</title><link href="https://railslide.io/pyvenv-virtualenvwrapper.html" rel="alternate"></link><published>2016-06-07T00:00:00+02:00</published><updated>2016-06-07T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2016-06-07:/pyvenv-virtualenvwrapper.html</id><summary type="html">&lt;p&gt;After reading that it might be possible to use virtualenvwrapper with pyvenv, I decided to fire up a couple of virtual machines and to find it out.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python 3 ships with pyvenv, a built-in virtualenv manager. Although I welcomed the news as a definitely good one, the absence of a virtualenvwrapper-like tool for pyvenv has always stopped me from giving it a try. I consider virtualenvwrapper to be a super neat tool (I even wrote a plugin for it!) and I don't see why I would want to type the path to my virtual environment activation script every time I want to activate it, when I can just use a way more pythonic &lt;code&gt;workon my_venv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I happened, however, to stumble into &lt;a href="https://groups.google.com/forum/#!msg/virtualenvwrapper/bkpwkfyIppM/9M9mz3pB0RQJ"&gt;a conversation&lt;/a&gt; in the virtualenvwrapper google group, where Doug Hellman (aka the guy behind virtualenvwrapper) wrote that &lt;em&gt;in theory&lt;/em&gt; it should be possible to use virtualenvwrapper with pyvenv. So I immediately fired up a couple of virtual machines and started playing around in order to see whether it was possible to turn that &lt;em&gt;in theory&lt;/em&gt; into an &lt;em&gt;in practice&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;The Ubuntu mess&lt;/h2&gt;
&lt;p&gt;According to Python documentation I should be able to invoke pyvenv by simply calling &lt;code&gt;pyvenv [args]&lt;/code&gt;. However, that is not the case for Ubuntu. Thus, my first attempt to set my &lt;code&gt;VIRTUALENVWRAPPER_VIRTUALENV&lt;/code&gt; variable equal to &lt;code&gt;pyvenv&lt;/code&gt; resulted in my vagrant machine complaining because it could not find it in my path. Setting it to &lt;code&gt;pyvenv-3.4&lt;/code&gt; solved it (I was initially testing on Ubuntu 14.04, which ships with Python 3.4). Though having to manually change it whenever I decide to update my Python version is far from optimal.&lt;/p&gt;
&lt;p&gt;So I set &lt;code&gt;pyvenv-3.4&lt;/code&gt; as &lt;code&gt;VIRTUALENVWRAPPER_VIRTUALENV&lt;/code&gt;, created a new virtualenv and...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Error: Command &lt;span class="s1"&gt;&amp;#39;[&amp;#39;&lt;/span&gt;/home/vagrant/.virtualenvs/test/bin/python3.4&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;-Im&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;ensurepip&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;--upgrade&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;--default-pip&lt;span class="s1"&gt;&amp;#39;]&amp;#39;&lt;/span&gt; returned non-zero &lt;span class="nb"&gt;exit&lt;/span&gt; status &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ok, not exactly what I was hoping for.&lt;/p&gt;
&lt;p&gt;After a bit of digging, it came out that it is due &lt;a href="https://bugs.launchpad.net/ubuntu/+source/python3.4/+bug/1290847"&gt;to a bug with ensurepip&lt;/a&gt; in the first release of Ubuntu 14.04. However, it is possible to bypass the problem by first creating the virtualenv without pip and then manually installing it once inside it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ mkvirtualenv --without-pip my_venv
&lt;span class="o"&gt;(&lt;/span&gt;my_venv&lt;span class="o"&gt;)&lt;/span&gt;$ curl https://bootstrap.pypa.io/get-pip.py &lt;span class="p"&gt;|&lt;/span&gt; python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Quite a lot to type, plus you have to wait for Pip to install. Definitely not optimal.&lt;/p&gt;
&lt;p&gt;Fortunately the issue has been solved in Ubuntu 14.04.2 (which allowed me to perform my tests), but for some reason the whole pyvenv package has been &lt;a href="http://askubuntu.com/questions/682612/pyvenv-3-4-disappeared-in-ubuntu-14-04-3"&gt;removed in Ubuntu 14.04.03&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ok, not exactly an encouraging scenario... but hey! Ubuntu 16.04 has been released in the meanwhile and it ships with Python 3.5! Maybe things have changed in the new LTS? Well, apparently not, since getting an image with a working pyvenv package looks pretty much like a lottery: you pick one and hope for the best.&lt;/p&gt;
&lt;p&gt;The vagrant box &lt;code&gt;20160521.0.0&lt;/code&gt; shipped with a working pyvenv, but then it disappeared from the catalog. The &lt;code&gt;20160528.0.0&lt;/code&gt; one brings back to the good old ensurepip bug, while in the &lt;code&gt;20160606.1.0&lt;/code&gt; pyvenv seems to work again. For the sake honesty, it might be a problem related to the vagrant boxes only, since this wasn't the &lt;a href="https://github.com/mitchellh/vagrant/issues/7288"&gt;only&lt;/a&gt; &lt;a href="https://groups.google.com/d/msg/vagrant-up/cUXVwSDi4vc/OhyXR-G7CAAJ"&gt;issue&lt;/a&gt; I encountered. But at this point I already started to wonder whether the pyvenv package will be ever stable enough to be used in everyday development.&lt;/p&gt;
&lt;p&gt;The only good news is that in 16.04 the package can also be installed and invoked through a more generic alias (&lt;code&gt;python3-venv&lt;/code&gt; for installing and &lt;code&gt;pyvenv&lt;/code&gt; for invoking), so that - if it will ever become stable - you will have no longer to worry about manually updating your pyvenv version in your shell start file.&lt;/p&gt;
&lt;h2&gt;What doesn't work when it works&lt;/h2&gt;
&lt;p&gt;Leaving Ubuntu peculiarities apart, the initial question remains: assuming a working pyvenv package, is it possible to use it as a replacement for virtualenv in virtualenwrapper?&lt;/p&gt;
&lt;p&gt;The answer is yes, but with some gotchas.&lt;/p&gt;
&lt;p&gt;All the site packages related commands, i.e&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lssitepackages&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toogleglobalsitepackages&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cdsitepackages&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add2virtualenv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;don't work and they all raise&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sysconfig&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;cpvirtualenv&lt;/code&gt; is instead a bit weird, since it does copy the virtualenv, but it displays the name of the original one in front of the prompt of all its copies. Even making copies of a copy doesn't change the result: it still shows the name of the first original. The &lt;code&gt;$VIRTUAL_ENV&lt;/code&gt; variable and the interpreter point to the correct folder tho...&lt;/p&gt;
&lt;p&gt;Last but not least, is probably worthy mentioning that - by design - pyvenv doesn't offer the possibility to specify a Python interpreter for virtual environments, so&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ mkvirtualenv -p /path/to/python/interpreter my_venv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;no longer works, which means no way to get a Python 2.7 virtualenv out of it.&lt;/p&gt;
&lt;p&gt;All the rest work as expected.&lt;/p&gt;
&lt;h2&gt;Summing up&lt;/h2&gt;
&lt;p&gt;Before I started experiment with it, I was seriously tinkering with the idea of dropping virtualenv altogether and use pyvenv instead. However, after seeing the results, it looks like it's not going to be the case. Not much for the site packages commands - I think this was the first time I ever used them - but rather for the impossibility to switch to Python 2.7 when needed.&lt;/p&gt;
&lt;p&gt;Also, the whole Ubuntu situation is quite a show-stopper for me, since I don't really want to rely on hoping that everything still works every time I run an &lt;code&gt;apt update&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, at the current status, replacing virtualenv with pyvenv is definitely a no-op for me. However, if you want to give it a try, I uploaded the Vagrantfiles for the virtual machines in a &lt;a href="https://github.com/Railslide/pyvenvwrapper"&gt;GitHub repo&lt;/a&gt;. They're provisioned with a shell script, so that there's no need to install any fancy tool for running them. Feel free to play with them and don't forget to give me a shout if you find a way to fix those issues!&lt;/p&gt;</content><category term="dev"></category><category term="virtualenvwrapper"></category><category term="virtualenv"></category><category term="python3"></category><category term="pyvenv"></category></entry><entry><title>Travis, Mock, different Python versions, and an afternoon of frustration</title><link href="https://railslide.io/travis-mock-afternoon-of-frustration.html" rel="alternate"></link><published>2016-05-15T00:00:00+02:00</published><updated>2016-05-15T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2016-05-15:/travis-mock-afternoon-of-frustration.html</id><summary type="html">&lt;p&gt;My plan was to quickly set up Travis CI for Subvenv and then move on to other projects. Instead, it came out that I couldn't have been more wrong and I ended up instead in an afternoon of frustration.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been tinkering for a while with the idea of setting up Travis CI for Subvenv. I mean, automatically running tests on pull requests sounded like a great idea and the getting started guide seemed pretty straightforward, so why not use a bit of my today's free-for-coding time for setting Travis up?&lt;/p&gt;
&lt;p&gt;Armed with enthusiasm, I set up the &lt;code&gt;.travis.yml&lt;/code&gt; configuration file, granted the necessary GitHub permissions, enabled Travis for Subvenv, pushed, and... build failure!&lt;/p&gt;
&lt;h2&gt;There's always a first time (for a failure)&lt;/h2&gt;
&lt;p&gt;Ok, you know the old adage: &lt;em&gt;if it compiles the first time, there must be something wrong&lt;/em&gt;. And in a similar fashion, this first failure didn't come at all as a surprise. Not a big deal. Also, the build for Python 3.4 succeeded, which is good.&lt;/p&gt;
&lt;p&gt;I checked out the error messages and - of course - it complains because it couldn't find the &lt;code&gt;unittest.mock&lt;/code&gt; module in Python 2. Since I'd rather not add dependencies that are not strictly necessary for setting up the development environment, I was quite happy to read that Travis CI automatically installs mock in its testing environments. So, I wrapped my import statement in a try-except block as such:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_open&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_open&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To be honest, I am not super glad about an import that relies on a non-mandatory dependency, but let's play along for now and let's get Travis up and running - I can always come up with something better on a later moment.&lt;/p&gt;
&lt;p&gt;Ok so, commit my hack, push, and hold my breath for a handful of seconds. Does it work? Nope.&lt;/p&gt;
&lt;h2&gt;Builtins, __builtin__, and better mocking decisions&lt;/h2&gt;
&lt;p&gt;Since Subvenv relies on I/O operations for doing its job, I made sure to mock them away when writing my tests. However, since I use Python 3 as my default, I had initially mocked the &lt;code&gt;open&lt;/code&gt; function like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;builtins.open&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That of course didn't work in Python 2, since there the module is called &lt;code&gt;__builtin__&lt;/code&gt;. So, after a hacky and unsuccessful attempt, I ended up in rewriting my mock in a more specific and robust way. Instead of patching the function within the Builtins module, I patched the function &lt;em&gt;call&lt;/em&gt; made inside my module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;subvenv.core.open&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this way, there's no need to worry about where the function comes from, since all it matters is that it gets called within my module's namespace.&lt;/p&gt;
&lt;h2&gt;Python 2.6 and Unittest, Python 3.2 and Pip&lt;/h2&gt;
&lt;p&gt;In the meanwhile, Python 2.6 was throwing its own kind of errors. That wasn't a big problem either, since I had added it to list of interpreters mostly out of curiosity. Nevertheless, I did a check on the errors and investigated its causes a bit and it came out that before 2.7 it wasn't possible to use &lt;code&gt;self.AssertRaises&lt;/code&gt; as a context manager (see &lt;a href="https://docs.python.org/2/library/unittest.html#unittest.TestCase.assertRaises"&gt;here&lt;/a&gt; and &lt;a href="https://bugs.python.org/issue4444"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Supporting Python 2.6 has never been on my roadmap and adapting my tests to it didn't seem worth the effort, so I didn't think twice about ditching it from the interpreters list.&lt;/p&gt;
&lt;p&gt;Python 3.2 ended up sharing the same fate as Python 2.6, since I discovered that Pip no longer supports it. Thus, due to the impossibility to install the necessary dependencies, I decided to simply follow Pip's example and remove also Python 3.2 from my Travis configuration file.&lt;/p&gt;
&lt;h2&gt;Which mock?&lt;/h2&gt;
&lt;p&gt;Ok, so back to my mocks! Now they get imported and patch what they need to patch, but still don't seem to work as expected. Or rather, it looks like there's something off with the &lt;code&gt;mock_open&lt;/code&gt; helper, since for some reason it returns a &lt;code&gt;MagicMock&lt;/code&gt; instance instead of the specified &lt;code&gt;read_data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After a bit of head scratching and googling, I found a &lt;a href="https://github.com/travis-ci/travis-ci/issues/5849"&gt;feature request&lt;/a&gt; to Travis that shaded light over my own problem. Thanks to it I got to discover that Travis runs an old version of Mock (I haven't figured out which one exactly, but for sure older than 1.3.0) which does not implement &lt;code&gt;mock_open&lt;/code&gt; as later versions do. Thankfully the same issue suggested also a workaround for it, i.e. to add an explicit install command for the desired version to the configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install .&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install mock==2.0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Mock and Python 3.3&lt;/h2&gt;
&lt;p&gt;Ok, after the latest changes, I managed to add Python 2.7 to the list of successful builds. However, Python 3.3 shows up still in red and the error message is basically the same one I got when I add the Mock version issue in Python 2.7. That's weird!&lt;/p&gt;
&lt;p&gt;Just to be sure, I double checked: yes, Mock is already part of the Unittest module in Python 3.3 and yes, its implementation of the &lt;code&gt;mock_open&lt;/code&gt; does take &lt;code&gt;read_data&lt;/code&gt; as an argument. However, as the documentation specifies, the &lt;code&gt;readline&lt;/code&gt; and &lt;code&gt;readlines&lt;/code&gt; method have been added in version 3.4, hence my error.&lt;/p&gt;
&lt;p&gt;Ok, let's flip the imports then, so that the external library gets tried first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_open&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_open&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And finally, all green!&lt;/p&gt;
&lt;h2&gt;All in all&lt;/h2&gt;
&lt;p&gt;Phew! That was quite an amount of trials and errors - especially considering that I was expecting to be done with it in half an hour or so!&lt;/p&gt;
&lt;p&gt;It is a bit sad to think that if I would have coded Subvenv in Python 2.7 I would have spared myself quite some headaches. Also, I am still not super happy to have to rely on an external backport of a built-in module in order to continuously integrate my code.&lt;/p&gt;
&lt;p&gt;But hey, the bright side is that I got to learn a lot from it! While there have been moments when the thought of giving up has surfaced my mind, the whole process has been a super interesting travel through how different things are implemented in different versions of Python, as well as how to write code that is compatible with them. Also, code gets now automatically tested when opening a pull request, which is great. So yeah, I guess I can call it a long but profitable afternoon!&lt;/p&gt;</content><category term="dev"></category><category term="travis-ci"></category><category term="python"></category><category term="python3"></category><category term="mock"></category></entry><entry><title>How to release your code (aka Git tags)</title><link href="https://railslide.io/how-to-release-aka-git-tags.html" rel="alternate"></link><published>2016-04-02T00:00:00+02:00</published><updated>2016-04-02T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2016-04-02:/how-to-release-aka-git-tags.html</id><summary type="html">&lt;p&gt;After spending quite some time working on your side project, you feel that it is finally good enough for going public. Releasing sounds like a super neat idea, but how do you do it?&lt;/p&gt;</summary><content type="html">&lt;p&gt;After spending quite some time working on your side project, you feel that it is finally good enough for going public. Releasing sounds like a super neat idea, but how do you do it?&lt;/p&gt;
&lt;h2&gt;Releasing through Github&lt;/h2&gt;
&lt;p&gt;Github provides a very straightforward release interface. All you need to do is to click on the releases counter, press the &lt;em&gt;"Create a new release"&lt;/em&gt; button, fill the form, submit, and you're done. Github also offer the possibility to draft releases - which comes in handy if you want to start preparing the release while still working on the code for it - or pre-releases, in case your code is not really stable yet.&lt;/p&gt;
&lt;p&gt;Github also provides you with a fancy link in the form of github.com/Username/repo/releases/latest, which will allow people to get directly to the latest release, no matter its number.&lt;/p&gt;
&lt;h2&gt;Releasing from the command line (with Git tags)&lt;/h2&gt;
&lt;p&gt;Github interface it is certainly nice, but it comes to the price of making your release workflow dependent on Github. What if a certain point you decide that you want to move your code away from Github? Also wouldn't be awesome if you could take care of your releases directly from your trusted terminal? Well, it turns out that you can, since what Github does behind the scene is to create and set a Git tag on the repository.&lt;/p&gt;
&lt;p&gt;Tags in Git are a way to set a reference to a specific point in history. You can think of them as a way to &lt;em&gt;bookmark&lt;/em&gt; a specific commit. So when you download the source code for your-awesome-project.v1.1.0 you're basically saying "Hey Git, fetch me the code up to the point that correspond to the commit tagged with the name your-awesome-project.v1.1.0".&lt;/p&gt;
&lt;p&gt;You can set a tag with the &lt;code&gt;git tag&lt;/code&gt; command. However, before you go git-tagging all the things, you should probably be aware that there are two kinds of tags in Git: annotated and lightweight. As the man page for &lt;code&gt;git-tag&lt;/code&gt; explains:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;Tag&lt;/span&gt; &lt;span class="nv"&gt;objects&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;created&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;, &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;, &lt;span class="nv"&gt;or&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;are&lt;/span&gt; &lt;span class="nv"&gt;called&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;annotated&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;tags&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;they&lt;/span&gt; &lt;span class="nv"&gt;contain&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;creation&lt;/span&gt; &lt;span class="nv"&gt;date&lt;/span&gt;, &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;tagger&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;mail&lt;/span&gt;, &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;tagging&lt;/span&gt;
&lt;span class="nv"&gt;message&lt;/span&gt;, &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;an&lt;/span&gt; &lt;span class="nv"&gt;optional&lt;/span&gt; &lt;span class="nv"&gt;GnuPG&lt;/span&gt; &lt;span class="nv"&gt;signature&lt;/span&gt;. &lt;span class="nv"&gt;Whereas&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;lightweight&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;tag&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;simply&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;an&lt;/span&gt; &lt;span class="nv"&gt;object&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;usually&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;commit&lt;/span&gt; &lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;.

&lt;span class="nv"&gt;Annotated&lt;/span&gt; &lt;span class="nv"&gt;tags&lt;/span&gt; &lt;span class="nv"&gt;are&lt;/span&gt; &lt;span class="nv"&gt;meant&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;release&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nv"&gt;lightweight&lt;/span&gt; &lt;span class="nv"&gt;tags&lt;/span&gt; &lt;span class="nv"&gt;are&lt;/span&gt; &lt;span class="nv"&gt;meant&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;temporary&lt;/span&gt; &lt;span class="nv"&gt;object&lt;/span&gt; &lt;span class="nv"&gt;labels&lt;/span&gt;. &lt;span class="k"&gt;For&lt;/span&gt; &lt;span class="nv"&gt;this&lt;/span&gt; &lt;span class="nv"&gt;reason&lt;/span&gt;, &lt;span class="nv"&gt;some&lt;/span&gt; &lt;span class="nv"&gt;git&lt;/span&gt;
&lt;span class="nv"&gt;commands&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;naming&lt;/span&gt; &lt;span class="nv"&gt;objects&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;like&lt;/span&gt; &lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;describe&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="nv"&gt;ignore&lt;/span&gt; &lt;span class="nv"&gt;lightweight&lt;/span&gt;
&lt;span class="nv"&gt;tags&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;default&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To be honest, I still haven't yet figured out a good case for lightweight tags - if you have, give me a shout 'cause I'd love to know! Anyways, the bottom line is: &lt;strong&gt;do not forget the &lt;code&gt;-a&lt;/code&gt; flag when you're trying to make a release&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Ok, back to our release!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git tag -a v1.0.0 -m &lt;span class="s2"&gt;&amp;quot;My awesome message for v1.0.0&amp;quot;&lt;/span&gt;
$ git push --tags  &lt;span class="c1"&gt;# tags need to be pushed explicitly&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Done!&lt;/p&gt;
&lt;h2&gt;Happy ending? Almost...&lt;/h2&gt;
&lt;p&gt;OK, so after pushing your latest release via command line, you go an check Github to see if everything worked as expected. The counter increased - which is good - but if you had done any previous release via GUI the releases page might not look exactly how you would have expected it. In fact, even though Github correctly displays your tags, it doesn't mark it as the latest relase.&lt;/p&gt;
&lt;p&gt;The reason for that is that at the time of writing Github doesn't fully support releases made via command line. That's a bummer and unfortunately there's nothing we can do other than hoping that the folk at Github will implement it soon.&lt;/p&gt;
&lt;p&gt;However, leaving it as it is doesn't really qualify as an option since having a flag and a direct link pointing to the wrong release is worse than not having them at all. So what our workaround options? We could use the Github interface to mark a tag as the latest release, though it would add extra manual work to the release process and - again - making it dependent on Github. Alternatively it possible is to remove the Github sugarcoat from previous releases, so that the &lt;em&gt;latest release&lt;/em&gt; flag disappears. The downside of doing so is that the direct link to the latest release won't work anymore.&lt;/p&gt;
&lt;p&gt;Unfortunately, every workaround has its flaws, so which one would work best depends on what your needs are and what compromises you're ready to make. Other than that, happy releasing!&lt;/p&gt;</content><category term="dev"></category><category term="git"></category><category term="github"></category><category term="release"></category></entry><entry><title>Subvenv</title><link href="https://railslide.io/subvenv-v1-0.html" rel="alternate"></link><published>2016-03-01T00:00:00+01:00</published><updated>2016-03-01T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2016-03-01:/subvenv-v1-0.html</id><summary type="html">&lt;p&gt;Subvenv 1.0 is out! What it is, why I wrote it, and why you might want to use it.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A couple of days ago I released and upload to PyPI the first stable release of &lt;a href="https://github.com/Railslide/subvenv"&gt;Subvenv&lt;/a&gt;. Besides being a labor of love, Subvenv is an utility for creating virtualenv-friendly Sublime Text project files.&lt;/p&gt;
&lt;p&gt;The reason why I wrote it is that I am lazy and I love to have computers taking care of boring and repetitive tasks on my behalf. More specifically, I wasn't super happy with my typical workflow for starting a new project, since it required me a certain number of steps before being finally able to crunch some code.&lt;/p&gt;
&lt;p&gt;Here's what my workflow used to look like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a Virtualenvwrapper project&lt;/li&gt;
&lt;li&gt;open Sublime Text&lt;/li&gt;
&lt;li&gt;create a Sublime Text project&lt;/li&gt;
&lt;li&gt;add the previously created folder to the project file&lt;/li&gt;
&lt;li&gt;add the virtual environment interpreter path to the project file, so that linting plugins could pick that instead of the global one (and stop complaining about missing imports!)&lt;/li&gt;
&lt;li&gt;Start coding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now with Subvenv instead:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a Virtualenvwrapper project&lt;/li&gt;
&lt;li&gt;open Sublime Text&lt;/li&gt;
&lt;li&gt;open the Sublime Text project&lt;/li&gt;
&lt;li&gt;Start coding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Way faster and less error prone! So, why not sharing it? I cleaned up the code a bit, made it more virtual environment management agnostic, and uploaded it on PyPI. Now it's out there. If you use Sublime Text you might want to have a look it - it may speed up your workflow too :)&lt;/p&gt;</content><category term="dev"></category><category term="subvenv"></category><category term="announcements"></category><category term="virtual environments"></category><category term="python"></category></entry><entry><title>Provisioning Vagrant with Ansible</title><link href="https://railslide.io/provisioning-vagrant-with-ansible.html" rel="alternate"></link><published>2016-02-05T00:00:00+01:00</published><updated>2016-02-05T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2016-02-05:/provisioning-vagrant-with-ansible.html</id><summary type="html">&lt;p&gt;Vagrant is an amazing tool. However, one thing that bugged me was that provisioning scripts preparation still required me a fair amount of time and trial-errors attempts. Switching to Ansible allowed me to make my life easier and provision times shorter.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I started using Vagrant I picked bash as my provisioning tool. It looked as the most logical choice as I was already familiar with the command line. It served me well - I brought up a fair amount of virtual machines with it - but the process of getting the provision scripts still gave me some annoyances.&lt;/p&gt;
&lt;p&gt;First of all, running a non-interactive installation adds an extra layer of complexity, since you don't always know (or think about) how an interactive command will behave in an unattended installation. For me that often translated itself into: run provision, get a more or less cryptic message, ssh into the machine, run the command manually, figure out what went wrong, edit the provision script, rinse, and repeat.&lt;/p&gt;
&lt;p&gt;Then, the provision script runs from top to bottom every time a provision is run - no matter whether the machine has been already partially provisioned. You could throw in a bunch of conditional statements in order to skip the already performed steps, but that would come with the price of adding further complexity to the provisioning script.&lt;/p&gt;
&lt;p&gt;Finally, you have to &lt;em&gt;echo all the things&lt;/em&gt; in order to keep track of the different installation steps - reducing thus the readability of the script.&lt;/p&gt;
&lt;p&gt;Of course these are trivial problems and I've happily coped with them for quite some time. But then I had the chance to have a look at Ansible - and it has been a game changer!&lt;/p&gt;
&lt;p&gt;Ansible uses yaml as a language for its orchestration files (aka playbook), which makes them extremely easy to read. For example, this is how a task for installing Git could look&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install git&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;apt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg=git state=latest&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty easy to figure out what it does! On top of that, Ansible outputs the name of your tasks when running them, making it trivial for you to keep track of what's going on behind the scenes.&lt;/p&gt;
&lt;p&gt;Then there are modules, like &lt;code&gt;apt&lt;/code&gt; in the example above, which are basically wrappers for the most common operations. There are lots of them, so there's a very high chance that you'll find a module for the command you need to run. And in case you don't, you can always use the shell module to run your command as you would type it in the terminal.&lt;/p&gt;
&lt;p&gt;Besides making your life easier when it comes to write provision scripts, Ansible also makes the process of running them way faster. In fact, &lt;em&gt;idempotency&lt;/em&gt; is one of the key concept of Ansible modules, which basically means that they won't execute if their target state has already been reached. So, if you resume a partial provisioning, Ansible will skip all the previously performed tasks.&lt;/p&gt;
&lt;p&gt;Last but not least, Ansible is written in Python which is a nice plus. Unfortunately it does not support Python 3, but I guess I'll have to live with it for the time being.&lt;/p&gt;
&lt;p&gt;It is probably worthy mentioning that Ansible doesn't natively run on Windows. Fortunately the &lt;a href="http://phansible.com"&gt;Phansible team&lt;/a&gt; came up with a workaround for it: using a shell provision to install Ansible on the guest and the run provision from there. It is a bit slower than running Ansible locally, but works great for projects with cross platforms contributors. Alternatively, I heard of people being able to run Ansible with cgywin, but I have no clues about what it takes to make it happen.&lt;/p&gt;
&lt;p&gt;All in all, I would warmly recommend to give Ansible a try - especially if you are currently using bash for provisioning your vagrant machines. Here some links to get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ansible.com/"&gt;Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.ansible.com"&gt;Ansible docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.vagrantup.com/v2/provisioning/ansible.html"&gt;Vagrant docs - provisioning with Ansible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy provisioning!&lt;/p&gt;</content><category term="dev"></category><category term="vagrant"></category><category term="ansible"></category><category term="automatization"></category></entry><entry><title>Anaconda VS SublimePythonIDE</title><link href="https://railslide.io/anaconda-vs-sublime-python-ide.html" rel="alternate"></link><published>2015-01-27T00:00:00+01:00</published><updated>2015-01-27T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2015-01-27:/anaconda-vs-sublime-python-ide.html</id><summary type="html">&lt;p&gt;When I was looking for a python code linting plugin for Sublime Text 3, I stumbled upon several blog posts mentioning either SublimePythonIDE or Anaconda. The problem was, however, that a comparison between the two was nowhere to be found, so I ended up trying both.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I was looking for a python code linting plugin for Sublime Text 3, I stumbled upon several blog posts mentioning either &lt;a href="https://github.com/JulianEberius/SublimePythonIDE"&gt;SublimePythonIDE&lt;/a&gt; or &lt;a href="http://damnwidget.github.io/anaconda/"&gt;Anaconda&lt;/a&gt;. The problem was, however, that a comparison between the two was nowhere to be found, so I ended up trying both.&lt;/p&gt;
&lt;p&gt;The first thing that I have to acknowledge is that they are both very good when it comes to code linting and auto completion. So, no matter which one you choose, you can't really go wrong.&lt;/p&gt;
&lt;p&gt;When it comes to the extras SublimePythonIDE is the one that lacks most. Although this certainly comes with with the price of less flexibility, it isn't necessary a negative thing. Indeed, the strength of SublimePythonIDE is that it works out of the box: just make sure that your project settings point to correct interpreter (I delegate that to &lt;a href="http://github.com/Railslide/subvenv"&gt;Subvenv&lt;/a&gt;) and you're ready to go. Without any further effort from your side, SublimePythonIDE will provide you with fancy linting icons on the gutter and colored linting marks. While the same things can be obtained with Anaconda as well, they still require you to read the docs and tinker with the settings.&lt;/p&gt;
&lt;p&gt;Although they require some initial tuning, the extensive amount of customizable settings are not necessarily a negative things, since they offer you the possibility to adjust the way it looks and feel to suite your taste. On top of that Anaconda provides a bunch of handy IDE-like features, such as &lt;code&gt;Go to definition&lt;/code&gt;, &lt;code&gt;Show documentation&lt;/code&gt;, and &lt;code&gt;Find usage&lt;/code&gt; - all reachable via shortcuts or via command palette. It also comes with &lt;a href="https://github.com/hhatto/autopep8"&gt;AutoPEP8&lt;/a&gt;, McCabe complexity checker, and Vagrant integration (via command palette). Recently also a test runner and an import validator has been added to the already reach set of features.&lt;/p&gt;
&lt;p&gt;So which one is the best? It depends. I have settled on Anaconda, since I really enjoy the &lt;code&gt;Go to definition&lt;/code&gt;, &lt;code&gt;Show documentation&lt;/code&gt;, and &lt;code&gt;Find usage&lt;/code&gt; features and use them quite often - especially when dealing with large projects and/or large files. However, if you need a linter that just works and don't want to spend time in playing around with its configuration, SublimePythonIDE is probably the right choice. On the contrary, if you don't mind tinkering a bit with settings files and you are looking for a wider set of IDE-like functions, Anaconda is definitely worthy a shot.&lt;/p&gt;</content><category term="dev"></category><category term="python"></category><category term="sublime text"></category><category term="code linting"></category><category term="tools"></category></entry><entry><title>Hello Vagrant! (aka development environment made easy)</title><link href="https://railslide.io/hello-vagrant.html" rel="alternate"></link><published>2014-09-14T00:00:00+02:00</published><updated>2014-09-14T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2014-09-14:/hello-vagrant.html</id><summary type="html">&lt;p&gt;If you don't use Vagrant yet, you should. Here's why.&lt;/p&gt;</summary><content type="html">&lt;p&gt;For a long time my first step for starting a PHP based project has been to install Xampp on my machine. Xampp provides a considerably easy-to-install full lamp stack - no question about that. However, when I started working on more complicated projects which implied to work together with other developers issues started rising. The main problem was the differences between my local environment and the production one. Add the a further layer of differences for potentially each person involved in the project and it doesn't take much to figure out that moving the result of your work somewhere else than your machine was a guaranteed headache.&lt;/p&gt;
&lt;p&gt;Now imagine a full LAMP stack that gets activated with a command as simple as &lt;code&gt;vagrant up&lt;/code&gt; and takes automatically care of all the dependencies and needed libraries. Add on top of it that it's easily portable and tailored to your needs and you should already have enough reasons for giving Vagrant a try.&lt;/p&gt;
&lt;p&gt;If you are still not fully convinced or just curios, here is a more detailed insight of how Vagrant increases productivity and makes your life so incredibly easier.&lt;/p&gt;
&lt;h2&gt;Exactly what you need&lt;/h2&gt;
&lt;p&gt;Since you are the one provisioning your virtual machine, you get the total freedom of setting it up the way you want. This means that you can have a VM that perfectly replicates your production environment, removing thus all the potentially annoying discrepancies between your local system and the production one.&lt;/p&gt;
&lt;h2&gt;Setup only once&lt;/h2&gt;
&lt;p&gt;All you need for bringing up a VM with Vagrant is just the Vagrantfile and the provision script(s). Once you have those you are just a &lt;code&gt;vagrant up&lt;/code&gt; away from that very machine every time you need it.&lt;/p&gt;
&lt;p&gt;But the coolness doesn't stop here! If you commit the Vagrantfile and the provision scripts together with the rest of your projects files (and I don't see any good reason why you shouldn't), any developer checking out the code will be able to run the same VM on her/his computer.&lt;/p&gt;
&lt;p&gt;This is particularly useful when working in a team, since &lt;em&gt;one person&lt;/em&gt; set up the VM &lt;em&gt;just once&lt;/em&gt; and a whole team benefits from it. Furthermore, thanks to CVS, if someone needs to install a library for carry out her/his job, s/he simply edits the provision file accordingly and commit it. In this way, everyone will get the needed library installed on the VM and so long forgotten dependencies.&lt;/p&gt;
&lt;h2&gt;Develop the way you like&lt;/h2&gt;
&lt;p&gt;Vagrant automatically syncs files between the host and the guest machine. So there's no need to change anything in your beloved setup nor to use something other than your favorite editor. Any file you edit locally in a synced folder will automagically appear in the VM as well, ready to be used.&lt;/p&gt;
&lt;h2&gt;Multiple machines? Not a problem!&lt;/h2&gt;
&lt;p&gt;Vagrant allow you to have multiple VMs within the same project. They can communicate to each other, so that you can accurately reproduce the production environment of your multi-servers killer app. By the way, they are also independent from each other, so no need of bringing them all up when you need to work on only one.&lt;/p&gt;
&lt;h2&gt;Summing up&lt;/h2&gt;
&lt;p&gt;I guess it's pretty obvious that I am a huge fan of Vagrant. It makes my life so much easier (and my working team's too!) and I can no longer imagine my development workflow without it. Finally, the fact that it's also open source it's just the cherry on top.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://vagrantup.com/"&gt;Vagrant homepage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="dev"></category><category term="vagrant"></category><category term="virtual machine"></category><category term="utilities"></category><category term="dev env"></category></entry><entry><title>Setting up a dotfiles repo and easily port configurations around</title><link href="https://railslide.io/dotfiles.html" rel="alternate"></link><published>2014-07-10T00:00:00+02:00</published><updated>2014-07-10T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2014-07-10:/dotfiles.html</id><summary type="html">&lt;p&gt;How I set up a repository containing my setting and configuration files and delegated the task of creating symlinks to the computer.&lt;/p&gt;</summary><content type="html">&lt;p&gt;After having spent quite some time in finding the right set up for my developing environment, it came natural to look for a way for porting my configuration. Enter a dotfiles repo, aka having all my configurations only one &lt;code&gt;git clone&lt;/code&gt; away and making my life so much easier.&lt;/p&gt;
&lt;p&gt;Michael Smalley wrote an &lt;a href="http://blog.smalleycreative.com/tutorials/using-git-and-github-to-manage-your-dotfiles/"&gt;amazing tutorial&lt;/a&gt; for managing dotfiles and creating a script for automagically installing them (go and check it out!), which provided me with a great starting point. However, his script handles only dotfiles housed in the home directory and that didn't really get together with my goal of adding Sublime Text settings to my dotfiles repo. So I fired up Nano and extended the script in order to make it do exactly what I needed.&lt;/p&gt;
&lt;p&gt;First of all, I needed to to move Sublime configuration files to my dotfiles folder. Thankfully &lt;a href="http://zanshin.net/2013/01/21/sublime-text-2-dotfiles-simplified/"&gt;Mark Nichols' post&lt;/a&gt; tipped me that I the only folder I needed to care about was the User one. So, after cleaning it up from some experiments leftovers, I moved to my dotfiles folder and placed a symlink in its previous location.&lt;/p&gt;
&lt;p&gt;Then I added a variable holding the path to the User directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;sublimedir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.config/sublime-text-3/Packages/User
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and at the end of the file the lines taking care of the magic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# move any existing dotfiles in homedir to dotfiles_old directory, then create symlinks&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; file &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$files&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -a ~/.&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;    &lt;span class="c1"&gt;# check if a dotfile already exists&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Moving any existing dotfiles from ~ to &lt;/span&gt;&lt;span class="nv"&gt;$olddir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        mv ~/.&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="nv"&gt;$olddir&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Creating symlink to &lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt; in home directory.&amp;quot;&lt;/span&gt;
    ln -s &lt;span class="nv"&gt;$dir&lt;/span&gt;/&lt;span class="nv"&gt;$file&lt;/span&gt; ~/.&lt;span class="nv"&gt;$file&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...done&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Create symlink for Sublime Text User directory&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -d &lt;span class="nv"&gt;$sublimedir&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="c1"&gt;# check whether the directory already exists&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -L &lt;span class="nv"&gt;$sublimedir&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Removing old symlink&amp;quot;&lt;/span&gt;
        rm &lt;span class="nv"&gt;$sublimedir&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...done&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Moving the existing Sublime Text Users directory from &lt;/span&gt;&lt;span class="nv"&gt;$sublimedir&lt;/span&gt;&lt;span class="s2"&gt; to &lt;/span&gt;&lt;span class="nv"&gt;$olddir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        mv &lt;span class="nv"&gt;$sublimedir&lt;/span&gt; &lt;span class="nv"&gt;$olddir&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...done&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Creating symlink to User in &lt;/span&gt;&lt;span class="nv"&gt;$sublimedir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
ln -s &lt;span class="nv"&gt;$dir&lt;/span&gt;/sublime/User &lt;span class="nv"&gt;$sublimedir&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...done&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The full script can be found on &lt;a href="https://github.com/Railslide/dotfiles/blob/master/installdotfiles.sh"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, since Package Control updates regularly some of the files in the User folder, I added them to a &lt;code&gt;.gitignore&lt;/code&gt; file in order to avoid to much noise in my version control. A list of those files can be found in the &lt;a href="https://sublime.wbond.net/docs/syncing"&gt;docs&lt;/a&gt; of Package Control.&lt;/p&gt;</content><category term="dev"></category><category term="dotfiles"></category><category term="utilities"></category><category term="git"></category><category term="dev env"></category></entry><entry><title>Installing virtualenvwrapper for Python 3.4 on Ubuntu</title><link href="https://railslide.io/virtualenvwrapper-python3.html" rel="alternate"></link><published>2014-06-04T00:00:00+02:00</published><updated>2014-06-04T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2014-06-04:/virtualenvwrapper-python3.html</id><summary type="html">&lt;p&gt;Virtualenvwrapper is a great virtualenv management tool. Here is how I set it up for Python 3.4 on Ubuntu.&lt;/p&gt;</summary><content type="html">&lt;p&gt;After listening to an inspiring talk by &lt;a href="http://www.kennethreitz.org/"&gt;Kenneth Reitz&lt;/a&gt; about transitioning from Python 2 to Python 3 at PyCon Sweden (I'll write a blog post about it sooner or later), I've decided that I should try to stick to Python 3 as much as possible.&lt;/p&gt;
&lt;p&gt;So the first step in that direction was to set up my working environment in a Python 3 friendly way, hence to install Virtualenwrapper for Python 3. Here's how I did it.&lt;/p&gt;
&lt;p&gt;Virtualenwrapper documentation specifies that Virtualenvwrapper has been tested under Python 2.6-3.3, but no mention of Python 3.4. Being lazy and not really willing to install a third version of Python on my computer (Ubuntu 14.04 comes with Python 2.7.6 and Python 3.4 by default), I decided to give it try with what I had. Everything seems to work flawlessly so far, just keep it in mind in case you want to try to follow these instructions.&lt;/p&gt;
&lt;h2&gt;Setting up Virtualenvwrapper&lt;/h2&gt;
&lt;p&gt;Install pip for Python 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get install python3-pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install Virtualenvwrapper for Python 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo pip3 install virtualenvwrapper
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far so good. Now it is time to configure Virtualenvwrapper.&lt;/p&gt;
&lt;p&gt;Create a folder for your virtualenvs (I use ~/.virtualenvs) and set it as WORKON_HOME:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir ~/.virtualenvs
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.virtualenvs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add the following lines to ~/.bashrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;VIRTUALENVWRAPPER_PYTHON=&amp;#39;/usr/bin/python3&amp;#39; # This needs to be placed before the virtualenvwrapper command
source /usr/local/bin/virtualenvwrapper.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Close and re-open your shell and you're ready to go. Here are the basic commands for using virtualenvwrapper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkvirtualenv virtualenv_name &lt;span class="c1"&gt;# Create virtualenv&lt;/span&gt;
workon virtualenv_name &lt;span class="c1"&gt;# Activate/switch to a virtualenv&lt;/span&gt;
deactivate virtualenv_name &lt;span class="c1"&gt;# Deactivate virtualenv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Congratulations! Your Virtualenvwrapper for Python 3 is now ready to use.&lt;/p&gt;
&lt;h2&gt;Projects&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: in a previous version of this article, I suggested to use the postactivate script to automatically navigate to the project folder when activating the virtualenv. However, since I discovered that such a task is automatically performed by the projects plugin, I updated the post accordingly.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While the possibility to have isolated virtual environments just a &lt;code&gt;mkvirtualenv&lt;/code&gt; away had immediately convinced me of the usefulness of Virtualenvwrapper, projects made me falling in love for it.&lt;/p&gt;
&lt;p&gt;My typical workflow is to create a virtualenv and then create a project folder with the same name. So why not setting up Virtualenvwrapper to automatically do it for me every time I create a new virtualenv? Specify PROJECT_HOME in ~/.bashrc will do the trick:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;VIRTUALENVWRAPPER_PYTHON=&amp;#39;/usr/bin/python3&amp;#39;
PROJECT_HOME=&amp;#39;/path/to/where/you/want/your/project/folder/to/be/created&amp;#39; # This needs to be placed before the virtualenvwrapper command as well
source /usr/local/bin/virtualenvwrapper.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, when typing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkproject my_project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Virtualenvwrapper will automatically create a virtualenv and a folder called &lt;em&gt;my_project&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Cherry on top, projects automaticatilly navigates to the project folder when activating the virtualenv. Thus, when typing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;workon my_project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Virtualenvwrapper activates the virtualenv and teleports me to ~/Projects/my_project. Neat!&lt;/p&gt;</content><category term="dev"></category><category term="virtualenvwrapper"></category><category term="virtualenv"></category><category term="python3"></category></entry></feed>