<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Railslide</title><link href="http://railslide.io/" rel="alternate"></link><link href="http://railslide.io/feeds/dev.atom.xml" rel="self"></link><id>http://railslide.io/</id><updated>2016-02-05T00:00:00+01:00</updated><entry><title>Provisioning Vagrant with Ansible</title><link href="http://railslide.io/provisioning-vagrant-with-ansible.html" rel="alternate"></link><updated>2016-02-05T00:00:00+01:00</updated><author><name>Giulia Vergottini</name></author><id>tag:railslide.io,2016-02-05:provisioning-vagrant-with-ansible.html</id><summary type="html">&lt;p&gt;When I started using Vagrant I picked bash as my provisioning tool. It looked as the most logical choice as I was already familiar with the command line. It served me well - I brought up a fair amount of virtual machines with it - but the process of getting the provision scripts still gave me some annoyances.&lt;/p&gt;
&lt;p&gt;First of all, running a non-interactive installation adds an extra layer of complexity, since you don't always know (or think about) how an interactive command will behave in an unattended installation. For me that often translated itself into: run provision, get a more or less cryptic message, ssh into the machine, run the command manually, figure out what went wrong, edit the provision script, rinse, and repeat.&lt;/p&gt;
&lt;p&gt;Then, the provision script runs from top to bottom every time a provision is run - no matter whether the machine has been already partially provisioned. You could throw in a bunch of conditional statements in order to skip the already performed steps, but that would come with the price of adding further complexity to the provisioning script.&lt;/p&gt;
&lt;p&gt;Finally, you have to &lt;em&gt;echo all the things&lt;/em&gt; in order to keep track of the different installation steps - reducing thus the readability of the script.&lt;/p&gt;
&lt;p&gt;Of course these are trivial problems and I've happily coped with them for quite some time. But then I had the chance to have a look at Ansible - and it has been a game changer!&lt;/p&gt;
&lt;p&gt;Ansible uses yaml as a language for its orchestration files (aka playbook), which makes them extremely easy to read. For example, this is how a task for installing Git could look&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Install git&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;sudo&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;yes&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;apt&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pkg=git state=latest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty easy to figure out what it does! On top of that, Ansible outputs the name of your tasks when running them, making it trivial for you to keep track of what's going on behind the scenes.&lt;/p&gt;
&lt;p&gt;Then there are modules, like &lt;code&gt;apt&lt;/code&gt; in the example above, which are basically wrappers for the most common operations. There are lots of them, so there's a very high chance that you'll find a module for the command you need to run. And in case you don't, you can always use the shell module to run your command as you would type it in the terminal.&lt;/p&gt;
&lt;p&gt;Besides making your life easier when it comes to write provision scripts, Ansible also makes the process of running them way faster. In fact, &lt;em&gt;idempotency&lt;/em&gt; is one of the key concept of Ansible modules, which basically means that they won't execute if their target state has already been reached. So, if you resume a partial provisioning, Ansible will skip all the previously performed tasks.&lt;/p&gt;
&lt;p&gt;Last but not least, Ansible is written in Python which is a nice plus. Unfortunately it does not support Python 3, but I guess I'll have to live with it for the time being.&lt;/p&gt;
&lt;p&gt;It is probably worthy mentioning that Ansible doesn't natively run on Windows. Fortunately the &lt;a href="http://phansible.com"&gt;Phansible team&lt;/a&gt; came up with a workaround for it: using a shell provision to install Ansible on the guest and the run provision from there. It is a bit slower than running Ansible locally, but works great for projects with cross platforms contributors. Alternatively, I heard of people being able to run Ansible with cgywin, but I have no clues about what it takes to make it happen.&lt;/p&gt;
&lt;p&gt;All in all, I would warmly recommend to give Ansible a try - especially if you are currently using bash for provisioning your vagrant machines. Here some links to get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ansible.com/"&gt;Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.ansible.com"&gt;Ansible docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.vagrantup.com/v2/provisioning/ansible.html"&gt;Vagrant docs - provisioning with Ansible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy provisioning!&lt;/p&gt;</summary><category term="vagrant"></category><category term="ansible"></category><category term="automatization"></category></entry><entry><title>Anaconda VS SublimePythonIDE</title><link href="http://railslide.io/anaconda-vs-sublime-python-ide.html" rel="alternate"></link><updated>2015-01-27T00:00:00+01:00</updated><author><name>Giulia Vergottini</name></author><id>tag:railslide.io,2015-01-27:anaconda-vs-sublime-python-ide.html</id><summary type="html">&lt;p&gt;When I was looking for a python code linting plugin for Sublime Text 3, I stumbled upon several blog posts mentioning either &lt;a href="https://github.com/JulianEberius/SublimePythonIDE"&gt;SublimePythonIDE&lt;/a&gt; or &lt;a href="http://damnwidget.github.io/anaconda/"&gt;Anaconda&lt;/a&gt;. The problem was, however, that a comparison between the two was nowhere to be found, so I ended up trying both.&lt;/p&gt;
&lt;p&gt;The first thing that I have to acknowledge is that they are both very good when it comes to code linting and auto completion. So, no matter which one you choose, you can't really go wrong.&lt;/p&gt;
&lt;p&gt;When it comes to the extras SublimePythonIDE is the one that lacks most. Although this certainly comes with with the price of less flexibility, it isn't necessary a negative thing. Indeed, the strength of SublimePythonIDE is that it works out of the box: just make sure that your project settings point to correct interpreter (I delegate that to &lt;a href="http://github.com/Railslide/subvenv"&gt;Subvenv&lt;/a&gt;) and you're ready to go. Without any further effort from your side, SublimePythonIDE will provide you with fancy linting icons on the gutter and colored linting marks. While the same things can be obtained with Anaconda as well, they still require you to read the docs and tinker with the settings.&lt;/p&gt;
&lt;p&gt;Although they require some initial tuning, the extensive amount of customizable settings are not necessarily a negative things, since they offer you the possibility to adjust the way it looks and feel to suite your taste. On top of that Anaconda provides a bunch of handy IDE-like features, such as &lt;code&gt;Go to definition&lt;/code&gt;, &lt;code&gt;Show documentation&lt;/code&gt;, and &lt;code&gt;Find usage&lt;/code&gt; - all reachable via shortcuts or via command palette. It also comes with &lt;a href="https://github.com/hhatto/autopep8"&gt;AutoPEP8&lt;/a&gt;, McCabe complexity checker, and Vagrant integration (via command palette). Recently also a test runner and an import validator has been added to the already reach set of features.&lt;/p&gt;
&lt;p&gt;So which one is the best? It depends. I have settled on Anaconda, since I really enjoy the &lt;code&gt;Go to definition&lt;/code&gt;, &lt;code&gt;Show documentation&lt;/code&gt;, and &lt;code&gt;Find usage&lt;/code&gt; features and use them quite often - especially when dealing with large projects and/or large files. However, if you need a linter that just works and don't want to spend time in playing around with its configuration, SublimePythonIDE is probably the right choice. On the contrary, you don't mind tinkering a bit with settings files and you are looking for a wider set of IDE-like functions, Anaconda is definitely worthy a shot.&lt;/p&gt;</summary><category term="python"></category><category term="sublime text"></category><category term="code linting"></category><category term="tools"></category></entry><entry><title>Hello Vagrant! (aka development environment made easy)</title><link href="http://railslide.io/hello-vagrant.html" rel="alternate"></link><updated>2014-09-14T00:00:00+02:00</updated><author><name>Giulia Vergottini</name></author><id>tag:railslide.io,2014-09-14:hello-vagrant.html</id><summary type="html">&lt;p&gt;For a long time my first step for starting a PHP based project has been to install Xampp on my machine. Xampp provides a considerably easy-to-install full lamp stack - no question about that. However, when I started working on more complicated projects which implied to work together with other developers issues started rising. The main problem was the differences between my local environment and the production one. Add the a further layer of differences for potentially each person involved in the project and it doesn't take much to figure out that moving the result of your work somewhere else than your machine was a guaranteed headache.&lt;/p&gt;
&lt;p&gt;Now imagine a full LAMP stack that gets activated with a command as simple as &lt;code&gt;vagrant up&lt;/code&gt; and takes automatically care of all the dependencies and needed libraries. Add on top of it that it's easily portable and tailored to your needs and you should already have enough reasons for giving Vagrant a try.&lt;/p&gt;
&lt;p&gt;If you are still not fully convinced or just curios, here is a more detailed insight of how Vagrant increases productivity and makes your life so incredibly easier.&lt;/p&gt;
&lt;h2&gt;Exactly what you need&lt;/h2&gt;
&lt;p&gt;Since you are the one provisioning your virtual machine, you get the total freedom of setting it up the way you want. This means that you can have a VM that perfectly replicates your production environment, removing thus all the potentially annoying discrepancies between your local system and the production one.&lt;/p&gt;
&lt;h2&gt;Setup only once&lt;/h2&gt;
&lt;p&gt;All you need for bringing up a VM with Vagrant is just the Vagrantfile and the provision script(s). Once you have those you are just a &lt;code&gt;vagrant up&lt;/code&gt; away from that very machine every time you need it.&lt;/p&gt;
&lt;p&gt;But the coolness doesn't stop here! If you commit the Vagrantfile and the provision scripts together with the rest of your projects files (and I don't see any good reason why you shouldn't), any developer checking out the code will be able to run the same VM on her/his computer.&lt;/p&gt;
&lt;p&gt;This is particularly useful when working in a team, since &lt;em&gt;one person&lt;/em&gt; set up the VM &lt;em&gt;just once&lt;/em&gt; and a whole team benefits from it. Furthermore, thanks to CVS, if someone needs to install a library for carry out her/his job, s/he simply edits the provision file accordingly and commit it. In this way, everyone will get the needed library installed on the VM and so long forgotten dependencies.&lt;/p&gt;
&lt;h2&gt;Develop the way you like&lt;/h2&gt;
&lt;p&gt;Vagrant automatically syncs files between the host and the guest machine. So there's no need to change anything in your beloved setup nor to use something other than your favorite editor. Any file you edit locally in a synced folder will automagically appear in the VM as well, ready to be used.&lt;/p&gt;
&lt;h2&gt;Multiple machines? Not a problem!&lt;/h2&gt;
&lt;p&gt;Vagrant allow you to have multiple VMs within the same project. They can communicate to each other, so that you can accurately reproduce the production environment of your multi-servers killer app. By the way, they are also independent from each other, so no need of bringing them all up when you need to work on only one.&lt;/p&gt;
&lt;h2&gt;Summing up&lt;/h2&gt;
&lt;p&gt;I guess it's pretty obvious that I am a huge fan of Vagrant. It makes my life so much easier (and my working team's too!) and I can no longer imagine my development workflow without it. Finally, the fact that it's also open source it's just the cherry on top.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://vagrantup.com/"&gt;Vagrant homepage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="vagrant"></category><category term="virtual machine"></category><category term="utilities"></category><category term="development environment"></category></entry><entry><title>Setting up a dotfiles repo and easily port configurations around</title><link href="http://railslide.io/dotfiles.html" rel="alternate"></link><updated>2014-07-10T00:00:00+02:00</updated><author><name>Giulia Vergottini</name></author><id>tag:railslide.io,2014-07-10:dotfiles.html</id><summary type="html">&lt;p&gt;After having spent quite some time in finding the right set up for my developing environment, it came natural to look for a way for porting my configuration. Enter a dotfiles repo, aka having all my configurations only one &lt;code&gt;git clone&lt;/code&gt; away and making my life so much easier.&lt;/p&gt;
&lt;p&gt;Michael Smalley wrote an &lt;a href="http://blog.smalleycreative.com/tutorials/using-git-and-github-to-manage-your-dotfiles/"&gt;amazing tutorial&lt;/a&gt; for managing dotfiles and creating a script for automagically installing them (go and check it out!), which provided me with a great starting point. However, his script handles only dotfiles housed in the home directory and that didn't really get together with my goal of adding Sublime Text settings to my dotfiles repo. So I fired up Nano and extended the script in order to make it do exactly what I needed.&lt;/p&gt;
&lt;p&gt;First of all, I needed to to move Sublime configuration files to my dotfiles folder. Thankfully &lt;a href="http://zanshin.net/2013/01/21/sublime-text-2-dotfiles-simplified/"&gt;Mark Nichols' post&lt;/a&gt; tipped me that I the only folder I needed to care about was the User one. So, after cleaning it up from some experiments leftovers, I moved to my dotfiles folder and placed a symlink in its previous location.&lt;/p&gt;
&lt;p&gt;Then I added a variable holding the path to the User directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;sublimedir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.config/sublime-text-3/Packages/User
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and at the end of the file the lines taking care of the magic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# move any existing dotfiles in homedir to dotfiles_old directory, then create symlinks&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; file in &lt;span class="nv"&gt;$files&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -a ~/.&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;    &lt;span class="c"&gt;# check if a dotfile already exists&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Moving any existing dotfiles from ~ to &lt;/span&gt;&lt;span class="nv"&gt;$olddir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        mv ~/.&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="nv"&gt;$olddir&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Creating symlink to &lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt; in home directory.&amp;quot;&lt;/span&gt;
    ln -s &lt;span class="nv"&gt;$dir&lt;/span&gt;/&lt;span class="nv"&gt;$file&lt;/span&gt; ~/.&lt;span class="nv"&gt;$file&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...done&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Create symlink for Sublime Text User directory&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -d &lt;span class="nv"&gt;$sublimedir&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="c"&gt;# check whether the directory already exists&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -L &lt;span class="nv"&gt;$sublimedir&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Removing old symlink&amp;quot;&lt;/span&gt;
        rm &lt;span class="nv"&gt;$sublimedir&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...done&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Moving the existing Sublime Text Users directory from &lt;/span&gt;&lt;span class="nv"&gt;$sublimedir&lt;/span&gt;&lt;span class="s2"&gt; to &lt;/span&gt;&lt;span class="nv"&gt;$olddir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        mv &lt;span class="nv"&gt;$sublimedir&lt;/span&gt; &lt;span class="nv"&gt;$olddir&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...done&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Creating symlink to User in &lt;/span&gt;&lt;span class="nv"&gt;$sublimedir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
ln -s &lt;span class="nv"&gt;$dir&lt;/span&gt;/sublime/User &lt;span class="nv"&gt;$sublimedir&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...done&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The full script can be found on &lt;a href="https://github.com/Railslide/dotfiles/blob/master/installdotfiles.sh"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, since Package Control updates regularly some of the files in the User folder, I added them to a &lt;code&gt;.gitignore&lt;/code&gt; file in order to avoid to much noise in my version control. A list of those files can be found in the &lt;a href="https://sublime.wbond.net/docs/syncing"&gt;docs&lt;/a&gt; of Package Control.&lt;/p&gt;</summary><category term="dotfiles"></category><category term="utilities"></category><category term="git"></category><category term="developing environment"></category></entry><entry><title>Installing virtualenvwrapper for Python 3.4 on Ubuntu</title><link href="http://railslide.io/virtualenvwrapper-python3.html" rel="alternate"></link><updated>2014-06-04T00:00:00+02:00</updated><author><name>Giulia Vergottini</name></author><id>tag:railslide.io,2014-06-04:virtualenvwrapper-python3.html</id><summary type="html">&lt;p&gt;After listening to an inspiring talk by &lt;a href="http://www.kennethreitz.org/"&gt;Kenneth Reitz&lt;/a&gt; about transitioning from Python 2 to Python 3 at PyCon Sweden (I'll write a blog post about it sooner or later), I've decided that I should try to stick to Python 3 as much as possible.&lt;/p&gt;
&lt;p&gt;So the first step in that direction was to set up my working environment in a Python 3 friendly way, hence to install Virtualenwrapper for Python 3. Here's how I did it.&lt;/p&gt;
&lt;p&gt;Virtualenwrapper documentation specifies that Virtualenvwrapper has been tested under Python 2.6-3.3, but no mention of Python 3.4. Being lazy and not really willing to install a third version of Python on my computer (Ubuntu 14.04 comes with Python 2.7.6 and Python 3.4 by default), I decided to give it try with what I had. Everything seems to work flawlessly so far, just keep it in mind in case you want to try to follow these instructions.&lt;/p&gt;
&lt;h2&gt;Setting up Virtualenvwrapper&lt;/h2&gt;
&lt;p&gt;Install pip for Python 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install python3-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install Virtualenvwrapper for Python 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo pip3 install virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So far so good. Now it is time to configure Virtualenvwrapper.&lt;/p&gt;
&lt;p&gt;Create a folder for your virtualenvs (I use ~/.virtualenvs) and set it as WORKON_HOME:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir ~/.virtualenvs
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.virtualenvs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the following lines to ~/.bashrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;VIRTUALENVWRAPPER_PYTHON=&amp;#39;/usr/bin/python3&amp;#39; # This needs to be placed before the virtualenvwrapper command
source /usr/local/bin/virtualenvwrapper.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Close and re-open your shell and you're ready to go. Here are the basic commands for using virtualenvwrapper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkvirtualenv virtualenv_name &lt;span class="c"&gt;# Create virtualenv&lt;/span&gt;
workon virtualenv_name &lt;span class="c"&gt;# Activate/switch to a virtualenv&lt;/span&gt;
deactivate virtualenv_name &lt;span class="c"&gt;# Deactivate virtualenv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Congratulations! Your Virtualenvwrapper for Python 3 is now ready to use.&lt;/p&gt;
&lt;h2&gt;Projects&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: in a previous version of this article, I suggested to use the postactivate script to automatically navigate to the project folder when activating the virtualenv. However, since I discovered that such a task is automatically performed by the projects plugin, I updated the post accordingly.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While the possibility to have isolated virtual environments just a &lt;code&gt;mkvirtualenv&lt;/code&gt; away had immediately convinced me of the usefulness of Virtualenvwrapper, projects made me falling in love for it.&lt;/p&gt;
&lt;p&gt;My typical workflow is to create a virtualenv and then create a project folder with the same name. So why not setting up Virtualenvwrapper to automatically do it for me every time I create a new virtualenv? Specify PROJECT_HOME in ~/.bashrc will do the trick:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;VIRTUALENVWRAPPER_PYTHON=&amp;#39;/usr/bin/python3&amp;#39;
PROJECT_HOME=&amp;#39;/path/to/where/you/want/your/project/folder/to/be/created&amp;#39; # This needs to be placed before the virtualenvwrapper command as well
source /usr/local/bin/virtualenvwrapper.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, when typing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkproject my_project
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Virtualenvwrapper will automatically create a virtualenv and a folder called &lt;em&gt;my_project&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Cherry on top, projects automaticatilly navigates to the project folder when activating the virtualenv. Thus, when typing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;workon my_project
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Virtualenvwrapper activates the virtualenv and teleports me to ~/Projects/my_project. Neat!&lt;/p&gt;</summary><category term="virtualenvwrapper"></category><category term="virtualenv"></category><category term="python3"></category></entry></feed>