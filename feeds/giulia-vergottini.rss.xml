<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Railslide</title><link>http://railslide.io/</link><description></description><atom:link href="http://railslide.io/feeds/giulia-vergottini.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 27 Apr 2015 00:00:00 +0200</lastBuildDate><item><title>How to encrypt a removable disk in Ubuntu 14.04</title><link>http://railslide.io/encrypt-removable-disk-ubuntu-1404.html</link><description>&lt;p&gt;The other day, while encrypting a USB stick, I discovered that most of the available howtos (including the community wiki) refers to Ubuntu 12.04. So, here's how to do it in Ubuntu 14.04, taking into account the changes that the latest LTS introduced to the disks manager tool.&lt;/p&gt;
&lt;h2&gt;1. Install cryptsetup&lt;/h2&gt;
&lt;p&gt;The first thing you need to do is to install &lt;code&gt;cryptsetup&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install cryptsetup
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also install it from the Software center if you feel more comfortable with a graphical interface.&lt;/p&gt;
&lt;h2&gt;2. Disks manager&lt;/h2&gt;
&lt;p&gt;Launch the disk manager via &lt;em&gt;Dash &amp;gt; Disks&lt;/em&gt; and select the volume you wish to encrypt.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;WARNING: The encryption process requires will format the volume, so any previously stored data will be wiped off.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In other words,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you have any data on your USB, you probably want to back them up.&lt;/li&gt;
&lt;li&gt;Make sure to select the rigth volume to encrypt, otherwise you could accidentally wipe your hard disk off.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Select the partition, click on the gear icon under it, and choose &lt;code&gt;Format&lt;/code&gt;. Select &lt;code&gt;Overwrite existing data with zeroes (slow)&lt;/code&gt; and &lt;code&gt;Encrypted, compatible with Linux systems (LUKS + ext4)&lt;/code&gt; as type.&lt;/p&gt;
&lt;p&gt;Then insert the passphrase, confirm it, and wait until the process it's complete. Click on the lockpad icon (i.e. to close it) and you're ready to go.&lt;/p&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You need to have &lt;code&gt;cryptsetup&lt;/code&gt; installed in order to get &lt;code&gt;LUKS + ext4&lt;/code&gt; option showing up in the list of available system format.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you had the disk manager already open while installing &lt;code&gt;cryptsetup&lt;/code&gt;, you have to restart it in order to see the &lt;code&gt;LUKS + ext4&lt;/code&gt; option.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giulia Vergottini</dc:creator><pubDate>Mon, 27 Apr 2015 00:00:00 +0200</pubDate><guid>tag:railslide.io,2015-04-27:encrypt-removable-disk-ubuntu-1404.html</guid><category>ubuntu</category><category>encryption</category><category>howto</category></item><item><title>Anaconda VS SublimePythonIDE</title><link>http://railslide.io/anaconda-vs-sublime-python-ide.html</link><description>&lt;p&gt;When I was looking for a python code linting plugin for Sublime Text 3, I stumbled upon several blog posts mentioning either &lt;a href="https://github.com/JulianEberius/SublimePythonIDE"&gt;SublimePythonIDE&lt;/a&gt; or &lt;a href="http://damnwidget.github.io/anaconda/"&gt;Anaconda&lt;/a&gt;. The problem was, however, that a comparison between the two was nowhere to be found, so I ended up trying both.&lt;/p&gt;
&lt;p&gt;The first thing that I have to acknowledge is that they are both very good when it comes to code linting and auto completion. So, no matter which one you choose, you can't really go wrong.&lt;/p&gt;
&lt;p&gt;When it comes to the extras SublimePythonIDE is the one that lacks most. Although this certainly comes with with the price of less flexibility, it isn't necessary a negative thing. Indeed, the strength of SublimePythonIDE is that it works out of the box: just make sure that your project settings point to correct interpreter (I delegate that to &lt;a href="http://github.com/Railslide/subvenv"&gt;Subvenv&lt;/a&gt;) and you're ready to go. Without any further effort from your side, SublimePythonIDE will provide you with fancy linting icons on the gutter and colored linting marks. While the same things can be obtained with Anaconda as well, they still require you to read the docs and tinker with the settings.&lt;/p&gt;
&lt;p&gt;Although they require some initial tuning, the extensive amount of customizable settings are not necessarily a negative things, since they offer you the possibility to adjust the way it looks and feel to suite your taste. On top of that Anaconda provides a bunch of handy IDE-like features, such as &lt;code&gt;Go to definition&lt;/code&gt;, &lt;code&gt;Show documentation&lt;/code&gt;, and &lt;code&gt;Find usage&lt;/code&gt; - all reachable via shortcuts or via command palette. It also comes with &lt;a href="https://github.com/hhatto/autopep8"&gt;AutoPEP8&lt;/a&gt;, McCabe complexity checker, and Vagrant integration (via command palette). Recently also a test runner and an import validator has been added to the already reach set of features.&lt;/p&gt;
&lt;p&gt;So which one is the best? It depends. I have settled on Anaconda, since I really enjoy the &lt;code&gt;Go to definition&lt;/code&gt;, &lt;code&gt;Show documentation&lt;/code&gt;, and &lt;code&gt;Find usage&lt;/code&gt; features and use them quite often - especially when dealing with large projects and/or large files. However, if you need a linter that just works and don't want to spend time in playing around with its configuration, SublimePythonIDE is probably the right choice. On the contrary, you don't mind tinkering a bit with settings files and you are looking for a wider set of IDE-like functions, Anaconda is definitely worthy a shot.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giulia Vergottini</dc:creator><pubDate>Tue, 27 Jan 2015 00:00:00 +0100</pubDate><guid>tag:railslide.io,2015-01-27:anaconda-vs-sublime-python-ide.html</guid><category>sublime text</category><category>code linting</category><category>tools</category></item><item><title>Hello Vagrant! (aka development environment made easy)</title><link>http://railslide.io/hello-vagrant.html</link><description>&lt;p&gt;For a long time my first step for starting a PHP based project has been to install Xampp on my machine. Xampp provides a considerably easy-to-install full lamp stack - no question about that. However, when I started working on more complicated projects which implied to work together with other developers issues started rising. The main problem was the differences between my local environment and the production one. Add the a further layer of differences for potentially each person involved in the project and it doesn't take much to figure out that moving the result of your work somewhere else than your machine was a guaranteed headache.&lt;/p&gt;
&lt;p&gt;Now imagine a full LAMP stack that gets activated with a command as simple as &lt;code&gt;vagrant up&lt;/code&gt; and takes automatically care of all the dependencies and needed libraries. Add on top of it that it's easily portable and tailored to your needs and you should already have enough reasons for giving Vagrant a try.&lt;/p&gt;
&lt;p&gt;If you are still not fully convinced or just curios, here is a more detailed insight of how Vagrant increases productivity and makes your life so incredibly easier.&lt;/p&gt;
&lt;h2&gt;Exactly what you need&lt;/h2&gt;
&lt;p&gt;Since you are the one provisioning your virtual machine, you get the total freedom of setting it up the way you want. This means that you can have a VM that perfectly replicates your production environment, removing thus all the potentially annoying discrepancies between your local system and the production one.&lt;/p&gt;
&lt;h2&gt;Setup only once&lt;/h2&gt;
&lt;p&gt;All you need for bringing up a VM with Vagrant is just the Vagrantfile and the provision script(s). Once you have those you are just a &lt;code&gt;vagrant up&lt;/code&gt; away from that very machine every time you need it.&lt;/p&gt;
&lt;p&gt;But the coolness doesn't stop here! If you commit the Vagrantfile and the provision scripts together with the rest of your projects files (and I don't see any good reason why you shouldn't), any developer checking out the code will be able to run the same VM on her/his computer.&lt;/p&gt;
&lt;p&gt;This is particularly useful when working in a team, since &lt;em&gt;one person&lt;/em&gt; set up the VM &lt;em&gt;just once&lt;/em&gt; and a whole team benefits from it. Furthermore, thanks to CVS, if someone needs to install a library for carry out her/his job, s/he simply edits the provision file accordingly and commit it. In this way, everyone will get the needed library installed on the VM and so long forgotten dependencies.&lt;/p&gt;
&lt;h2&gt;Develop the way you like&lt;/h2&gt;
&lt;p&gt;Vagrant automatically syncs files between the host and the guest machine. So there's no need to change anything in your beloved setup nor to use something other than your favorite editor. Any file you edit locally in a synced folder will automagically appear in the VM as well, ready to be used.&lt;/p&gt;
&lt;h2&gt;Multiple machines? Not a problem!&lt;/h2&gt;
&lt;p&gt;Vagrant allow you to have multiple VMs within the same project. They can communicate to each other, so that you can accurately reproduce the production environment of your multi-servers killer app. By the way, they are also independent from each other, so no need of bringing them all up when you need to work on only one.&lt;/p&gt;
&lt;h2&gt;Summing up&lt;/h2&gt;
&lt;p&gt;I guess it's pretty obvious that I am a huge fan of Vagrant. It makes my life so much easier (and my working team's too!) and I can no longer imagine my development workflow without it. Finally, the fact that it's also open source it's just the cherry on top.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://vagrantup.com/"&gt;Vagrant homepage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giulia Vergottini</dc:creator><pubDate>Sun, 14 Sep 2014 00:00:00 +0200</pubDate><guid>tag:railslide.io,2014-09-14:hello-vagrant.html</guid><category>vagrant</category><category>virtual machine</category><category>development environment</category></item><item><title>Setting up a dotfiles repo and easily port configurations around</title><link>http://railslide.io/dotfiles.html</link><description>&lt;p&gt;After having spent quite some time in finding the right set up for my developing environment, it came natural to look for a way for porting my configuration. Enter a dotfiles repo, aka having all my configurations only one &lt;code&gt;git clone&lt;/code&gt; away and making my life so much easier.&lt;/p&gt;
&lt;p&gt;Michael Smalley wrote an &lt;a href="http://blog.smalleycreative.com/tutorials/using-git-and-github-to-manage-your-dotfiles/"&gt;amazing tutorial&lt;/a&gt; for managing dotfiles and creating a script for automagically installing them (go and check it out!), which provided me with a great starting point. However, his script handles only dotfiles housed in the home directory and that didn't really get together with my goal of adding Sublime Text settings to my dotfiles repo. So I fired up Nano and extended the script in order to make it do exactly what I needed.&lt;/p&gt;
&lt;p&gt;First of all, I needed to to move Sublime configuration files to my dotfiles folder. Thankfully &lt;a href="http://zanshin.net/2013/01/21/sublime-text-2-dotfiles-simplified/"&gt;Mark Nichols' post&lt;/a&gt; tipped me that I the only folder I needed to care about was the User one. So, after cleaning it up from some experiments leftovers, I moved to my dotfiles folder and placed a symlink in its previous location.&lt;/p&gt;
&lt;p&gt;Then I added a variable holding the path to the User directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;sublimedir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.config/sublime-text-3/Packages/User
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and at the end of the file the lines taking care of the magic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# move any existing dotfiles in homedir to dotfiles_old directory, then create symlinks&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; file in &lt;span class="nv"&gt;$files&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -a ~/.&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;    &lt;span class="c"&gt;# check if a dotfile already exists&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Moving any existing dotfiles from ~ to &lt;/span&gt;&lt;span class="nv"&gt;$olddir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        mv ~/.&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="nv"&gt;$olddir&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Creating symlink to &lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt; in home directory.&amp;quot;&lt;/span&gt;
    ln -s &lt;span class="nv"&gt;$dir&lt;/span&gt;/&lt;span class="nv"&gt;$file&lt;/span&gt; ~/.&lt;span class="nv"&gt;$file&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...done&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Create symlink for Sublime Text User directory&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -d &lt;span class="nv"&gt;$sublimedir&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="c"&gt;# check whether the directory already exists&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -L &lt;span class="nv"&gt;$sublimedir&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Removing old symlink&amp;quot;&lt;/span&gt;
        rm &lt;span class="nv"&gt;$sublimedir&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...done&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Moving the existing Sublime Text Users directory from &lt;/span&gt;&lt;span class="nv"&gt;$sublimedir&lt;/span&gt;&lt;span class="s2"&gt; to &lt;/span&gt;&lt;span class="nv"&gt;$olddir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        mv &lt;span class="nv"&gt;$sublimedir&lt;/span&gt; &lt;span class="nv"&gt;$olddir&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...done&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Creating symlink to User in &lt;/span&gt;&lt;span class="nv"&gt;$sublimedir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
ln -s &lt;span class="nv"&gt;$dir&lt;/span&gt;/sublime/User &lt;span class="nv"&gt;$sublimedir&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...done&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The full script can be found on &lt;a href="https://github.com/Railslide/dotfiles/blob/master/installdotfiles.sh"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, since Package Control updates regularly some of the files in the User folder, I added them to a &lt;code&gt;.gitignore&lt;/code&gt; file in order to avoid to much noise in my version control. A list of those files can be found in the &lt;a href="https://sublime.wbond.net/docs/syncing"&gt;docs&lt;/a&gt; of Package Control.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giulia Vergottini</dc:creator><pubDate>Thu, 10 Jul 2014 00:00:00 +0200</pubDate><guid>tag:railslide.io,2014-07-10:dotfiles.html</guid><category>dotfiles</category><category>utilities</category><category>git</category></item><item><title>How to set up Pelican on GitHub pages</title><link>http://railslide.io/pelican-github-pages.html</link><description>&lt;p&gt;Although the web is plenty of blog posts about how to set up a Pelican powered blog on GitHub pages, I still had to glean information from several sources and mix it with a bit of experimentation before being able to have my blog up and running. So hopefully this post will make someone's life easier, other than being a future reference for myself.&lt;/p&gt;
&lt;p&gt;Before starting I need to give credit where credit is due, since &lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;this post&lt;/a&gt; by Amy Hanlon and &lt;a href="http://martinbrochhaus.com/pelican2.html"&gt;this one&lt;/a&gt; by Martin Brochhaus have been a tremendous starting point for my trial-and-error journey. Once said that, we can start.&lt;/p&gt;
&lt;h1&gt;1. Setting up GitHub project pages&lt;/h1&gt;
&lt;p&gt;GitHub offers the possibility to host your site in the cloud through either &lt;a href="https://help.github.com/articles/user-organization-and-project-pages"&gt;personal or project pages&lt;/a&gt;. Although it is possible to use both for hosting a Pelican powered blog, project pages make your life so much easier when it comes both to publish your blog content and to put blog source under revision control.&lt;/p&gt;
&lt;p&gt;For creating project pages, all we need to do is to create a repository as usual and put the content we wish to publish (i.e. the HTML static files) into a branch named &lt;code&gt;gh-pages&lt;/code&gt;. Once done that, your page will show up at username.github.io/repository.&lt;/p&gt;
&lt;p&gt;Although it could sounds overly complicated - especially the &lt;code&gt;gh-pages&lt;/code&gt; branch part - you don't have to worry since an awesome program called &lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt; will take care of it for us. For now, simply create a new repository as you would do for any other project and set up a &lt;code&gt;.gitignore&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;*.pid
*.pyc
output/
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;2. Installing the needed packages&lt;/h1&gt;
&lt;p&gt;Before installing Pelican, I would recommend to create a new virtualenv. It is not mandatory, but it is definitely a good practice and would prevent the risk of conflicts between installed packages.&lt;/p&gt;
&lt;p&gt;NOTE: Pelican documentation recommends to use Pelican with Python 2.7. I am keeping up with &lt;a href="http://railslide.io/virtualenvwrapper-python3.html"&gt;my pledge of using Python 3 whenever possible&lt;/a&gt;, as well as giving a try with Python 3.4 (Ubuntu 14.04 default version). Everything works fine so far and anyways these instructions are version agnostic - just be aware of it and choose your Python version accordingly.&lt;/p&gt;
&lt;p&gt;Install pelican and ghp-import&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install pelican
pip install -e git+git://github.com/davisp/ghp-import.git#egg&lt;span class="o"&gt;=&lt;/span&gt;ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next run &lt;code&gt;pelican-quickstart&lt;/code&gt; and get ready to answer to a bunch of questions. Most of them are pretty straightforward and anyway you'll be able to change them later in your settings files. These are the only ones you need to care about for the moment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# Press enter&lt;/span&gt;
Do you want to specify a URL prefix? e.g., http://example.com &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# y&lt;/span&gt;
What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example&lt;span class="p"&gt;;&lt;/span&gt; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# http://username.github.io/repository&lt;/span&gt;
Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Answer &lt;code&gt;n&lt;/code&gt; to all the questions about uploading your website and you are ready to go.&lt;/p&gt;
&lt;h1&gt;3. Writing content&lt;/h1&gt;
&lt;p&gt;Fire up your favorite text editor and write your blog content in either Markdown or reStructuredText. Once you have done, save it in the content folder. For previewing it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make devserver
&lt;span class="c"&gt;# go to http://localhost:8000 and check if everything looks good&lt;/span&gt;
^C &lt;span class="c"&gt;# note that CTRL+C won&amp;#39;t stop dev server&lt;/span&gt;
./develop_server.sh stop &lt;span class="c"&gt;# manually stop the dev server&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;4. Publishing and pushing&lt;/h1&gt;
&lt;p&gt;Ok this is the easy part.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# pushing the source repo&lt;/span&gt;
git push origin master

&lt;span class="c"&gt;# push the output folder to GitHub pages&lt;/span&gt;
make github

&lt;span class="c"&gt;# celebrate!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Congrats! Your blog is now up and running!&lt;/p&gt;
&lt;h1&gt;5. Setting up your custom domain&lt;/h1&gt;
&lt;p&gt;Create a CNAME file containing your bare domain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mydomain.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the following lines to your pelicanconf.py, in order to make Pelican copying it to your output folder on every publish.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, assuming that you want both mydomain.com and www.mydomain.com to point at your blog, you need to set &lt;strong&gt;both the CNAME and the A-records&lt;/strong&gt; of your domain to point at github.&lt;/p&gt;
&lt;p&gt;Since this has been the most problematic step for me, here's a couple of extra thoughts regarding my domain registrar (Gandi):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure to not have any other A-record&lt;/li&gt;
&lt;li&gt;Using Gandi's web forwarding instead of setting both the CNAME and the A-records resulted in a redirect loop error&lt;/li&gt;
&lt;li&gt;You can take the rest of the zone file data from Gandi's default one&lt;/li&gt;
&lt;li&gt;Testing from different browsers and refreshing several times can help spotting some very sneaky bugs&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/22374542/2926113"&gt;This answer&lt;/a&gt; from Stack Overflow provides great step-by-step instructions for using GitHub project pages with a custom domain&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are the lines taking care of the magic in my case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;www 10800 IN CNAME railslide.github.io.
@ 10800 IN A 192.30.252.153
@ 10800 IN A 192.30.252.154
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After that, wait some hours for the DNS to propagate and you should be done.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giulia Vergottini</dc:creator><pubDate>Mon, 09 Jun 2014 00:00:00 +0200</pubDate><guid>tag:railslide.io,2014-06-09:pelican-github-pages.html</guid><category>pelican</category><category>publishing</category><category>github pages</category></item><item><title>Installing virtualenvwrapper for Python 3.4 on Ubuntu</title><link>http://railslide.io/virtualenvwrapper-python3.html</link><description>&lt;p&gt;After listening to an inspiring talk by &lt;a href="http://www.kennethreitz.org/"&gt;Kenneth Reitz&lt;/a&gt; about transitioning from Python 2 to Python 3 at PyCon Sweden (I'll write a blog post about it sooner or later), I've decided that I should try to stick to Python 3 as much as possible.&lt;/p&gt;
&lt;p&gt;So the first step in that direction was to set up my working environment in a Python 3 friendly way, hence to install Virtualenwrapper for Python 3. Here's how I did it.&lt;/p&gt;
&lt;p&gt;Virtualenwrapper documentation specifies that Virtualenvwrapper has been tested under Python 2.6-3.3, but no mention of Python 3.4. Being lazy and not really willing to install a third version of Python on my computer (Ubuntu 14.04 comes with Python 2.7.6 and Python 3.4 by default), I decided to give it try with what I had. Everything seems to work flawlessly so far, just keep it in mind in case you want to try to follow these instructions.&lt;/p&gt;
&lt;h2&gt;Setting up Virtualenvwrapper&lt;/h2&gt;
&lt;p&gt;Install pip for Python 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install python3-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install Virtualenvwrapper for Python 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo pip3 install virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So far so good. Now it is time to configure Virtualenvwrapper.&lt;/p&gt;
&lt;p&gt;Create a folder for your virtualenvs (I use ~/.virtualenvs) and set it as WORKON_HOME:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir ~/.virtualenvs
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.virtualenvs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the following lines to ~/.bashrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;VIRTUALENVWRAPPER_PYTHON=&amp;#39;/usr/bin/python3&amp;#39; # This needs to be placed before the virtualenvwrapper command
source /usr/local/bin/virtualenvwrapper.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Close and re-open your shell and you're ready to go. Here are the basic commands for using virtualenvwrapper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkvirtualenv virtualenv_name &lt;span class="c"&gt;# Create virtualenv&lt;/span&gt;
workon virtualenv_name &lt;span class="c"&gt;# Activate/switch to a virtualenv&lt;/span&gt;
deactivate virtualenv_name &lt;span class="c"&gt;# Deactivate virtualenv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Congratulations! Your Virtualenvwrapper for Python 3 is now ready to use.&lt;/p&gt;
&lt;h2&gt;Projects&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: in a previous version of this article, I suggested to use the postactivate script to automatically navigate to the project folder when activating the virtualenv. However, since I discovered that such a task is automatically performed by the projects plugin, I updated the post accordingly.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While the possibility to have isolated virtual environments just a &lt;code&gt;mkvirtualenv&lt;/code&gt; away had immediately convinced me of the usefulness of Virtualenvwrapper, projects made me falling in love for it.&lt;/p&gt;
&lt;p&gt;My typical workflow is to create a virtualenv and then create a project folder with the same name. So why not setting up Virtualenvwrapper to automatically do it for me every time I create a new virtualenv? Specify PROJECT_HOME in ~/.bashrc will do the trick:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;VIRTUALENVWRAPPER_PYTHON=&amp;#39;/usr/bin/python3&amp;#39;
PROJECT_HOME=&amp;#39;/path/to/where/you/want/your/project/folder/to/be/created&amp;#39; # This needs to be placed before the virtualenvwrapper command as well
source /usr/local/bin/virtualenvwrapper.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, when typing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkproject my_project
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Virtualenvwrapper will automatically create a virtualenv and a folder called &lt;em&gt;my_project&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Cherry on top, projects automaticatilly navigates to the project folder when activating the virtualenv. Thus, when typing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;workon my_project
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Virtualenvwrapper activates the virtualenv and teleports me to ~/Projects/my_project. Neat!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giulia Vergottini</dc:creator><pubDate>Wed, 04 Jun 2014 00:00:00 +0200</pubDate><guid>tag:railslide.io,2014-06-04:virtualenvwrapper-python3.html</guid><category>virtualenvwrapper</category><category>virtualenv</category><category>python3.4</category></item><item><title>Up and running!</title><link>http://railslide.io/up-and-running.html</link><description>&lt;p&gt;Ok, my Pelican and GitHub pages powered blog seems to be up and running! Yay!&lt;/p&gt;
&lt;p&gt;Since I plan to write a dedicated post about the setup, I'll use this one to throw some ideas about what to do next.&lt;/p&gt;
&lt;h2&gt;TO DO (not necessarily in this order)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Change theme - ideally developing my own&lt;/li&gt;
&lt;li&gt;Fix links, social buttons, etc.&lt;/li&gt;
&lt;li&gt;Fix an about page&lt;/li&gt;
&lt;li&gt;Setting up a comment system&lt;/li&gt;
&lt;li&gt;Write stuff&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giulia Vergottini</dc:creator><pubDate>Tue, 03 Jun 2014 00:00:00 +0200</pubDate><guid>tag:railslide.io,2014-06-03:up-and-running.html</guid><category>pelican</category><category>publishing</category><category>github pages</category></item></channel></rss>